{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * Options for unist util filter\n *\n * @typedef {Object} FilterOptions\n * @property {boolean} [cascade=true] Whether to drop parent nodes if they had children, but all their children were filtered out.\n */\n\nimport { convert } from 'unist-util-is';\nvar own = {}.hasOwnProperty;\n\n/**\n * Create a new tree consisting of copies of all nodes that pass test.\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree Tree to filter.\n * @param options Configuration (optional).\n * @param test is-compatible test (such as a type).\n * @returns Given `tree` or `null` if it didn’t pass `test`.\n */\nexport var filter =\n/**\n * @type {(\n *  (<Tree extends Node, Check extends Test>(node: Tree, options: FilterOptions, test: Check) => import('./complex-types').Matches<Tree, Check>) &\n *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types').Matches<Tree, Check>) &\n *  (<Tree extends Node>(node: Tree, options?: FilterOptions) => Tree)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {FilterOptions} options\n * @param {Test} test\n * @returns {Node|null}\n */\nfunction filter(tree, options, test) {\n  var is = convert(test || options);\n  var cascade = options.cascade === undefined || options.cascade === null ? true : options.cascade;\n  return preorder(tree);\n\n  /**\n   * @param {Node} node\n   * @param {number|undefined} [index]\n   * @param {Parent|undefined} [parent]\n   * @returns {Node|null}\n   */\n  function preorder(node, index, parent) {\n    /** @type {Array.<Node>} */\n    var children = [];\n    /** @type {number} */\n    var childIndex;\n    /** @type {Node} */\n    var result;\n    /** @type {string} */\n    var key;\n    if (!is(node, index, parent)) return null;\n\n    // @ts-expect-error: Looks like a parent.\n    if (node.children) {\n      childIndex = -1;\n\n      // @ts-expect-error Looks like a parent.\n      while (++childIndex < node.children.length) {\n        // @ts-expect-error Looks like a parent.\n        result = preorder(node.children[childIndex], childIndex, node);\n        if (result) {\n          children.push(result);\n        }\n      }\n\n      // @ts-expect-error Looks like a parent.\n      if (cascade && node.children.length > 0 && children.length === 0) return null;\n    }\n\n    // Create a shallow clone, using the new children.\n    /** @type {typeof node} */\n    // @ts-expect-error all the fields will be copied over.\n    var next = {};\n    for (key in node) {\n      if (own.call(node, key)) {\n        // @ts-expect-error: Looks like a record.\n        next[key] = key === 'children' ? children : node[key];\n      }\n    }\n    return next;\n  }\n};","map":{"version":3,"names":["convert","own","hasOwnProperty","filter","tree","options","test","is","cascade","undefined","preorder","node","index","parent","children","childIndex","result","key","length","push","next","call"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/unist-util-filter/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * Options for unist util filter\n *\n * @typedef {Object} FilterOptions\n * @property {boolean} [cascade=true] Whether to drop parent nodes if they had children, but all their children were filtered out.\n */\n\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create a new tree consisting of copies of all nodes that pass test.\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree Tree to filter.\n * @param options Configuration (optional).\n * @param test is-compatible test (such as a type).\n * @returns Given `tree` or `null` if it didn’t pass `test`.\n */\nexport const filter =\n  /**\n   * @type {(\n   *  (<Tree extends Node, Check extends Test>(node: Tree, options: FilterOptions, test: Check) => import('./complex-types').Matches<Tree, Check>) &\n   *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types').Matches<Tree, Check>) &\n   *  (<Tree extends Node>(node: Tree, options?: FilterOptions) => Tree)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {FilterOptions} options\n     * @param {Test} test\n     * @returns {Node|null}\n     */\n    function (tree, options, test) {\n      const is = convert(test || options)\n      const cascade =\n        options.cascade === undefined || options.cascade === null\n          ? true\n          : options.cascade\n\n      return preorder(tree)\n\n      /**\n       * @param {Node} node\n       * @param {number|undefined} [index]\n       * @param {Parent|undefined} [parent]\n       * @returns {Node|null}\n       */\n      function preorder(node, index, parent) {\n        /** @type {Array.<Node>} */\n        const children = []\n        /** @type {number} */\n        let childIndex\n        /** @type {Node} */\n        let result\n        /** @type {string} */\n        let key\n\n        if (!is(node, index, parent)) return null\n\n        // @ts-expect-error: Looks like a parent.\n        if (node.children) {\n          childIndex = -1\n\n          // @ts-expect-error Looks like a parent.\n          while (++childIndex < node.children.length) {\n            // @ts-expect-error Looks like a parent.\n            result = preorder(node.children[childIndex], childIndex, node)\n\n            if (result) {\n              children.push(result)\n            }\n          }\n\n          // @ts-expect-error Looks like a parent.\n          if (cascade && node.children.length > 0 && children.length === 0)\n            return null\n        }\n\n        // Create a shallow clone, using the new children.\n        /** @type {typeof node} */\n        // @ts-expect-error all the fields will be copied over.\n        const next = {}\n\n        for (key in node) {\n          if (own.call(node, key)) {\n            // @ts-expect-error: Looks like a record.\n            next[key] = key === 'children' ? children : node[key]\n          }\n        }\n\n        return next\n      }\n    }\n  )\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,eAAe;AAErC,IAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,MAAM;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACI,SAfSA,MAAM,CAeLC,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAC7B,IAAMC,EAAE,GAAGP,OAAO,CAACM,IAAI,IAAID,OAAO,CAAC;EACnC,IAAMG,OAAO,GACXH,OAAO,CAACG,OAAO,KAAKC,SAAS,IAAIJ,OAAO,CAACG,OAAO,KAAK,IAAI,GACrD,IAAI,GACJH,OAAO,CAACG,OAAO;EAErB,OAAOE,QAAQ,CAACN,IAAI,CAAC;;EAErB;AACN;AACA;AACA;AACA;AACA;EACM,SAASM,QAAQ,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACrC;IACA,IAAMC,QAAQ,GAAG,EAAE;IACnB;IACA,IAAIC,UAAU;IACd;IACA,IAAIC,MAAM;IACV;IACA,IAAIC,GAAG;IAEP,IAAI,CAACV,EAAE,CAACI,IAAI,EAAEC,KAAK,EAAEC,MAAM,CAAC,EAAE,OAAO,IAAI;;IAEzC;IACA,IAAIF,IAAI,CAACG,QAAQ,EAAE;MACjBC,UAAU,GAAG,CAAC,CAAC;;MAEf;MACA,OAAO,EAAEA,UAAU,GAAGJ,IAAI,CAACG,QAAQ,CAACI,MAAM,EAAE;QAC1C;QACAF,MAAM,GAAGN,QAAQ,CAACC,IAAI,CAACG,QAAQ,CAACC,UAAU,CAAC,EAAEA,UAAU,EAAEJ,IAAI,CAAC;QAE9D,IAAIK,MAAM,EAAE;UACVF,QAAQ,CAACK,IAAI,CAACH,MAAM,CAAC;QACvB;MACF;;MAEA;MACA,IAAIR,OAAO,IAAIG,IAAI,CAACG,QAAQ,CAACI,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACI,MAAM,KAAK,CAAC,EAC9D,OAAO,IAAI;IACf;;IAEA;IACA;IACA;IACA,IAAME,IAAI,GAAG,CAAC,CAAC;IAEf,KAAKH,GAAG,IAAIN,IAAI,EAAE;MAChB,IAAIV,GAAG,CAACoB,IAAI,CAACV,IAAI,EAAEM,GAAG,CAAC,EAAE;QACvB;QACAG,IAAI,CAACH,GAAG,CAAC,GAAGA,GAAG,KAAK,UAAU,GAAGH,QAAQ,GAAGH,IAAI,CAACM,GAAG,CAAC;MACvD;IACF;IAEA,OAAOG,IAAI;EACb;AACF,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}