{"ast":null,"code":"/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n * @typedef {import('../types.js').Child} Child\n */\n\nimport { isElement } from 'hast-util-is-element';\nimport { comment } from './util/comment.js';\nimport { siblingBefore, siblingAfter } from './util/siblings.js';\nimport { whitespaceStart } from './util/whitespace-start.js';\nimport { closing } from './closing.js';\nimport { omission } from './omission.js';\nexport var opening = omission({\n  html: html,\n  head: head,\n  body: body,\n  colgroup: colgroup,\n  tbody: tbody\n});\n\n/**\n * Whether to omit `<html>`.\n *\n * @type {OmitHandle}\n */\nfunction html(node) {\n  var head = siblingAfter(node, -1);\n  return !head || !comment(head);\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @type {OmitHandle}\n */\nfunction head(node) {\n  var children = node.children;\n  /** @type {Array.<string>} */\n  var seen = [];\n  var index = -1;\n  /** @type {Child} */\n  var child;\n  while (++index < children.length) {\n    child = children[index];\n    if (isElement(child, ['title', 'base'])) {\n      if (seen.includes(child.tagName)) return false;\n      seen.push(child.tagName);\n    }\n  }\n  return children.length > 0;\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @type {OmitHandle}\n */\nfunction body(node) {\n  var head = siblingAfter(node, -1, true);\n  return !head || !comment(head) && !whitespaceStart(head) && !isElement(head, ['meta', 'link', 'script', 'style', 'template']);\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @type {OmitHandle}\n */\nfunction colgroup(node, index, parent) {\n  var previous = siblingBefore(parent, index);\n  var head = siblingAfter(node, -1, true);\n\n  // Previous colgroup was already omitted.\n  if (isElement(previous, 'colgroup') && closing(previous, parent.children.indexOf(previous), parent)) {\n    return false;\n  }\n  return head && isElement(head, 'col');\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @type {OmitHandle}\n */\nfunction tbody(node, index, parent) {\n  var previous = siblingBefore(parent, index);\n  var head = siblingAfter(node, -1);\n\n  // Previous table section was already omitted.\n  if (isElement(previous, ['thead', 'tbody']) && closing(previous, parent.children.indexOf(previous), parent)) {\n    return false;\n  }\n  return head && isElement(head, 'tr');\n}","map":{"version":3,"names":["isElement","comment","siblingBefore","siblingAfter","whitespaceStart","closing","omission","opening","html","head","body","colgroup","tbody","node","children","seen","index","child","length","includes","tagName","push","parent","previous","indexOf"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/omission/opening.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n * @typedef {import('../types.js').Child} Child\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {comment} from './util/comment.js'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {whitespaceStart} from './util/whitespace-start.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @type {OmitHandle}\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || !comment(head)\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @type {OmitHandle}\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array.<string>} */\n  const seen = []\n  let index = -1\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n    if (isElement(child, ['title', 'base'])) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @type {OmitHandle}\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (!comment(head) &&\n      !whitespaceStart(head) &&\n      !isElement(head, ['meta', 'link', 'script', 'style', 'template']))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @type {OmitHandle}\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    isElement(previous, 'colgroup') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && isElement(head, 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @type {OmitHandle}\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    isElement(previous, ['thead', 'tbody']) &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && isElement(head, 'tr')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}