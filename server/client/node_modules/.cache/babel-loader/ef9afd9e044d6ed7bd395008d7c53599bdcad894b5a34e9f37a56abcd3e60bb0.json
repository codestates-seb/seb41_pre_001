{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\nexport const gfmTaskListItem = {\n  text: {\n    [codes.leftSquareBracket]: tasklistCheck\n  }\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /** @type {State} */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== codes.eof ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok);\n    }\n    return nok(code);\n  }\n}\n\n/** @type {Tokenizer} */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, after, types.whitespace);\n\n  /** @type {State} */\n  function after(code) {\n    const tail = self.events[self.events.length - 1];\n    return (\n      // We either found spaces…\n      (tail && tail[1].type === types.whitespace ||\n      // …or it was followed by a line ending, in which case, there has to be\n      // non-whitespace after that line ending, because otherwise we’d get an\n      // EOF as the content is closed with blank lines.\n      markdownLineEnding(code)) && code !== codes.eof ? ok(code) : nok(code)\n    );\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEndingOrSpace","markdownLineEnding","codes","types","tasklistCheck","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","leftSquareBracket","effects","nok","self","open","code","previous","eof","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","uppercaseX","lowercaseX","rightSquareBracket","check","spaceThenNonSpace","after","whitespace","tail","events","length","type"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\n\nexport const gfmTaskListItem = {\n  text: {[codes.leftSquareBracket]: tasklistCheck}\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n\n  return open\n\n  /** @type {State} */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== codes.eof ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(effects, after, types.whitespace)\n\n  /** @type {State} */\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === types.whitespace) ||\n        // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== codes.eof\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}