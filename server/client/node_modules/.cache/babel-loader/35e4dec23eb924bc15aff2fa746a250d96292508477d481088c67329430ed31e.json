{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  var marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === 40 ? 41 : code;\n    return atFirstTitleBreak;\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atTitleBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return title(code);\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atTitleBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? titleEscape : title;\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return title;\n    }\n    return title(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","factoryTitle","effects","ok","nok","type","markerType","stringType","marker","start","code","enter","consume","exit","atFirstTitleBreak","atTitleBreak","contentType","title","titleEscape"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-factory-title/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,QAAO,0BAA0B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAY,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,UAAU,EAAE;EAC3E;EACA,IAAIC,MAAM;EACV,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBR,OAAO,CAACS,KAAK,CAACN,IAAI,CAAC;IACnBH,OAAO,CAACS,KAAK,CAACL,UAAU,CAAC;IACzBJ,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;IACrBR,OAAO,CAACW,IAAI,CAACP,UAAU,CAAC;IACxBE,MAAM,GAAGE,IAAI,KAAK,EAAE,GAAG,EAAE,GAAGA,IAAI;IAChC,OAAOI,iBAAiB;EAC1B;EACA;;EAEA,SAASA,iBAAiB,CAACJ,IAAI,EAAE;IAC/B,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBN,OAAO,CAACS,KAAK,CAACL,UAAU,CAAC;MACzBJ,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAACP,UAAU,CAAC;MACxBJ,OAAO,CAACW,IAAI,CAACR,IAAI,CAAC;MAClB,OAAOF,EAAE;IACX;IAEAD,OAAO,CAACS,KAAK,CAACJ,UAAU,CAAC;IACzB,OAAOQ,YAAY,CAACL,IAAI,CAAC;EAC3B;EACA;;EAEA,SAASK,YAAY,CAACL,IAAI,EAAE;IAC1B,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBN,OAAO,CAACW,IAAI,CAACN,UAAU,CAAC;MACxB,OAAOO,iBAAiB,CAACN,MAAM,CAAC;IAClC;IAEA,IAAIE,IAAI,KAAK,IAAI,EAAE;MACjB,OAAON,GAAG,CAACM,IAAI,CAAC;IAClB,CAAC,CAAC;;IAEF,IAAIV,kBAAkB,CAACU,IAAI,CAAC,EAAE;MAC5BR,OAAO,CAACS,KAAK,CAAC,YAAY,CAAC;MAC3BT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAAC,YAAY,CAAC;MAC1B,OAAOd,YAAY,CAACG,OAAO,EAAEa,YAAY,EAAE,YAAY,CAAC;IAC1D;IAEAb,OAAO,CAACS,KAAK,CAAC,aAAa,EAAE;MAC3BK,WAAW,EAAE;IACf,CAAC,CAAC;IACF,OAAOC,KAAK,CAACP,IAAI,CAAC;EACpB;EACA;;EAEA,SAASO,KAAK,CAACP,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAKF,MAAM,IAAIE,IAAI,KAAK,IAAI,IAAIV,kBAAkB,CAACU,IAAI,CAAC,EAAE;MAChER,OAAO,CAACW,IAAI,CAAC,aAAa,CAAC;MAC3B,OAAOE,YAAY,CAACL,IAAI,CAAC;IAC3B;IAEAR,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;IACrB,OAAOA,IAAI,KAAK,EAAE,GAAGQ,WAAW,GAAGD,KAAK;EAC1C;EACA;;EAEA,SAASC,WAAW,CAACR,IAAI,EAAE;IACzB,IAAIA,IAAI,KAAKF,MAAM,IAAIE,IAAI,KAAK,EAAE,EAAE;MAClCR,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrB,OAAOO,KAAK;IACd;IAEA,OAAOA,KAAK,CAACP,IAAI,CAAC;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}