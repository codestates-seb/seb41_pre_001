{"ast":null,"code":"var _jsxFileName = \"/home/kty/workspace/seb41_pre_001/client/src/components/UserList.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { RowDiv, UserSpan } from '../styles/StyledStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = styled.li``;\n_c = Item;\nconst ListContainer = styled.div`\n  padding: 8px 0px;\n`;\n_c2 = ListContainer;\nexport const TITLE_TYPE_ANSWERS = 1;\nexport const TITLE_TYPE_QUESTION = 2;\nexport const TITLE_TYPE_TAGS = 3;\nconst List = styled.ul`\n  border: 1px solid #babfc4;\n  border-radius: 5px;\n`;\n_c3 = List;\nconst ListTitle = styled.p`\n  font-size: 21px;\n`;\n_c4 = ListTitle;\nconst getDummies = titleType => {\n  let dummyData;\n  if (TITLE_TYPE_TAGS === titleType) {\n    dummyData = ['reactjs', 'java', 'javascript', 'mysql', 'android', 'web', 'webpack', 'bunddler', 'mongodb', 'sql', 'html', 'css', 'spring', 'unix', 'linux', 'ubuntu', 'centos', 'windows', 'mac', 'c', 'c#', 'c++', 'assembly', 'a', 'b', 'd'];\n  }\n  if (TITLE_TYPE_QUESTION === titleType) {\n    dummyData = ['1. When you have faults, do not fear to abandon them. – Confucius', '2. They must often change who would be constant in happiness or wisdom. – Confucius', '3. Age is no guarantee of maturity. – Lawana Blackwell', '4. Youth isn’t always all it’s touted to be. – Lawana Blackwell', '5. You will face many defeats in life, but never let yourself be defeated. – Maya Angelou', '6. The greatest glory in living lies not in never falling, but in rising every time we fall. – Nelson Mandela', '7. Life is either a daring adventure or nothing at all. – Helen Keller', '8. The goal of life is living in agreement with nature. – Zeno', '9. This too shall pass. – Et hoc transibit', '10. The die is cast. – Julius caesar', '11. Only I can change me life, no one can do it for me. – Carol Burnett', '12. When in doubt, choose change. – Lily leung', '13. Life is unfair, get used to it. – Bill Gates', '14. Being happy never goes out of style. – Lilly Pulitzer', '15. All you need in this life is ignorance and confidence, then success is sure. – Mark Twain', '16. Life is a mountain. Your goal is to find your path, not to reach the top. – Maxime Lagacé', '17. Life is from the inside out. When you shift on the inside, life shifts on the outside. – Kamal Ravikant', '18. Life can only be understood backwards; but it must be lived forwards. – Søren Kierkegaard', '19. Despite the forecast, live like it’s spring. – Lilly Pulitzer', '20. The two most important days in your life are the day you are born and the day you find out why. – Mark Twain'];\n  }\n  if (TITLE_TYPE_ANSWERS === titleType) {\n    dummyData = ['I have to get this done today.', 'I have to make new plans for the New year.', 'I have to admit that Korean students are really brilliant and hard-working.', 'I don’t have to hand this in today.', 'I don’t have to protect her.', 'I don’t have to go to school tomorrow.', 'I’m gonna have to tell her how I feel.', 'I’m gonna have to wear thick clothes.', 'I’m gonna have to study for my exam this weekend.', 'You’re gonna have to leave.', 'You’re gonna have to explain.', 'You’re gonna have to do better than this.', 'Do I really have to eat that?', 'Do I really have to study English hard?', 'Do I really have to wash jeans inside out?', 'Do you have to be there?', 'Do you have to quit your job?', 'Do you have to be so rude to people all the time?', 'All you have to do is trust me.', 'All you have to do is sit tight and wait for it to arrive.', 'All you have to do is to hand this document over to him.'];\n  }\n  const result = [];\n  for (const tag of dummyData) {\n    if (Math.random() < 0.5) result.push(tag);\n    return result;\n  }\n  return result;\n};\n\n/**\n * Created by @KimTank\n * @param { titleType = -1, conts = [] }\n * @returns <ListContainer>\n */\nconst UserList = _ref => {\n  _s();\n  let {\n    titleType = -1 /* , conts = []  */\n  } = _ref;\n  const [conts, setConts] = useState([]);\n  if (titleType === -1) return false;\n  const typeValue = {};\n  switch (titleType) {\n    case TITLE_TYPE_ANSWERS:\n      typeValue.title = 'Answers';\n      typeValue.verb = 'answered';\n      typeValue.noun = 'questions';\n      break;\n    case TITLE_TYPE_QUESTION:\n      typeValue.title = 'Questions';\n      typeValue.verb = 'asked';\n      typeValue.noun = typeValue.title.toLowerCase();\n      break;\n    case TITLE_TYPE_TAGS:\n      typeValue.title = 'Tags';\n      typeValue.verb = 'participated in';\n      typeValue.noun = typeValue.title.toLowerCase();\n      break;\n    default:\n      return false;\n  }\n  return /*#__PURE__*/_jsxDEV(ListContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ListTitle, {\n      children: typeValue.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: conts.length === 0 ? /*#__PURE__*/_jsxDEV(Item, {\n        children: /*#__PURE__*/_jsxDEV(UserSpan, {\n          children: [\"You have not \", typeValue.verb, \" any \", typeValue.noun]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : conts.map((cont, index) => {\n        /*#__PURE__*/_jsxDEV(Item, {\n          children: titleType === TITLE_TYPE_TAGS ? /*#__PURE__*/_jsxDEV(RowDiv, {\n            children: cont\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(UserSpan, {\n            children: [\"| \", cont, \" |\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(UserList, \"o58zMcsevpQYZc0drrj2dKNaP2Q=\");\n_c5 = UserList;\nexport default UserList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"ListContainer\");\n$RefreshReg$(_c3, \"List\");\n$RefreshReg$(_c4, \"ListTitle\");\n$RefreshReg$(_c5, \"UserList\");","map":{"version":3,"names":["useState","styled","RowDiv","UserSpan","Item","li","ListContainer","div","TITLE_TYPE_ANSWERS","TITLE_TYPE_QUESTION","TITLE_TYPE_TAGS","List","ul","ListTitle","p","getDummies","titleType","dummyData","result","tag","Math","random","push","UserList","conts","setConts","typeValue","title","verb","noun","toLowerCase","length","map","cont","index"],"sources":["/home/kty/workspace/seb41_pre_001/client/src/components/UserList.js"],"sourcesContent":["import { useState } from 'react';\nimport styled from 'styled-components';\nimport { RowDiv, UserSpan } from '../styles/StyledStore';\n\nconst Item = styled.li``;\n\nconst ListContainer = styled.div`\n  padding: 8px 0px;\n`;\n\nexport const TITLE_TYPE_ANSWERS = 1;\nexport const TITLE_TYPE_QUESTION = 2;\nexport const TITLE_TYPE_TAGS = 3;\n\nconst List = styled.ul`\n  border: 1px solid #babfc4;\n  border-radius: 5px;\n`;\n\nconst ListTitle = styled.p`\n  font-size: 21px;\n`;\n\nconst getDummies = (titleType) => {\n  let dummyData;\n  if (TITLE_TYPE_TAGS === titleType) {\n    dummyData = [\n      'reactjs',\n      'java',\n      'javascript',\n      'mysql',\n      'android',\n      'web',\n      'webpack',\n      'bunddler',\n      'mongodb',\n      'sql',\n      'html',\n      'css',\n      'spring',\n      'unix',\n      'linux',\n      'ubuntu',\n      'centos',\n      'windows',\n      'mac',\n      'c',\n      'c#',\n      'c++',\n      'assembly',\n      'a',\n      'b',\n      'd',\n    ];\n  }\n  if (TITLE_TYPE_QUESTION === titleType) {\n    dummyData = [\n      '1. When you have faults, do not fear to abandon them. – Confucius',\n      '2. They must often change who would be constant in happiness or wisdom. – Confucius',\n      '3. Age is no guarantee of maturity. – Lawana Blackwell',\n      '4. Youth isn’t always all it’s touted to be. – Lawana Blackwell',\n      '5. You will face many defeats in life, but never let yourself be defeated. – Maya Angelou',\n      '6. The greatest glory in living lies not in never falling, but in rising every time we fall. – Nelson Mandela',\n      '7. Life is either a daring adventure or nothing at all. – Helen Keller',\n      '8. The goal of life is living in agreement with nature. – Zeno',\n      '9. This too shall pass. – Et hoc transibit',\n      '10. The die is cast. – Julius caesar',\n      '11. Only I can change me life, no one can do it for me. – Carol Burnett',\n      '12. When in doubt, choose change. – Lily leung',\n      '13. Life is unfair, get used to it. – Bill Gates',\n      '14. Being happy never goes out of style. – Lilly Pulitzer',\n      '15. All you need in this life is ignorance and confidence, then success is sure. – Mark Twain',\n      '16. Life is a mountain. Your goal is to find your path, not to reach the top. – Maxime Lagacé',\n      '17. Life is from the inside out. When you shift on the inside, life shifts on the outside. – Kamal Ravikant',\n      '18. Life can only be understood backwards; but it must be lived forwards. – Søren Kierkegaard',\n      '19. Despite the forecast, live like it’s spring. – Lilly Pulitzer',\n      '20. The two most important days in your life are the day you are born and the day you find out why. – Mark Twain',\n    ];\n  }\n  if (TITLE_TYPE_ANSWERS === titleType) {\n    dummyData = [\n      'I have to get this done today.',\n      'I have to make new plans for the New year.',\n      'I have to admit that Korean students are really brilliant and hard-working.',\n      'I don’t have to hand this in today.',\n      'I don’t have to protect her.',\n      'I don’t have to go to school tomorrow.',\n      'I’m gonna have to tell her how I feel.',\n      'I’m gonna have to wear thick clothes.',\n      'I’m gonna have to study for my exam this weekend.',\n      'You’re gonna have to leave.',\n      'You’re gonna have to explain.',\n      'You’re gonna have to do better than this.',\n      'Do I really have to eat that?',\n      'Do I really have to study English hard?',\n      'Do I really have to wash jeans inside out?',\n      'Do you have to be there?',\n      'Do you have to quit your job?',\n      'Do you have to be so rude to people all the time?',\n      'All you have to do is trust me.',\n      'All you have to do is sit tight and wait for it to arrive.',\n      'All you have to do is to hand this document over to him.',\n    ];\n  }\n  const result = [];\n  for (const tag of dummyData) {\n    if (Math.random() < 0.5) result.push(tag);\n    return result;\n  }\n\n  return result;\n};\n\n/**\n * Created by @KimTank\n * @param { titleType = -1, conts = [] }\n * @returns <ListContainer>\n */\nconst UserList = ({ titleType = -1 /* , conts = []  */ }) => {\n  const [conts, setConts] = useState([]);\n  if (titleType === -1) return false;\n\n  const typeValue = {};\n  switch (titleType) {\n    case TITLE_TYPE_ANSWERS:\n      typeValue.title = 'Answers';\n      typeValue.verb = 'answered';\n      typeValue.noun = 'questions';\n      break;\n    case TITLE_TYPE_QUESTION:\n      typeValue.title = 'Questions';\n      typeValue.verb = 'asked';\n      typeValue.noun = typeValue.title.toLowerCase();\n      break;\n    case TITLE_TYPE_TAGS:\n      typeValue.title = 'Tags';\n      typeValue.verb = 'participated in';\n      typeValue.noun = typeValue.title.toLowerCase();\n      break;\n    default:\n      return false;\n  }\n\n  return (\n    <ListContainer>\n      <ListTitle>{typeValue.title}</ListTitle>\n      <List>\n        {conts.length === 0 ? (\n          <Item>\n            <UserSpan>\n              You have not {typeValue.verb} any {typeValue.noun}\n            </UserSpan>\n          </Item>\n        ) : (\n          conts.map((cont, index) => {\n            <Item key={index}>\n              {titleType === TITLE_TYPE_TAGS ? (\n                <RowDiv>{cont}</RowDiv>\n              ) : (\n                <UserSpan>| {cont} |</UserSpan>\n              )}\n            </Item>;\n          })\n        )}\n      </List>\n    </ListContainer>\n  );\n};\n\nexport default UserList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}