{"ast":null,"code":"import { regex } from './regex.js';\nconst own = Object.hasOwnProperty;\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor() {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences;\n    this.reset();\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug(value, maintainCase) {\n    const self = this;\n    let result = slug(value, maintainCase === true);\n    const originalSlug = result;\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++;\n      result = originalSlug + '-' + self.occurrences[originalSlug];\n    }\n    self.occurrences[result] = 0;\n    return result;\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset() {\n    this.occurrences = Object.create(null);\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug(value, maintainCase) {\n  if (typeof value !== 'string') return '';\n  if (!maintainCase) value = value.toLowerCase();\n  return value.replace(regex, '').replace(/ /g, '-');\n}","map":{"version":3,"names":["regex","own","Object","hasOwnProperty","BananaSlug","constructor","occurrences","reset","slug","value","maintainCase","self","result","originalSlug","call","create","toLowerCase","replace"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/github-slugger/index.js"],"sourcesContent":["import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAElC,MAAMC,GAAG,GAAGC,MAAM,CAACC,cAAc;;AAEjC;AACA;AACA;AACA,eAAe,MAAMC,UAAU,CAAC;EAC9B;AACF;AACA;EACEC,WAAW,GAAI;IACb;IACA;IACA,IAAI,CAACC,WAAW;IAEhB,IAAI,CAACC,KAAK,EAAE;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,IAAI,CAAEC,KAAK,EAAEC,YAAY,EAAE;IACzB,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAIC,MAAM,GAAGJ,IAAI,CAACC,KAAK,EAAEC,YAAY,KAAK,IAAI,CAAC;IAC/C,MAAMG,YAAY,GAAGD,MAAM;IAE3B,OAAOX,GAAG,CAACa,IAAI,CAACH,IAAI,CAACL,WAAW,EAAEM,MAAM,CAAC,EAAE;MACzCD,IAAI,CAACL,WAAW,CAACO,YAAY,CAAC,EAAE;MAChCD,MAAM,GAAGC,YAAY,GAAG,GAAG,GAAGF,IAAI,CAACL,WAAW,CAACO,YAAY,CAAC;IAC9D;IAEAF,IAAI,CAACL,WAAW,CAACM,MAAM,CAAC,GAAG,CAAC;IAE5B,OAAOA,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;EACEL,KAAK,GAAI;IACP,IAAI,CAACD,WAAW,GAAGJ,MAAM,CAACa,MAAM,CAAC,IAAI,CAAC;EACxC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASP,IAAI,CAAEC,KAAK,EAAEC,YAAY,EAAE;EACzC,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE,OAAO,EAAE;EACxC,IAAI,CAACC,YAAY,EAAED,KAAK,GAAGA,KAAK,CAACO,WAAW,EAAE;EAC9C,OAAOP,KAAK,CAACQ,OAAO,CAACjB,KAAK,EAAE,EAAE,CAAC,CAACiB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}