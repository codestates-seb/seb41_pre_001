{"ast":null,"code":"// @ts-nocheck\nimport refractorJavascript from './javascript.js';\nactionscript.displayName = 'actionscript';\nactionscript.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function actionscript(Prism) {\n  Prism.register(refractorJavascript);\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword: /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  });\n  Prism.languages.actionscript['class-name'].alias = 'function'; // doesn't work with AS because AS is too complex\n\n  delete Prism.languages.actionscript['parameter'];\n  delete Prism.languages.actionscript['literal-property'];\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    });\n  }\n}","map":{"version":3,"names":["refractorJavascript","actionscript","displayName","aliases","Prism","register","languages","extend","keyword","operator","alias","markup","insertBefore","xml","pattern","lookbehind","inside"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/actionscript.js"],"sourcesContent":["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\nactionscript.displayName = 'actionscript'\nactionscript.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function actionscript(Prism) {\n  Prism.register(refractorJavascript)\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword:\n      /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  })\n  Prism.languages.actionscript['class-name'].alias = 'function' // doesn't work with AS because AS is too complex\n\n  delete Prism.languages.actionscript['parameter']\n  delete Prism.languages.actionscript['literal-property']\n\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern:\n          /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    })\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,mBAAmB,MAAM,iBAAiB;AACjDC,YAAY,CAACC,WAAW,GAAG,cAAc;AACzCD,YAAY,CAACE,OAAO,GAAG,EAAE;;AAEzB;AACA,eAAe,SAASF,YAAY,CAACG,KAAK,EAAE;EAC1CA,KAAK,CAACC,QAAQ,CAACL,mBAAmB,CAAC;EACnCI,KAAK,CAACE,SAAS,CAACL,YAAY,GAAGG,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,YAAY,EAAE;IAClEC,OAAO,EACL,sUAAsU;IACxUC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACFL,KAAK,CAACE,SAAS,CAACL,YAAY,CAAC,YAAY,CAAC,CAACS,KAAK,GAAG,UAAU,EAAC;;EAE9D,OAAON,KAAK,CAACE,SAAS,CAACL,YAAY,CAAC,WAAW,CAAC;EAChD,OAAOG,KAAK,CAACE,SAAS,CAACL,YAAY,CAAC,kBAAkB,CAAC;EAEvD,IAAIG,KAAK,CAACE,SAAS,CAACK,MAAM,EAAE;IAC1BP,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,cAAc,EAAE,QAAQ,EAAE;MACrDC,GAAG,EAAE;QACHC,OAAO,EACL,2EAA2E;QAC7EC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAEZ,KAAK,CAACE,SAAS,CAACK;MAC1B;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}