{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Preprocessor = require('./preprocessor');\nvar unicode = require('../common/unicode');\nvar neTree = require('./named-entity-data');\nvar ERR = require('../common/error-codes');\n\n//Aliases\nvar $ = unicode.CODE_POINTS;\nvar $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nvar C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n  0x80: 0x20ac,\n  0x82: 0x201a,\n  0x83: 0x0192,\n  0x84: 0x201e,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02c6,\n  0x89: 0x2030,\n  0x8a: 0x0160,\n  0x8b: 0x2039,\n  0x8c: 0x0152,\n  0x8e: 0x017d,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201c,\n  0x94: 0x201d,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02dc,\n  0x99: 0x2122,\n  0x9a: 0x0161,\n  0x9b: 0x203a,\n  0x9c: 0x0153,\n  0x9e: 0x017e,\n  0x9f: 0x0178\n};\n\n// Named entity tree flags\nvar HAS_DATA_FLAG = 1 << 0;\nvar DATA_DUPLET_FLAG = 1 << 1;\nvar HAS_BRANCHES_FLAG = 1 << 2;\nvar MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nvar DATA_STATE = 'DATA_STATE';\nvar RCDATA_STATE = 'RCDATA_STATE';\nvar RAWTEXT_STATE = 'RAWTEXT_STATE';\nvar SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nvar PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nvar TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nvar END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nvar TAG_NAME_STATE = 'TAG_NAME_STATE';\nvar RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nvar RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nvar RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nvar RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nvar RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nvar RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nvar SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nvar SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nvar SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nvar SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nvar BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nvar ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nvar AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nvar BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nvar ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nvar ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nvar ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nvar AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nvar SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nvar BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nvar MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nvar COMMENT_START_STATE = 'COMMENT_START_STATE';\nvar COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nvar COMMENT_STATE = 'COMMENT_STATE';\nvar COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nvar COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nvar COMMENT_END_STATE = 'COMMENT_END_STATE';\nvar COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nvar DOCTYPE_STATE = 'DOCTYPE_STATE';\nvar BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nvar DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nvar AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nvar AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nvar BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nvar DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nvar DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nvar AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nvar BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nvar AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nvar BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nvar DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nvar DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nvar AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nvar BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nvar CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nvar CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nvar CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nvar CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nvar NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nvar AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nvar NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nvar HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nvar DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nvar HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nvar DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nvar NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLowerCodePoint(cp) {\n  return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n  if (cp <= 0xffff) {\n    return String.fromCharCode(cp);\n  }\n  cp -= 0x10000;\n  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);\n}\nfunction toAsciiLowerChar(cp) {\n  return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n  var branchCount = neTree[++nodeIx];\n  var lo = ++nodeIx;\n  var hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midCp = neTree[mid];\n    if (midCp < cp) {\n      lo = mid + 1;\n    } else if (midCp > cp) {\n      hi = mid - 1;\n    } else {\n      return neTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\n\n//Tokenizer\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer() {\n    _classCallCheck(this, Tokenizer);\n    this.preprocessor = new Preprocessor();\n    this.tokenQueue = [];\n    this.allowCDATA = false;\n    this.state = DATA_STATE;\n    this.returnState = '';\n    this.charRefCode = -1;\n    this.tempBuff = [];\n    this.lastStartTagName = '';\n    this.consumedAfterSnapshot = -1;\n    this.active = false;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = null;\n  }\n\n  //Errors\n  _createClass(Tokenizer, [{\n    key: \"_err\",\n    value: function _err() {\n      // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n  }, {\n    key: \"_errOnNextCodePoint\",\n    value: function _errOnNextCodePoint(err) {\n      this._consume();\n      this._err(err);\n      this._unconsume();\n    }\n\n    //API\n  }, {\n    key: \"getNextToken\",\n    value: function getNextToken() {\n      while (!this.tokenQueue.length && this.active) {\n        this.consumedAfterSnapshot = 0;\n        var cp = this._consume();\n        if (!this._ensureHibernation()) {\n          this[this.state](cp);\n        }\n      }\n      return this.tokenQueue.shift();\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk, isLastChunk) {\n      this.active = true;\n      this.preprocessor.write(chunk, isLastChunk);\n    }\n  }, {\n    key: \"insertHtmlAtCurrentPos\",\n    value: function insertHtmlAtCurrentPos(chunk) {\n      this.active = true;\n      this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n  }, {\n    key: \"_ensureHibernation\",\n    value: function _ensureHibernation() {\n      if (this.preprocessor.endOfChunkHit) {\n        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n          this.preprocessor.retreat();\n        }\n        this.active = false;\n        this.tokenQueue.push({\n          type: Tokenizer.HIBERNATION_TOKEN\n        });\n        return true;\n      }\n      return false;\n    }\n\n    //Consumption\n  }, {\n    key: \"_consume\",\n    value: function _consume() {\n      this.consumedAfterSnapshot++;\n      return this.preprocessor.advance();\n    }\n  }, {\n    key: \"_unconsume\",\n    value: function _unconsume() {\n      this.consumedAfterSnapshot--;\n      this.preprocessor.retreat();\n    }\n  }, {\n    key: \"_reconsumeInState\",\n    value: function _reconsumeInState(state) {\n      this.state = state;\n      this._unconsume();\n    }\n  }, {\n    key: \"_consumeSequenceIfMatch\",\n    value: function _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n      var consumedCount = 0;\n      var isMatch = true;\n      var patternLength = pattern.length;\n      var patternPos = 0;\n      var cp = startCp;\n      var patternCp = void 0;\n      for (; patternPos < patternLength; patternPos++) {\n        if (patternPos > 0) {\n          cp = this._consume();\n          consumedCount++;\n        }\n        if (cp === $.EOF) {\n          isMatch = false;\n          break;\n        }\n        patternCp = pattern[patternPos];\n        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n          isMatch = false;\n          break;\n        }\n      }\n      if (!isMatch) {\n        while (consumedCount--) {\n          this._unconsume();\n        }\n      }\n      return isMatch;\n    }\n\n    //Temp buffer\n  }, {\n    key: \"_isTempBufferEqualToScriptString\",\n    value: function _isTempBufferEqualToScriptString() {\n      if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n        return false;\n      }\n      for (var i = 0; i < this.tempBuff.length; i++) {\n        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //Token creation\n  }, {\n    key: \"_createStartTagToken\",\n    value: function _createStartTagToken() {\n      this.currentToken = {\n        type: Tokenizer.START_TAG_TOKEN,\n        tagName: '',\n        selfClosing: false,\n        ackSelfClosing: false,\n        attrs: []\n      };\n    }\n  }, {\n    key: \"_createEndTagToken\",\n    value: function _createEndTagToken() {\n      this.currentToken = {\n        type: Tokenizer.END_TAG_TOKEN,\n        tagName: '',\n        selfClosing: false,\n        attrs: []\n      };\n    }\n  }, {\n    key: \"_createCommentToken\",\n    value: function _createCommentToken() {\n      this.currentToken = {\n        type: Tokenizer.COMMENT_TOKEN,\n        data: ''\n      };\n    }\n  }, {\n    key: \"_createDoctypeToken\",\n    value: function _createDoctypeToken(initialName) {\n      this.currentToken = {\n        type: Tokenizer.DOCTYPE_TOKEN,\n        name: initialName,\n        forceQuirks: false,\n        publicId: null,\n        systemId: null\n      };\n    }\n  }, {\n    key: \"_createCharacterToken\",\n    value: function _createCharacterToken(type, ch) {\n      this.currentCharacterToken = {\n        type: type,\n        chars: ch\n      };\n    }\n  }, {\n    key: \"_createEOFToken\",\n    value: function _createEOFToken() {\n      this.currentToken = {\n        type: Tokenizer.EOF_TOKEN\n      };\n    }\n\n    //Tag attributes\n  }, {\n    key: \"_createAttr\",\n    value: function _createAttr(attrNameFirstCh) {\n      this.currentAttr = {\n        name: attrNameFirstCh,\n        value: ''\n      };\n    }\n  }, {\n    key: \"_leaveAttrName\",\n    value: function _leaveAttrName(toState) {\n      if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n        this.currentToken.attrs.push(this.currentAttr);\n      } else {\n        this._err(ERR.duplicateAttribute);\n      }\n      this.state = toState;\n    }\n  }, {\n    key: \"_leaveAttrValue\",\n    value: function _leaveAttrValue(toState) {\n      this.state = toState;\n    }\n\n    //Token emission\n  }, {\n    key: \"_emitCurrentToken\",\n    value: function _emitCurrentToken() {\n      this._emitCurrentCharacterToken();\n      var ct = this.currentToken;\n      this.currentToken = null;\n\n      //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n      if (ct.type === Tokenizer.START_TAG_TOKEN) {\n        this.lastStartTagName = ct.tagName;\n      } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n        if (ct.attrs.length > 0) {\n          this._err(ERR.endTagWithAttributes);\n        }\n        if (ct.selfClosing) {\n          this._err(ERR.endTagWithTrailingSolidus);\n        }\n      }\n      this.tokenQueue.push(ct);\n    }\n  }, {\n    key: \"_emitCurrentCharacterToken\",\n    value: function _emitCurrentCharacterToken() {\n      if (this.currentCharacterToken) {\n        this.tokenQueue.push(this.currentCharacterToken);\n        this.currentCharacterToken = null;\n      }\n    }\n  }, {\n    key: \"_emitEOFToken\",\n    value: function _emitEOFToken() {\n      this._createEOFToken();\n      this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  }, {\n    key: \"_appendCharToCurrentCharacterToken\",\n    value: function _appendCharToCurrentCharacterToken(type, ch) {\n      if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n        this._emitCurrentCharacterToken();\n      }\n      if (this.currentCharacterToken) {\n        this.currentCharacterToken.chars += ch;\n      } else {\n        this._createCharacterToken(type, ch);\n      }\n    }\n  }, {\n    key: \"_emitCodePoint\",\n    value: function _emitCodePoint(cp) {\n      var type = Tokenizer.CHARACTER_TOKEN;\n      if (isWhitespace(cp)) {\n        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n      } else if (cp === $.NULL) {\n        type = Tokenizer.NULL_CHARACTER_TOKEN;\n      }\n      this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n  }, {\n    key: \"_emitSeveralCodePoints\",\n    value: function _emitSeveralCodePoints(codePoints) {\n      for (var i = 0; i < codePoints.length; i++) {\n        this._emitCodePoint(codePoints[i]);\n      }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n  }, {\n    key: \"_emitChars\",\n    value: function _emitChars(ch) {\n      this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n  }, {\n    key: \"_matchNamedCharacterReference\",\n    value: function _matchNamedCharacterReference(startCp) {\n      var result = null;\n      var excess = 1;\n      var i = findNamedEntityTreeBranch(0, startCp);\n      this.tempBuff.push(startCp);\n      while (i > -1) {\n        var current = neTree[i];\n        var inNode = current < MAX_BRANCH_MARKER_VALUE;\n        var nodeWithData = inNode && current & HAS_DATA_FLAG;\n        if (nodeWithData) {\n          //NOTE: we use greedy search, so we continue lookup at this point\n          result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n          excess = 0;\n        }\n        var cp = this._consume();\n        this.tempBuff.push(cp);\n        excess++;\n        if (cp === $.EOF) {\n          break;\n        }\n        if (inNode) {\n          i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n        } else {\n          i = cp === current ? ++i : -1;\n        }\n      }\n      while (excess--) {\n        this.tempBuff.pop();\n        this._unconsume();\n      }\n      return result;\n    }\n  }, {\n    key: \"_isCharacterReferenceInAttribute\",\n    value: function _isCharacterReferenceInAttribute() {\n      return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;\n    }\n  }, {\n    key: \"_isCharacterReferenceAttributeQuirk\",\n    value: function _isCharacterReferenceAttributeQuirk(withSemicolon) {\n      if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n        var nextCp = this._consume();\n        this._unconsume();\n        return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n      }\n      return false;\n    }\n  }, {\n    key: \"_flushCodePointsConsumedAsCharacterReference\",\n    value: function _flushCodePointsConsumedAsCharacterReference() {\n      if (this._isCharacterReferenceInAttribute()) {\n        for (var i = 0; i < this.tempBuff.length; i++) {\n          this.currentAttr.value += toChar(this.tempBuff[i]);\n        }\n      } else {\n        this._emitSeveralCodePoints(this.tempBuff);\n      }\n      this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n  }, {\n    key: DATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = TAG_OPEN_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = DATA_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitCodePoint(cp);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n  }, {\n    key: RCDATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n      if (cp === $.AMPERSAND) {\n        this.returnState = RCDATA_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = RCDATA_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n  }, {\n    key: RAWTEXT_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n  }, {\n    key: PLAINTEXT_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n      if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (cp === $.EXCLAMATION_MARK) {\n        this.state = MARKUP_DECLARATION_OPEN_STATE;\n      } else if (cp === $.SOLIDUS) {\n        this.state = END_TAG_OPEN_STATE;\n      } else if (isAsciiLetter(cp)) {\n        this._createStartTagToken();\n        this._reconsumeInState(TAG_NAME_STATE);\n      } else if (cp === $.QUESTION_MARK) {\n        this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n        this._createCommentToken();\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofBeforeTagName);\n        this._emitChars('<');\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.invalidFirstCharacterOfTagName);\n        this._emitChars('<');\n        this._reconsumeInState(DATA_STATE);\n      }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this._reconsumeInState(TAG_NAME_STATE);\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingEndTagName);\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofBeforeTagName);\n        this._emitChars('</');\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.invalidFirstCharacterOfTagName);\n        this._createCommentToken();\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n      } else if (cp === $.SOLIDUS) {\n        this.state = SELF_CLOSING_START_TAG_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this.currentToken.tagName += toChar(cp);\n      }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: RCDATA_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = RCDATA_END_TAG_OPEN_STATE;\n      } else {\n        this._emitChars('<');\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: RCDATA_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: RCDATA_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n          if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n            return;\n          }\n        }\n        this._emitChars('</');\n        this._emitSeveralCodePoints(this.tempBuff);\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: RAWTEXT_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = RAWTEXT_END_TAG_OPEN_STATE;\n      } else {\n        this._emitChars('<');\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: RAWTEXT_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: RAWTEXT_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n          if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n        this._emitChars('</');\n        this._emitSeveralCodePoints(this.tempBuff);\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n      } else if (cp === $.EXCLAMATION_MARK) {\n        this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n        this._emitChars('<!');\n      } else {\n        this._emitChars('<');\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          } else if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n        this._emitChars('</');\n        this._emitSeveralCodePoints(this.tempBuff);\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPE_START_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n        this._emitChars('-');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPE_START_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n        this._emitChars('-');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = SCRIPT_DATA_STATE;\n        this._emitChars('>');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n      } else if (isAsciiLetter(cp)) {\n        this.tempBuff = [];\n        this._emitChars('<');\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n      } else {\n        this._emitChars('<');\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n          if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n        this._emitChars('</');\n        this._emitSeveralCodePoints(this.tempBuff);\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      } else if (isAsciiUpper(cp)) {\n        this.tempBuff.push(toAsciiLowerCodePoint(cp));\n        this._emitCodePoint(cp);\n      } else if (isAsciiLower(cp)) {\n        this.tempBuff.push(cp);\n        this._emitCodePoint(cp);\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n        this._emitChars('<');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n        this._emitChars('<');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n        this._emitChars('<');\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = SCRIPT_DATA_STATE;\n        this._emitChars('>');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n        this._emitChars('/');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n      }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n        this._emitCodePoint(cp);\n      } else if (isAsciiUpper(cp)) {\n        this.tempBuff.push(toAsciiLowerCodePoint(cp));\n        this._emitCodePoint(cp);\n      } else if (isAsciiLower(cp)) {\n        this.tempBuff.push(cp);\n        this._emitCodePoint(cp);\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n      }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: BEFORE_ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.EQUALS_SIGN) {\n        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n        this._createAttr('=');\n        this.state = ATTRIBUTE_NAME_STATE;\n      } else {\n        this._createAttr('');\n        this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n      }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n        this._unconsume();\n      } else if (cp === $.EQUALS_SIGN) {\n        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n      } else if (isAsciiUpper(cp)) {\n        this.currentAttr.name += toAsciiLowerChar(cp);\n      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n        this._err(ERR.unexpectedCharacterInAttributeName);\n        this.currentAttr.name += toChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n      } else {\n        this.currentAttr.name += toChar(cp);\n      }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.SOLIDUS) {\n        this.state = SELF_CLOSING_START_TAG_STATE;\n      } else if (cp === $.EQUALS_SIGN) {\n        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this._createAttr('');\n        this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n      }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n  }, {\n    key: BEFORE_ATTRIBUTE_VALUE_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.QUOTATION_MARK) {\n        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingAttributeValue);\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else {\n        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n      }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: ATTRIBUTE_VALUE_UNQUOTED_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._leaveAttrValue(DATA_STATE);\n        this._emitCurrentToken();\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {\n        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n        this.currentAttr.value += toChar(cp);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_ATTRIBUTE_VALUE_QUOTED_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.SOLIDUS) {\n        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._leaveAttrValue(DATA_STATE);\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingWhitespaceBetweenAttributes);\n        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n      }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n  }, {\n    key: SELF_CLOSING_START_TAG_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.currentToken.selfClosing = true;\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.unexpectedSolidusInTag);\n        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n      }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n  }, {\n    key: BOGUS_COMMENT_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n      } else {\n        this.currentToken.data += toChar(cp);\n      }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n  }, {\n    key: MARKUP_DECLARATION_OPEN_STATE,\n    value: function value(cp) {\n      if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n        this._createCommentToken();\n        this.state = COMMENT_START_STATE;\n      } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n        this.state = DOCTYPE_STATE;\n      } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n        if (this.allowCDATA) {\n          this.state = CDATA_SECTION_STATE;\n        } else {\n          this._err(ERR.cdataInHtmlContent);\n          this._createCommentToken();\n          this.currentToken.data = '[CDATA[';\n          this.state = BOGUS_COMMENT_STATE;\n        }\n      }\n\n      //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n      //results are no longer valid and we will need to start over.\n      else if (!this._ensureHibernation()) {\n        this._err(ERR.incorrectlyOpenedComment);\n        this._createCommentToken();\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_START_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_START_DASH_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptClosingOfEmptyComment);\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_START_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptClosingOfEmptyComment);\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '-';\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_DASH_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.currentToken.data += '<';\n        this.state = COMMENT_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += toChar(cp);\n      }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.EXCLAMATION_MARK) {\n        this.currentToken.data += '!';\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.currentToken.data += '!';\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n      } else {\n        this._reconsumeInState(COMMENT_END_DASH_STATE);\n      }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n        this._err(ERR.nestedComment);\n      }\n      this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_END_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '-';\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_END_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EXCLAMATION_MARK) {\n        this.state = COMMENT_END_BANG_STATE;\n      } else if (cp === $.HYPHEN_MINUS) {\n        this.currentToken.data += '-';\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '--';\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n  }, {\n    key: COMMENT_END_BANG_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.currentToken.data += '--!';\n        this.state = COMMENT_END_DASH_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.incorrectlyClosedComment);\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '--!';\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this._createDoctypeToken(null);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingWhitespaceBeforeDoctypeName);\n        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n      }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: BEFORE_DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (isAsciiUpper(cp)) {\n        this._createDoctypeToken(toAsciiLowerChar(cp));\n        this.state = DOCTYPE_NAME_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n        this.state = DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeName);\n        this._createDoctypeToken(null);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this._createDoctypeToken(null);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._createDoctypeToken(toChar(cp));\n        this.state = DOCTYPE_NAME_STATE;\n      }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = AFTER_DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (isAsciiUpper(cp)) {\n        this.currentToken.name += toAsciiLowerChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.name += toChar(cp);\n      }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n      } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n      }\n      //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n      //results are no longer valid and we will need to start over.\n      else if (!this._ensureHibernation()) {\n        this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.QUOTATION_MARK) {\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.publicId += toChar(cp);\n      }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypePublicIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.publicId += toChar(cp);\n      }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n  }, {\n    key: BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.QUOTATION_MARK) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.systemId += toChar(cp);\n      }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n  }, {\n    key: DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypeSystemIdentifier);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this.currentToken.systemId += toChar(cp);\n      }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n  }, {\n    key: AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n        this.currentToken.forceQuirks = true;\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n  }, {\n    key: BOGUS_DOCTYPE_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n        this.state = DATA_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n      } else if (cp === $.EOF) {\n        this._emitCurrentToken();\n        this._emitEOFToken();\n      }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n  }, {\n    key: CDATA_SECTION_STATE,\n    value: function value(cp) {\n      if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this.state = CDATA_SECTION_BRACKET_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInCdata);\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n  }, {\n    key: CDATA_SECTION_BRACKET_STATE,\n    value: function value(cp) {\n      if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this.state = CDATA_SECTION_END_STATE;\n      } else {\n        this._emitChars(']');\n        this._reconsumeInState(CDATA_SECTION_STATE);\n      }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n  }, {\n    key: CDATA_SECTION_END_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n      } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this._emitChars(']');\n      } else {\n        this._emitChars(']]');\n        this._reconsumeInState(CDATA_SECTION_STATE);\n      }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      this.tempBuff = [$.AMPERSAND];\n      if (cp === $.NUMBER_SIGN) {\n        this.tempBuff.push(cp);\n        this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n      } else if (isAsciiAlphaNumeric(cp)) {\n        this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n      }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: NAMED_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      var matchResult = this._matchNamedCharacterReference(cp);\n\n      //NOTE: matching can be abrupted by hibernation. In that case match\n      //results are no longer valid and we will need to start over.\n      if (this._ensureHibernation()) {\n        this.tempBuff = [$.AMPERSAND];\n      } else if (matchResult) {\n        var withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n        if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n          if (!withSemicolon) {\n            this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n          }\n          this.tempBuff = matchResult;\n        }\n        this._flushCodePointsConsumedAsCharacterReference();\n        this.state = this.returnState;\n      } else {\n        this._flushCodePointsConsumedAsCharacterReference();\n        this.state = AMBIGUOUS_AMPERSAND_STATE;\n      }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n  }, {\n    key: AMBIGUOUS_AMPERSAND_STATE,\n    value: function value(cp) {\n      if (isAsciiAlphaNumeric(cp)) {\n        if (this._isCharacterReferenceInAttribute()) {\n          this.currentAttr.value += toChar(cp);\n        } else {\n          this._emitCodePoint(cp);\n        }\n      } else {\n        if (cp === $.SEMICOLON) {\n          this._err(ERR.unknownNamedCharacterReference);\n        }\n        this._reconsumeInState(this.returnState);\n      }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: NUMERIC_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      this.charRefCode = 0;\n      if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n        this.tempBuff.push(cp);\n        this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n      } else {\n        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n      }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n  }, {\n    key: HEXADEMICAL_CHARACTER_REFERENCE_START_STATE,\n    value: function value(cp) {\n      if (isAsciiHexDigit(cp)) {\n        this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n      }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n  }, {\n    key: DECIMAL_CHARACTER_REFERENCE_START_STATE,\n    value: function value(cp) {\n      if (isAsciiDigit(cp)) {\n        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n      }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: HEXADEMICAL_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      if (isAsciiUpperHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n      } else if (isAsciiLowerHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n      } else if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n      }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n  }, {\n    key: DECIMAL_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n      }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n  }, {\n    key: NUMERIC_CHARACTER_REFERENCE_END_STATE,\n    value: function value() {\n      if (this.charRefCode === $.NULL) {\n        this._err(ERR.nullCharacterReference);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (this.charRefCode > 0x10ffff) {\n        this._err(ERR.characterReferenceOutsideUnicodeRange);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (unicode.isSurrogate(this.charRefCode)) {\n        this._err(ERR.surrogateCharacterReference);\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n        this._err(ERR.noncharacterCharacterReference);\n      } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n        this._err(ERR.controlCharacterReference);\n        var replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n        if (replacement) {\n          this.charRefCode = replacement;\n        }\n      }\n      this.tempBuff = [this.charRefCode];\n      this._flushCodePointsConsumedAsCharacterReference();\n      this._reconsumeInState(this.returnState);\n    }\n  }]);\n  return Tokenizer;\n}(); //Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n  DATA: DATA_STATE,\n  RCDATA: RCDATA_STATE,\n  RAWTEXT: RAWTEXT_STATE,\n  SCRIPT_DATA: SCRIPT_DATA_STATE,\n  PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function (token, attrName) {\n  for (var i = token.attrs.length - 1; i >= 0; i--) {\n    if (token.attrs[i].name === attrName) {\n      return token.attrs[i].value;\n    }\n  }\n  return null;\n};\nmodule.exports = Tokenizer;","map":{"version":3,"names":["Preprocessor","require","unicode","neTree","ERR","$","CODE_POINTS","$$","CODE_POINT_SEQUENCES","C1_CONTROLS_REFERENCE_REPLACEMENTS","HAS_DATA_FLAG","DATA_DUPLET_FLAG","HAS_BRANCHES_FLAG","MAX_BRANCH_MARKER_VALUE","DATA_STATE","RCDATA_STATE","RAWTEXT_STATE","SCRIPT_DATA_STATE","PLAINTEXT_STATE","TAG_OPEN_STATE","END_TAG_OPEN_STATE","TAG_NAME_STATE","RCDATA_LESS_THAN_SIGN_STATE","RCDATA_END_TAG_OPEN_STATE","RCDATA_END_TAG_NAME_STATE","RAWTEXT_LESS_THAN_SIGN_STATE","RAWTEXT_END_TAG_OPEN_STATE","RAWTEXT_END_TAG_NAME_STATE","SCRIPT_DATA_LESS_THAN_SIGN_STATE","SCRIPT_DATA_END_TAG_OPEN_STATE","SCRIPT_DATA_END_TAG_NAME_STATE","SCRIPT_DATA_ESCAPE_START_STATE","SCRIPT_DATA_ESCAPE_START_DASH_STATE","SCRIPT_DATA_ESCAPED_STATE","SCRIPT_DATA_ESCAPED_DASH_STATE","SCRIPT_DATA_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE","BEFORE_ATTRIBUTE_NAME_STATE","ATTRIBUTE_NAME_STATE","AFTER_ATTRIBUTE_NAME_STATE","BEFORE_ATTRIBUTE_VALUE_STATE","ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE","ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE","ATTRIBUTE_VALUE_UNQUOTED_STATE","AFTER_ATTRIBUTE_VALUE_QUOTED_STATE","SELF_CLOSING_START_TAG_STATE","BOGUS_COMMENT_STATE","MARKUP_DECLARATION_OPEN_STATE","COMMENT_START_STATE","COMMENT_START_DASH_STATE","COMMENT_STATE","COMMENT_LESS_THAN_SIGN_STATE","COMMENT_LESS_THAN_SIGN_BANG_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE","COMMENT_END_DASH_STATE","COMMENT_END_STATE","COMMENT_END_BANG_STATE","DOCTYPE_STATE","BEFORE_DOCTYPE_NAME_STATE","DOCTYPE_NAME_STATE","AFTER_DOCTYPE_NAME_STATE","AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE","AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE","BOGUS_DOCTYPE_STATE","CDATA_SECTION_STATE","CDATA_SECTION_BRACKET_STATE","CDATA_SECTION_END_STATE","CHARACTER_REFERENCE_STATE","NAMED_CHARACTER_REFERENCE_STATE","AMBIGUOUS_AMPERSAND_STATE","NUMERIC_CHARACTER_REFERENCE_STATE","HEXADEMICAL_CHARACTER_REFERENCE_START_STATE","DECIMAL_CHARACTER_REFERENCE_START_STATE","HEXADEMICAL_CHARACTER_REFERENCE_STATE","DECIMAL_CHARACTER_REFERENCE_STATE","NUMERIC_CHARACTER_REFERENCE_END_STATE","isWhitespace","cp","SPACE","LINE_FEED","TABULATION","FORM_FEED","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLowerCodePoint","toChar","String","fromCharCode","toAsciiLowerChar","findNamedEntityTreeBranch","nodeIx","branchCount","lo","hi","mid","midCp","Tokenizer","preprocessor","tokenQueue","allowCDATA","state","returnState","charRefCode","tempBuff","lastStartTagName","consumedAfterSnapshot","active","currentCharacterToken","currentToken","currentAttr","err","_consume","_err","_unconsume","length","_ensureHibernation","shift","chunk","isLastChunk","write","insertHtmlAtCurrentPos","endOfChunkHit","retreat","push","type","HIBERNATION_TOKEN","advance","pattern","startCp","caseSensitive","consumedCount","isMatch","patternLength","patternPos","patternCp","EOF","SCRIPT_STRING","i","START_TAG_TOKEN","tagName","selfClosing","ackSelfClosing","attrs","END_TAG_TOKEN","COMMENT_TOKEN","data","initialName","DOCTYPE_TOKEN","name","forceQuirks","publicId","systemId","ch","chars","EOF_TOKEN","attrNameFirstCh","value","toState","getTokenAttr","duplicateAttribute","_emitCurrentCharacterToken","ct","endTagWithAttributes","endTagWithTrailingSolidus","_createEOFToken","_emitCurrentToken","_createCharacterToken","CHARACTER_TOKEN","WHITESPACE_CHARACTER_TOKEN","NULL","NULL_CHARACTER_TOKEN","_appendCharToCurrentCharacterToken","codePoints","_emitCodePoint","result","excess","current","inNode","nodeWithData","pop","withSemicolon","_isCharacterReferenceInAttribute","nextCp","EQUALS_SIGN","_emitSeveralCodePoints","dropParsedChunk","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","_emitEOFToken","_emitChars","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","SOLIDUS","_createStartTagToken","_reconsumeInState","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","_createCommentToken","eofBeforeTagName","invalidFirstCharacterOfTagName","_createEndTagToken","GREATER_THAN_SIGN","missingEndTagName","eofInTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","_isTempBufferEqualToScriptString","unexpectedEqualsSignBeforeAttributeName","_createAttr","_leaveAttrName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","_leaveAttrValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","_consumeSequenceIfMatch","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","_createDoctypeToken","missingWhitespaceBeforeDoctypeName","missingDoctypeName","PUBLIC_STRING","SYSTEM_STRING","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","_flushCodePointsConsumedAsCharacterReference","matchResult","_matchNamedCharacterReference","SEMICOLON","_isCharacterReferenceAttributeQuirk","_errOnNextCodePoint","missingSemicolonAfterCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","MODE","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","token","attrName","module","exports"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/parse5/lib/tokenizer/index.js"],"sourcesContent":["'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}