{"ast":null,"code":"/*\r\n * transport.js: Base Transport object for all Winston transports.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\n\nvar events = require('events'),\n  util = require('util');\n\n//\n// ### function Transport (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Tranport object responsible\n// base functionality for all winston transports.\n//\nvar Transport = exports.Transport = function (options) {\n  events.EventEmitter.call(this);\n  options = options || {};\n  this.silent = options.silent || false;\n  this.raw = options.raw || false;\n  this.name = options.name || this.name;\n  this.formatter = options.formatter;\n\n  //\n  // Do not set a default level. When `level` is falsey on any\n  // `Transport` instance, any `Logger` instance uses the\n  // configured level (instead of the Transport level)\n  //\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions || false;\n  this.exceptionsLevel = options.exceptionsLevel || 'error';\n  this.humanReadableUnhandledException = options.humanReadableUnhandledException || false;\n};\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutil.inherits(Transport, events.EventEmitter);\n\n//\n// ### function formatQuery (query)\n// #### @query {string|Object} Query to format\n// Formats the specified `query` Object (or string) to conform\n// with the underlying implementation of this transport.\n//\nTransport.prototype.formatQuery = function (query) {\n  return query;\n};\n\n//\n// ### function normalizeQuery (query)\n// #### @options {string|Object} Query to normalize\n// Normalize options for query\n//\nTransport.prototype.normalizeQuery = function (options) {\n  //\n  // Use options similar to loggly.\n  // [See Loggly Search API](http://wiki.loggly.com/retrieve_events#optional)\n  //\n\n  options = options || {};\n\n  // limit\n  options.rows = options.rows || options.limit || 10;\n\n  // starting row offset\n  options.start = options.start || 0;\n\n  // now\n  options.until = options.until || new Date();\n  if (typeof options.until !== 'object') {\n    options.until = new Date(options.until);\n  }\n\n  // now - 24\n  options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n  if (typeof options.from !== 'object') {\n    options.from = new Date(options.from);\n  }\n\n  // 'asc' or 'desc'\n  options.order = options.order || 'desc';\n\n  // which fields to select\n  options.fields = options.fields;\n  return options;\n};\n\n//\n// ### function formatResults (results, options)\n// #### @results {Object|Array} Results returned from `.query`.\n// #### @options {Object} **Optional** Formatting options\n// Formats the specified `results` with the given `options` accordinging\n// to the implementation of this transport.\n//\nTransport.prototype.formatResults = function (results, options) {\n  return results;\n};\n\n//\n// ### function logException (msg, meta, callback)\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Logs the specified `msg`, `meta` and responds to the callback once the log\n// operation is complete to ensure that the event loop will not exit before\n// all logging has completed.\n//\nTransport.prototype.logException = function (msg, meta, callback) {\n  var self = this,\n    called;\n  if (this.silent) {\n    return callback();\n  }\n  function onComplete() {\n    if (!called) {\n      called = true;\n      self.removeListener('logged', onComplete);\n      self.removeListener('error', onComplete);\n      callback();\n    }\n  }\n  this.once('logged', onComplete);\n  this.once('error', onComplete);\n  this.log(self.exceptionsLevel, msg, meta, function () {});\n};","map":{"version":3,"names":["events","require","util","Transport","exports","options","EventEmitter","call","silent","raw","name","formatter","level","handleExceptions","exceptionsLevel","humanReadableUnhandledException","inherits","prototype","formatQuery","query","normalizeQuery","rows","limit","start","until","Date","from","order","fields","formatResults","results","logException","msg","meta","callback","self","called","onComplete","removeListener","once","log"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/transports/transport.js"],"sourcesContent":["/*\r\n * transport.js: Base Transport object for all Winston transports.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\r\n\r\nvar events = require('events'),\r\n    util = require('util');\r\n\r\n//\r\n// ### function Transport (options)\r\n// #### @options {Object} Options for this instance.\r\n// Constructor function for the Tranport object responsible\r\n// base functionality for all winston transports.\r\n//\r\nvar Transport = exports.Transport = function (options) {\r\n  events.EventEmitter.call(this);\r\n\r\n  options        = options        || {};\r\n  this.silent    = options.silent || false;\r\n  this.raw       = options.raw    || false;\r\n  this.name      = options.name   || this.name;\r\n  this.formatter = options.formatter;\r\n\r\n  //\r\n  // Do not set a default level. When `level` is falsey on any\r\n  // `Transport` instance, any `Logger` instance uses the\r\n  // configured level (instead of the Transport level)\r\n  //\r\n  this.level = options.level;\r\n\r\n  this.handleExceptions = options.handleExceptions || false;\r\n  this.exceptionsLevel  = options.exceptionsLevel || 'error';\r\n  this.humanReadableUnhandledException = options.humanReadableUnhandledException || false;\r\n};\r\n\r\n//\r\n// Inherit from `events.EventEmitter`.\r\n//\r\nutil.inherits(Transport, events.EventEmitter);\r\n\r\n//\r\n// ### function formatQuery (query)\r\n// #### @query {string|Object} Query to format\r\n// Formats the specified `query` Object (or string) to conform\r\n// with the underlying implementation of this transport.\r\n//\r\nTransport.prototype.formatQuery = function (query) {\r\n  return query;\r\n};\r\n\r\n//\r\n// ### function normalizeQuery (query)\r\n// #### @options {string|Object} Query to normalize\r\n// Normalize options for query\r\n//\r\nTransport.prototype.normalizeQuery = function (options) {\r\n  //\r\n  // Use options similar to loggly.\r\n  // [See Loggly Search API](http://wiki.loggly.com/retrieve_events#optional)\r\n  //\r\n\r\n  options = options || {};\r\n\r\n  // limit\r\n  options.rows = options.rows || options.limit || 10;\r\n\r\n  // starting row offset\r\n  options.start = options.start || 0;\r\n\r\n  // now\r\n  options.until = options.until || new Date;\r\n  if (typeof options.until !== 'object') {\r\n    options.until = new Date(options.until);\r\n  }\r\n\r\n  // now - 24\r\n  options.from = options.from || (options.until - (24 * 60 * 60 * 1000));\r\n  if (typeof options.from !== 'object') {\r\n    options.from = new Date(options.from);\r\n  }\r\n\r\n\r\n  // 'asc' or 'desc'\r\n  options.order = options.order || 'desc';\r\n\r\n  // which fields to select\r\n  options.fields = options.fields;\r\n\r\n  return options;\r\n};\r\n\r\n//\r\n// ### function formatResults (results, options)\r\n// #### @results {Object|Array} Results returned from `.query`.\r\n// #### @options {Object} **Optional** Formatting options\r\n// Formats the specified `results` with the given `options` accordinging\r\n// to the implementation of this transport.\r\n//\r\nTransport.prototype.formatResults = function (results, options) {\r\n  return results;\r\n};\r\n\r\n//\r\n// ### function logException (msg, meta, callback)\r\n// #### @msg {string} Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Logs the specified `msg`, `meta` and responds to the callback once the log\r\n// operation is complete to ensure that the event loop will not exit before\r\n// all logging has completed.\r\n//\r\nTransport.prototype.logException = function (msg, meta, callback) {\r\n  var self = this,\r\n      called;\r\n\r\n  if (this.silent) {\r\n    return callback();\r\n  }\r\n\r\n  function onComplete () {\r\n    if (!called) {\r\n      called = true;\r\n      self.removeListener('logged', onComplete);\r\n      self.removeListener('error', onComplete);\r\n      callback();\r\n    }\r\n  }\r\n\r\n  this.once('logged', onComplete);\r\n  this.once('error', onComplete);\r\n  this.log(self.exceptionsLevel, msg, meta, function () { });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}