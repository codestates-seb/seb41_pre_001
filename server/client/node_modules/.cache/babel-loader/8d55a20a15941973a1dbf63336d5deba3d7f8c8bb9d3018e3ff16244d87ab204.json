{"ast":null,"code":"// @ts-nocheck\ncooklang.displayName = 'cooklang';\ncooklang.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function cooklang(Prism) {\n  ;\n  (function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source;\n    var multi_token_infix = /[^{}@#]+/.source;\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source;\n    var multi_token = multi_token_infix + multi_token_suffix;\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    };\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(/(%\\s*)/.source + timer_units + /\\b/.source),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    };\n  })(Prism);\n}","map":{"version":3,"names":["cooklang","displayName","aliases","Prism","single_token_suffix","source","multi_token_infix","multi_token_suffix","multi_token","timer_units","amount_group_impl","pattern","inside","amount","lookbehind","alias","unit","punctuation","languages","comment","greedy","meta","property","RegExp","cookware","quantity","ingredient","timer","operator","duration"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/cooklang.js"],"sourcesContent":["// @ts-nocheck\ncooklang.displayName = 'cooklang'\ncooklang.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cooklang(Prism) {\n  ;(function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source\n    var multi_token_infix = /[^{}@#]+/.source\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source\n    var multi_token = multi_token_infix + multi_token_suffix\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    }\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp(\n          '#(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp(\n          '@(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(\n                  /(%\\s*)/.source + timer_units + /\\b/.source\n                ),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    }\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}