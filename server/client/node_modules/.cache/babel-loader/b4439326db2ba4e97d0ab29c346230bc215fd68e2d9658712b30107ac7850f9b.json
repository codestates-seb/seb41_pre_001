{"ast":null,"code":"// @ts-nocheck\nodin.displayName = 'odin';\nodin.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function odin(Prism) {\n  ;\n  (function (Prism) {\n    var escapes = /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/;\n    Prism.languages.odin = {\n      /**\n       * The current implementation supports only 1 level of nesting.\n       *\n       * @author Michael Schmidt\n       * @author edukisto\n       */\n      comment: [{\n        pattern: /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n        greedy: true\n      }, {\n        pattern: /#![^\\n\\r]*/,\n        greedy: true\n      }, {\n        pattern: /\\/\\/[^\\n\\r]*/,\n        greedy: true\n      }],\n      /**\n       * Should be found before strings because of '\"'\"- and '`'`-like sequences.\n       */\n      char: {\n        pattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n        greedy: true,\n        inside: {\n          symbol: escapes\n        }\n      },\n      string: [{\n        pattern: /`[^`]*`/,\n        greedy: true\n      }, {\n        pattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n        greedy: true,\n        inside: {\n          symbol: escapes\n        }\n      }],\n      directive: {\n        pattern: /#\\w+/,\n        alias: 'property'\n      },\n      number: /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n      discard: {\n        pattern: /\\b_\\b/,\n        alias: 'keyword'\n      },\n      'procedure-definition': {\n        pattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n        alias: 'function'\n      },\n      keyword: /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n      /**\n       * false, nil, true can be used as procedure names. \"_\" and keywords can't.\n       */\n      'procedure-name': {\n        pattern: /\\b\\w+(?=[ \\t]*\\()/,\n        alias: 'function'\n      },\n      boolean: /\\b(?:false|nil|true)\\b/,\n      'constant-parameter-sign': {\n        pattern: /\\$/,\n        alias: 'important'\n      },\n      undefined: {\n        pattern: /---/,\n        alias: 'operator'\n      },\n      arrow: {\n        pattern: /->/,\n        alias: 'punctuation'\n      },\n      operator: /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n      punctuation: /[(),.:;@\\[\\]{}]/\n    };\n  })(Prism);\n}","map":{"version":3,"names":["odin","displayName","aliases","Prism","escapes","languages","comment","pattern","greedy","char","inside","symbol","string","directive","alias","number","discard","keyword","boolean","undefined","arrow","operator","punctuation"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/odin.js"],"sourcesContent":["// @ts-nocheck\nodin.displayName = 'odin'\nodin.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function odin(Prism) {\n  ;(function (Prism) {\n    var escapes =\n      /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/\n    Prism.languages.odin = {\n      /**\n       * The current implementation supports only 1 level of nesting.\n       *\n       * @author Michael Schmidt\n       * @author edukisto\n       */\n      comment: [\n        {\n          pattern:\n            /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n          greedy: true\n        },\n        {\n          pattern: /#![^\\n\\r]*/,\n          greedy: true\n        },\n        {\n          pattern: /\\/\\/[^\\n\\r]*/,\n          greedy: true\n        }\n      ],\n\n      /**\n       * Should be found before strings because of '\"'\"- and '`'`-like sequences.\n       */\n      char: {\n        pattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n        greedy: true,\n        inside: {\n          symbol: escapes\n        }\n      },\n      string: [\n        {\n          pattern: /`[^`]*`/,\n          greedy: true\n        },\n        {\n          pattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n          greedy: true,\n          inside: {\n            symbol: escapes\n          }\n        }\n      ],\n      directive: {\n        pattern: /#\\w+/,\n        alias: 'property'\n      },\n      number:\n        /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n      discard: {\n        pattern: /\\b_\\b/,\n        alias: 'keyword'\n      },\n      'procedure-definition': {\n        pattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n        alias: 'function'\n      },\n      keyword:\n        /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n\n      /**\n       * false, nil, true can be used as procedure names. \"_\" and keywords can't.\n       */\n      'procedure-name': {\n        pattern: /\\b\\w+(?=[ \\t]*\\()/,\n        alias: 'function'\n      },\n      boolean: /\\b(?:false|nil|true)\\b/,\n      'constant-parameter-sign': {\n        pattern: /\\$/,\n        alias: 'important'\n      },\n      undefined: {\n        pattern: /---/,\n        alias: 'operator'\n      },\n      arrow: {\n        pattern: /->/,\n        alias: 'punctuation'\n      },\n      operator: /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n      punctuation: /[(),.:;@\\[\\]{}]/\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;;AAEjB;AACA,eAAe,SAASF,IAAI,CAACG,KAAK,EAAE;EAClC;EAAC,CAAC,UAAUA,KAAK,EAAE;IACjB,IAAIC,OAAO,GACT,6EAA6E;IAC/ED,KAAK,CAACE,SAAS,CAACL,IAAI,GAAG;MACrB;AACN;AACA;AACA;AACA;AACA;MACMM,OAAO,EAAE,CACP;QACEC,OAAO,EACL,6EAA6E;QAC/EC,MAAM,EAAE;MACV,CAAC,EACD;QACED,OAAO,EAAE,YAAY;QACrBC,MAAM,EAAE;MACV,CAAC,EACD;QACED,OAAO,EAAE,cAAc;QACvBC,MAAM,EAAE;MACV,CAAC,CACF;MAED;AACN;AACA;MACMC,IAAI,EAAE;QACJF,OAAO,EAAE,iDAAiD;QAC1DC,MAAM,EAAE,IAAI;QACZE,MAAM,EAAE;UACNC,MAAM,EAAEP;QACV;MACF,CAAC;MACDQ,MAAM,EAAE,CACN;QACEL,OAAO,EAAE,SAAS;QAClBC,MAAM,EAAE;MACV,CAAC,EACD;QACED,OAAO,EAAE,uBAAuB;QAChCC,MAAM,EAAE,IAAI;QACZE,MAAM,EAAE;UACNC,MAAM,EAAEP;QACV;MACF,CAAC,CACF;MACDS,SAAS,EAAE;QACTN,OAAO,EAAE,MAAM;QACfO,KAAK,EAAE;MACT,CAAC;MACDC,MAAM,EACJ,oLAAoL;MACtLC,OAAO,EAAE;QACPT,OAAO,EAAE,OAAO;QAChBO,KAAK,EAAE;MACT,CAAC;MACD,sBAAsB,EAAE;QACtBP,OAAO,EAAE,kCAAkC;QAC3CO,KAAK,EAAE;MACT,CAAC;MACDG,OAAO,EACL,uPAAuP;MAEzP;AACN;AACA;MACM,gBAAgB,EAAE;QAChBV,OAAO,EAAE,mBAAmB;QAC5BO,KAAK,EAAE;MACT,CAAC;MACDI,OAAO,EAAE,wBAAwB;MACjC,yBAAyB,EAAE;QACzBX,OAAO,EAAE,IAAI;QACbO,KAAK,EAAE;MACT,CAAC;MACDK,SAAS,EAAE;QACTZ,OAAO,EAAE,KAAK;QACdO,KAAK,EAAE;MACT,CAAC;MACDM,KAAK,EAAE;QACLb,OAAO,EAAE,IAAI;QACbO,KAAK,EAAE;MACT,CAAC;MACDO,QAAQ,EAAE,wDAAwD;MAClEC,WAAW,EAAE;IACf,CAAC;EACH,CAAC,EAAEnB,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}