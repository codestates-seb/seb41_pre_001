{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utils_1 = require(\"./utils\");\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n  var l = str.length;\n  var chr = '';\n  function getStr(quote, escapeTable) {\n    var result = '';\n    pos++;\n    chr = str.charAt(pos);\n    while (pos < l) {\n      if (chr === quote) {\n        pos++;\n        return result;\n      } else if (chr === '\\\\') {\n        pos++;\n        chr = str.charAt(pos);\n        var esc = void 0;\n        if (chr === quote) {\n          result += quote;\n        } else if ((esc = escapeTable[chr]) !== undefined) {\n          result += esc;\n        } else if (utils_1.isHex(chr)) {\n          var hex = chr;\n          pos++;\n          chr = str.charAt(pos);\n          while (utils_1.isHex(chr)) {\n            hex += chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n          if (chr === ' ') {\n            pos++;\n            chr = str.charAt(pos);\n          }\n          result += String.fromCharCode(parseInt(hex, 16));\n          continue;\n        } else {\n          result += chr;\n        }\n      } else {\n        result += chr;\n      }\n      pos++;\n      chr = str.charAt(pos);\n    }\n    return result;\n  }\n  function getIdent() {\n    var result = '';\n    chr = str.charAt(pos);\n    while (pos < l) {\n      if (utils_1.isIdent(chr)) {\n        result += chr;\n      } else if (chr === '\\\\') {\n        pos++;\n        if (pos >= l) {\n          throw Error('Expected symbol but end of file reached.');\n        }\n        chr = str.charAt(pos);\n        if (utils_1.identSpecialChars[chr]) {\n          result += chr;\n        } else if (utils_1.isHex(chr)) {\n          var hex = chr;\n          pos++;\n          chr = str.charAt(pos);\n          while (utils_1.isHex(chr)) {\n            hex += chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n          if (chr === ' ') {\n            pos++;\n            chr = str.charAt(pos);\n          }\n          result += String.fromCharCode(parseInt(hex, 16));\n          continue;\n        } else {\n          result += chr;\n        }\n      } else {\n        return result;\n      }\n      pos++;\n      chr = str.charAt(pos);\n    }\n    return result;\n  }\n  function skipWhitespace() {\n    chr = str.charAt(pos);\n    var result = false;\n    while (chr === ' ' || chr === \"\\t\" || chr === \"\\n\" || chr === \"\\r\" || chr === \"\\f\") {\n      result = true;\n      pos++;\n      chr = str.charAt(pos);\n    }\n    return result;\n  }\n  function parse() {\n    var res = parseSelector();\n    if (pos < l) {\n      throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n    }\n    return res;\n  }\n  function parseSelector() {\n    var selector = parseSingleSelector();\n    if (!selector) {\n      return null;\n    }\n    var res = selector;\n    chr = str.charAt(pos);\n    while (chr === ',') {\n      pos++;\n      skipWhitespace();\n      if (res.type !== 'selectors') {\n        res = {\n          type: 'selectors',\n          selectors: [selector]\n        };\n      }\n      selector = parseSingleSelector();\n      if (!selector) {\n        throw Error('Rule expected after \",\".');\n      }\n      res.selectors.push(selector);\n    }\n    return res;\n  }\n  function parseSingleSelector() {\n    skipWhitespace();\n    var selector = {\n      type: 'ruleSet'\n    };\n    var rule = parseRule();\n    if (!rule) {\n      return null;\n    }\n    var currentRule = selector;\n    while (rule) {\n      rule.type = 'rule';\n      currentRule.rule = rule;\n      currentRule = rule;\n      skipWhitespace();\n      chr = str.charAt(pos);\n      if (pos >= l || chr === ',' || chr === ')') {\n        break;\n      }\n      if (ruleNestingOperators[chr]) {\n        var op = chr;\n        pos++;\n        skipWhitespace();\n        rule = parseRule();\n        if (!rule) {\n          throw Error('Rule expected after \"' + op + '\".');\n        }\n        rule.nestingOperator = op;\n      } else {\n        rule = parseRule();\n        if (rule) {\n          rule.nestingOperator = null;\n        }\n      }\n    }\n    return selector;\n  }\n  // @ts-ignore no-overlap\n  function parseRule() {\n    var rule = null;\n    while (pos < l) {\n      chr = str.charAt(pos);\n      if (chr === '*') {\n        pos++;\n        (rule = rule || {}).tagName = '*';\n      } else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n        (rule = rule || {}).tagName = getIdent();\n      } else if (chr === '.') {\n        pos++;\n        rule = rule || {};\n        (rule.classNames = rule.classNames || []).push(getIdent());\n      } else if (chr === '#') {\n        pos++;\n        (rule = rule || {}).id = getIdent();\n      } else if (chr === '[') {\n        pos++;\n        skipWhitespace();\n        var attr = {\n          name: getIdent()\n        };\n        skipWhitespace();\n        // @ts-ignore\n        if (chr === ']') {\n          pos++;\n        } else {\n          var operator = '';\n          if (attrEqualityMods[chr]) {\n            operator = chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n          if (pos >= l) {\n            throw Error('Expected \"=\" but end of file reached.');\n          }\n          if (chr !== '=') {\n            throw Error('Expected \"=\" but \"' + chr + '\" found.');\n          }\n          attr.operator = operator + '=';\n          pos++;\n          skipWhitespace();\n          var attrValue = '';\n          attr.valueType = 'string';\n          // @ts-ignore\n          if (chr === '\"') {\n            attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars);\n            // @ts-ignore\n          } else if (chr === '\\'') {\n            attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars);\n            // @ts-ignore\n          } else if (substitutesEnabled && chr === '$') {\n            pos++;\n            attrValue = getIdent();\n            attr.valueType = 'substitute';\n          } else {\n            while (pos < l) {\n              if (chr === ']') {\n                break;\n              }\n              attrValue += chr;\n              pos++;\n              chr = str.charAt(pos);\n            }\n            attrValue = attrValue.trim();\n          }\n          skipWhitespace();\n          if (pos >= l) {\n            throw Error('Expected \"]\" but end of file reached.');\n          }\n          if (chr !== ']') {\n            throw Error('Expected \"]\" but \"' + chr + '\" found.');\n          }\n          pos++;\n          attr.value = attrValue;\n        }\n        rule = rule || {};\n        (rule.attrs = rule.attrs || []).push(attr);\n      } else if (chr === ':') {\n        pos++;\n        var pseudoName = getIdent();\n        var pseudo = {\n          name: pseudoName\n        };\n        // @ts-ignore\n        if (chr === '(') {\n          pos++;\n          var value = '';\n          skipWhitespace();\n          if (pseudos[pseudoName] === 'selector') {\n            pseudo.valueType = 'selector';\n            value = parseSelector();\n          } else {\n            pseudo.valueType = pseudos[pseudoName] || 'string';\n            // @ts-ignore\n            if (chr === '\"') {\n              value = getStr('\"', utils_1.doubleQuotesEscapeChars);\n              // @ts-ignore\n            } else if (chr === '\\'') {\n              value = getStr('\\'', utils_1.singleQuoteEscapeChars);\n              // @ts-ignore\n            } else if (substitutesEnabled && chr === '$') {\n              pos++;\n              value = getIdent();\n              pseudo.valueType = 'substitute';\n            } else {\n              while (pos < l) {\n                if (chr === ')') {\n                  break;\n                }\n                value += chr;\n                pos++;\n                chr = str.charAt(pos);\n              }\n              value = value.trim();\n            }\n            skipWhitespace();\n          }\n          if (pos >= l) {\n            throw Error('Expected \")\" but end of file reached.');\n          }\n          if (chr !== ')') {\n            throw Error('Expected \")\" but \"' + chr + '\" found.');\n          }\n          pos++;\n          pseudo.value = value;\n        }\n        rule = rule || {};\n        (rule.pseudos = rule.pseudos || []).push(pseudo);\n      } else {\n        break;\n      }\n    }\n    return rule;\n  }\n  return parse();\n}\nexports.parseCssSelector = parseCssSelector;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils_1","require","parseCssSelector","str","pos","pseudos","attrEqualityMods","ruleNestingOperators","substitutesEnabled","l","length","chr","getStr","quote","escapeTable","result","charAt","esc","undefined","isHex","hex","String","fromCharCode","parseInt","getIdent","isIdent","Error","identSpecialChars","skipWhitespace","parse","res","parseSelector","selector","parseSingleSelector","type","selectors","push","rule","parseRule","currentRule","op","nestingOperator","tagName","isIdentStart","classNames","id","attr","name","operator","attrValue","valueType","doubleQuotesEscapeChars","singleQuoteEscapeChars","trim","attrs","pseudoName","pseudo"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/css-selector-parser/lib/parser-context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n    var l = str.length;\n    var chr = '';\n    function getStr(quote, escapeTable) {\n        var result = '';\n        pos++;\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (chr === quote) {\n                pos++;\n                return result;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                chr = str.charAt(pos);\n                var esc = void 0;\n                if (chr === quote) {\n                    result += quote;\n                }\n                else if ((esc = escapeTable[chr]) !== undefined) {\n                    result += esc;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                result += chr;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function getIdent() {\n        var result = '';\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (utils_1.isIdent(chr)) {\n                result += chr;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                if (pos >= l) {\n                    throw Error('Expected symbol but end of file reached.');\n                }\n                chr = str.charAt(pos);\n                if (utils_1.identSpecialChars[chr]) {\n                    result += chr;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                return result;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function skipWhitespace() {\n        chr = str.charAt(pos);\n        var result = false;\n        while (chr === ' ' || chr === \"\\t\" || chr === \"\\n\" || chr === \"\\r\" || chr === \"\\f\") {\n            result = true;\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function parse() {\n        var res = parseSelector();\n        if (pos < l) {\n            throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n        }\n        return res;\n    }\n    function parseSelector() {\n        var selector = parseSingleSelector();\n        if (!selector) {\n            return null;\n        }\n        var res = selector;\n        chr = str.charAt(pos);\n        while (chr === ',') {\n            pos++;\n            skipWhitespace();\n            if (res.type !== 'selectors') {\n                res = {\n                    type: 'selectors',\n                    selectors: [selector]\n                };\n            }\n            selector = parseSingleSelector();\n            if (!selector) {\n                throw Error('Rule expected after \",\".');\n            }\n            res.selectors.push(selector);\n        }\n        return res;\n    }\n    function parseSingleSelector() {\n        skipWhitespace();\n        var selector = {\n            type: 'ruleSet'\n        };\n        var rule = parseRule();\n        if (!rule) {\n            return null;\n        }\n        var currentRule = selector;\n        while (rule) {\n            rule.type = 'rule';\n            currentRule.rule = rule;\n            currentRule = rule;\n            skipWhitespace();\n            chr = str.charAt(pos);\n            if (pos >= l || chr === ',' || chr === ')') {\n                break;\n            }\n            if (ruleNestingOperators[chr]) {\n                var op = chr;\n                pos++;\n                skipWhitespace();\n                rule = parseRule();\n                if (!rule) {\n                    throw Error('Rule expected after \"' + op + '\".');\n                }\n                rule.nestingOperator = op;\n            }\n            else {\n                rule = parseRule();\n                if (rule) {\n                    rule.nestingOperator = null;\n                }\n            }\n        }\n        return selector;\n    }\n    // @ts-ignore no-overlap\n    function parseRule() {\n        var rule = null;\n        while (pos < l) {\n            chr = str.charAt(pos);\n            if (chr === '*') {\n                pos++;\n                (rule = rule || {}).tagName = '*';\n            }\n            else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n                (rule = rule || {}).tagName = getIdent();\n            }\n            else if (chr === '.') {\n                pos++;\n                rule = rule || {};\n                (rule.classNames = rule.classNames || []).push(getIdent());\n            }\n            else if (chr === '#') {\n                pos++;\n                (rule = rule || {}).id = getIdent();\n            }\n            else if (chr === '[') {\n                pos++;\n                skipWhitespace();\n                var attr = {\n                    name: getIdent()\n                };\n                skipWhitespace();\n                // @ts-ignore\n                if (chr === ']') {\n                    pos++;\n                }\n                else {\n                    var operator = '';\n                    if (attrEqualityMods[chr]) {\n                        operator = chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \"=\" but end of file reached.');\n                    }\n                    if (chr !== '=') {\n                        throw Error('Expected \"=\" but \"' + chr + '\" found.');\n                    }\n                    attr.operator = operator + '=';\n                    pos++;\n                    skipWhitespace();\n                    var attrValue = '';\n                    attr.valueType = 'string';\n                    // @ts-ignore\n                    if (chr === '\"') {\n                        attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (chr === '\\'') {\n                        attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (substitutesEnabled && chr === '$') {\n                        pos++;\n                        attrValue = getIdent();\n                        attr.valueType = 'substitute';\n                    }\n                    else {\n                        while (pos < l) {\n                            if (chr === ']') {\n                                break;\n                            }\n                            attrValue += chr;\n                            pos++;\n                            chr = str.charAt(pos);\n                        }\n                        attrValue = attrValue.trim();\n                    }\n                    skipWhitespace();\n                    if (pos >= l) {\n                        throw Error('Expected \"]\" but end of file reached.');\n                    }\n                    if (chr !== ']') {\n                        throw Error('Expected \"]\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    attr.value = attrValue;\n                }\n                rule = rule || {};\n                (rule.attrs = rule.attrs || []).push(attr);\n            }\n            else if (chr === ':') {\n                pos++;\n                var pseudoName = getIdent();\n                var pseudo = {\n                    name: pseudoName\n                };\n                // @ts-ignore\n                if (chr === '(') {\n                    pos++;\n                    var value = '';\n                    skipWhitespace();\n                    if (pseudos[pseudoName] === 'selector') {\n                        pseudo.valueType = 'selector';\n                        value = parseSelector();\n                    }\n                    else {\n                        pseudo.valueType = pseudos[pseudoName] || 'string';\n                        // @ts-ignore\n                        if (chr === '\"') {\n                            value = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (chr === '\\'') {\n                            value = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (substitutesEnabled && chr === '$') {\n                            pos++;\n                            value = getIdent();\n                            pseudo.valueType = 'substitute';\n                        }\n                        else {\n                            while (pos < l) {\n                                if (chr === ')') {\n                                    break;\n                                }\n                                value += chr;\n                                pos++;\n                                chr = str.charAt(pos);\n                            }\n                            value = value.trim();\n                        }\n                        skipWhitespace();\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \")\" but end of file reached.');\n                    }\n                    if (chr !== ')') {\n                        throw Error('Expected \")\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    pseudo.value = value;\n                }\n                rule = rule || {};\n                (rule.pseudos = rule.pseudos || []).push(pseudo);\n            }\n            else {\n                break;\n            }\n        }\n        return rule;\n    }\n    return parse();\n}\nexports.parseCssSelector = parseCssSelector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}