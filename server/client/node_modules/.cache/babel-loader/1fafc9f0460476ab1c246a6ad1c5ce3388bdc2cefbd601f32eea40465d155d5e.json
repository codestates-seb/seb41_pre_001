{"ast":null,"code":"import _toConsumableArray from \"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"onChange\"];\nimport React, { useContext, useEffect } from 'react';\nimport { EditorContext } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Textarea(props) {\n  var prefixCls = props.prefixCls,\n    _onChange = props.onChange,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useContext = useContext(EditorContext),\n    markdown = _useContext.markdown,\n    commands = _useContext.commands,\n    fullscreen = _useContext.fullscreen,\n    preview = _useContext.preview,\n    highlightEnable = _useContext.highlightEnable,\n    extraCommands = _useContext.extraCommands,\n    tabSize = _useContext.tabSize,\n    defaultTabEnable = _useContext.defaultTabEnable,\n    dispatch = _useContext.dispatch;\n  var textRef = React.useRef(null);\n  var executeRef = React.useRef();\n  var statesRef = React.useRef({\n    fullscreen: fullscreen,\n    preview: preview\n  });\n  useEffect(function () {\n    statesRef.current = {\n      fullscreen: fullscreen,\n      preview: preview,\n      highlightEnable: highlightEnable\n    };\n  }, [fullscreen, preview, highlightEnable]);\n  useEffect(function () {\n    if (textRef.current && dispatch) {\n      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator: commandOrchestrator\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var onKeyDown = function onKeyDown(e) {\n    handleKeyDown(e, tabSize, defaultTabEnable);\n    shortcuts(e, [].concat(_toConsumableArray(commands || []), _toConsumableArray(extraCommands || [])), executeRef.current, dispatch, statesRef.current);\n  };\n  useEffect(function () {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n    return function () {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsx(\"textarea\", _extends({\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    autoCapitalize: \"off\",\n    spellCheck: false\n  }, other, {\n    ref: textRef,\n    className: prefixCls + \"-text-input \" + (other.className ? other.className : ''),\n    value: markdown,\n    onChange: function onChange(e) {\n      dispatch && dispatch({\n        markdown: e.target.value\n      });\n      _onChange && _onChange(e);\n    }\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","useContext","useEffect","EditorContext","TextAreaCommandOrchestrator","handleKeyDown","shortcuts","Textarea","props","prefixCls","onChange","other","markdown","commands","fullscreen","preview","highlightEnable","extraCommands","tabSize","defaultTabEnable","dispatch","textRef","useRef","executeRef","statesRef","current","commandOrchestrator","textarea","onKeyDown","e","addEventListener","removeEventListener","_jsx","autoComplete","autoCorrect","autoCapitalize","spellCheck","ref","className","value","target"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/react-md-editor/src/components/TextArea/Textarea.tsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, ExecuteCommandState } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport './index.less';\n\nexport interface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value'>, IProps {}\n\nexport default function Textarea(props: TextAreaProps) {\n  const { prefixCls, onChange, ...other } = props;\n  const {\n    markdown,\n    commands,\n    fullscreen,\n    preview,\n    highlightEnable,\n    extraCommands,\n    tabSize,\n    defaultTabEnable,\n    dispatch,\n  } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const statesRef = React.useRef<ExecuteCommandState>({ fullscreen, preview });\n\n  useEffect(() => {\n    statesRef.current = { fullscreen, preview, highlightEnable };\n  }, [fullscreen, preview, highlightEnable]);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onKeyDown = (e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) => {\n    handleKeyDown(e, tabSize, defaultTabEnable);\n    shortcuts(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);\n  };\n  useEffect(() => {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n    return () => {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <textarea\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={false}\n      {...other}\n      ref={textRef}\n      className={`${prefixCls}-text-input ${other.className ? other.className : ''}`}\n      value={markdown}\n      onChange={(e) => {\n        dispatch && dispatch({ markdown: e.target.value });\n        onChange && onChange(e);\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}