{"ast":null,"code":"import { visit } from 'unist-util-visit';\nimport { selectAll } from 'hast-util-select';\n/** Get the node tree source code string */\nexport const getCodeString = function () {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  data.forEach(node => {\n    if (node.type === 'text') {\n      code += node.value;\n    } else if (node.type === 'element' && node.children && Array.isArray(node.children)) {\n      code += getCodeString(node.children);\n    }\n  });\n  return code;\n};\nconst remarkRewrite = options => {\n  const {\n    selector,\n    rewrite\n  } = options || {};\n  return tree => {\n    if (!rewrite || typeof rewrite !== 'function') return;\n    if (selector && typeof selector === 'string') {\n      const selected = selectAll(selector, tree);\n      if (selected && selected.length > 0) {\n        visit(tree, selected, (node, index, parent) => {\n          rewrite(node, index, parent);\n        });\n      }\n      return;\n    }\n    visit(tree, (node, index, parent) => {\n      rewrite(node, index, parent);\n    });\n  };\n};\nexport default remarkRewrite;","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,SAASC,SAAS,QAAQ,kBAAkB;AAG5C;AACA,OAAO,MAAMC,aAAa,GAAG,YAAmD;EAAA,IAAlDC,2EAAyB,EAAE;EAAA,IAAEC,2EAAe,EAAE;EAC1ED,IAAI,CAACE,OAAO,CAAEC,IAAI,IAAI;IACpB,IAAIA,IAAI,CAACC,IAAI,KAAK,MAAM,EAAE;MACxBH,IAAI,IAAIE,IAAI,CAACE,KAAK;KACnB,MAAM,IAAIF,IAAI,CAACC,IAAI,KAAK,SAAS,IAAID,IAAI,CAACG,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACL,IAAI,CAACG,QAAQ,CAAC,EAAE;MACnFL,IAAI,IAAIF,aAAa,CAACI,IAAI,CAACG,QAAQ,CAAC;;EAExC,CAAC,CAAC;EACF,OAAOL,IAAI;AACb,CAAC;AAYD,MAAMQ,aAAa,GAA2CC,OAAO,IAAI;EACvE,MAAM;IAAEC,QAAQ;IAAEC;EAAO,CAAE,GAAGF,OAAO,IAAI,EAAE;EAC3C,OAAQG,IAAI,IAAI;IACd,IAAI,CAACD,OAAO,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;IAC/C,IAAID,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC5C,MAAMG,QAAQ,GAAGhB,SAAS,CAACa,QAAQ,EAAEE,IAAI,CAAC;MAC1C,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QACnClB,KAAK,CAACgB,IAAI,EAAEC,QAA2B,EAAE,CAACX,IAAa,EAAEa,KAAK,EAAEC,MAAM,KAAI;UACxEL,OAAO,CAACT,IAAI,EAAEa,KAAK,EAAEC,MAAM,CAAC;QAC9B,CAAC,CAAC;;MAEJ;;IAGFpB,KAAK,CAACgB,IAAI,EAAE,CAACV,IAAwB,EAAEa,KAAK,EAAEC,MAAM,KAAI;MACtDL,OAAO,CAACT,IAAI,EAAEa,KAAK,EAAEC,MAAM,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,eAAeR,aAAa","names":["visit","selectAll","getCodeString","data","code","forEach","node","type","value","children","Array","isArray","remarkRewrite","options","selector","rewrite","tree","selected","length","index","parent"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-rewrite/src/index.ts"],"sourcesContent":["import { Plugin } from 'unified';\nimport { Root, Element, ElementContent, RootContent } from 'hast';\nimport { visit } from 'unist-util-visit';\nimport { selectAll } from 'hast-util-select';\nimport { Test } from 'unist-util-is';\n\n/** Get the node tree source code string */\nexport const getCodeString = (data: ElementContent[] = [], code: string = '') => {\n  data.forEach((node) => {\n    if (node.type === 'text') {\n      code += node.value;\n    } else if (node.type === 'element' && node.children && Array.isArray(node.children)) {\n      code += getCodeString(node.children);\n    }\n  });\n  return code;\n};\n\nexport type RehypeRewriteOptions = {\n  /**\n   * Select an element to be wrapped. Expects a string selector that can be passed to hast-util-select ([supported selectors](https://github.com/syntax-tree/hast-util-select/blob/master/readme.md#support)).\n   * If `selector` is not set then wrap will check for a body all elements.\n   */\n  selector?: string;\n  /** Rewrite Element. */\n  rewrite(node: Root | RootContent, index: number | null, parent: Root | Element | null): void;\n}\n\nconst remarkRewrite: Plugin<[RehypeRewriteOptions?], Root> = (options) => {\n  const { selector, rewrite } = options || {};\n  return (tree) => {\n    if (!rewrite || typeof rewrite !== 'function') return;\n    if (selector && typeof selector === 'string') {\n      const selected = selectAll(selector, tree);\n      if (selected && selected.length > 0) {\n        visit(tree, selected as unknown as Test, (node: Element, index, parent) => {\n          rewrite(node, index, parent);\n        });\n      }\n      return;\n    }\n\n    visit(tree, (node: Root | RootContent, index, parent) => {\n      rewrite(node, index, parent);\n    });\n  }\n}\n\nexport default remarkRewrite;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}