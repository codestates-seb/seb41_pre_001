{"ast":null,"code":"var events = require('events'),\n  util = require('util'),\n  common = require('../common'),\n  Transport = require('./transport').Transport;\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Memory transport object responsible\n// for persisting log messages and metadata to a memory array of messages.\n//\nvar Memory = exports.Memory = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.errorOutput = [];\n  this.writeOutput = [];\n  this.json = options.json || false;\n  this.colorize = options.colorize || false;\n  this.prettyPrint = options.prettyPrint || false;\n  this.timestamp = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.label = options.label || null;\n  this.depth = options.depth || null;\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  }\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(Memory, Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nMemory.prototype.name = 'memory';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nMemory.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n  var self = this,\n    output;\n  output = common.log({\n    colorize: this.colorize,\n    json: this.json,\n    level: level,\n    message: msg,\n    meta: meta,\n    stringify: this.stringify,\n    timestamp: this.timestamp,\n    prettyPrint: this.prettyPrint,\n    raw: this.raw,\n    label: this.label,\n    depth: this.depth,\n    formatter: this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n  if (level === 'error' || level === 'debug') {\n    this.errorOutput.push(output);\n  } else {\n    this.writeOutput.push(output);\n  }\n  self.emit('logged');\n  callback(null, true);\n};\nMemory.prototype.clearLogs = function () {\n  this.errorOutput = [];\n  this.writeOutput = [];\n};","map":{"version":3,"names":["events","require","util","common","Transport","Memory","exports","options","call","errorOutput","writeOutput","json","colorize","prettyPrint","timestamp","showLevel","undefined","label","depth","stringify","obj","JSON","inherits","prototype","name","log","level","msg","meta","callback","silent","self","output","message","raw","formatter","humanReadableUnhandledException","push","emit","clearLogs"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/transports/memory.js"],"sourcesContent":["var events = require('events'),\r\n    util = require('util'),\r\n    common = require('../common'),\r\n    Transport = require('./transport').Transport;\r\n\r\n//\r\n// ### function Memory (options)\r\n// #### @options {Object} Options for this instance.\r\n// Constructor function for the Memory transport object responsible\r\n// for persisting log messages and metadata to a memory array of messages.\r\n//\r\nvar Memory = exports.Memory = function (options) {\r\n  Transport.call(this, options);\r\n  options = options || {};\r\n\r\n  this.errorOutput = [];\r\n  this.writeOutput = [];\r\n\r\n  this.json        = options.json        || false;\r\n  this.colorize    = options.colorize    || false;\r\n  this.prettyPrint = options.prettyPrint || false;\r\n  this.timestamp   = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\r\n  this.showLevel   = options.showLevel === undefined ? true : options.showLevel;\r\n  this.label       = options.label       || null;\r\n  this.depth       = options.depth       || null;\r\n\r\n  if (this.json) {\r\n    this.stringify = options.stringify || function (obj) {\r\n      return JSON.stringify(obj, null, 2);\r\n    };\r\n  }\r\n};\r\n\r\n//\r\n// Inherit from `winston.Transport`.\r\n//\r\nutil.inherits(Memory, Transport);\r\n\r\n//\r\n// Expose the name of this Transport on the prototype\r\n//\r\nMemory.prototype.name = 'memory';\r\n\r\n//\r\n// ### function log (level, msg, [meta], callback)\r\n// #### @level {string} Level at which to log the message.\r\n// #### @msg {string} Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Core logging method exposed to Winston. Metadata is optional.\r\n//\r\nMemory.prototype.log = function (level, msg, meta, callback) {\r\n  if (this.silent) {\r\n    return callback(null, true);\r\n  }\r\n\r\n  var self = this,\r\n      output;\r\n\r\n  output = common.log({\r\n    colorize:    this.colorize,\r\n    json:        this.json,\r\n    level:       level,\r\n    message:     msg,\r\n    meta:        meta,\r\n    stringify:   this.stringify,\r\n    timestamp:   this.timestamp,\r\n    prettyPrint: this.prettyPrint,\r\n    raw:         this.raw,\r\n    label:       this.label,\r\n    depth:       this.depth,\r\n    formatter:   this.formatter,\r\n    humanReadableUnhandledException: this.humanReadableUnhandledException\r\n  });\r\n\r\n  if (level === 'error' || level === 'debug') {\r\n    this.errorOutput.push(output);\r\n  } else {\r\n    this.writeOutput.push(output);\r\n  }\r\n\r\n  self.emit('logged');\r\n  callback(null, true);\r\n};\r\n\r\nMemory.prototype.clearLogs = function () {\r\n  this.errorOutput = [];\r\n  this.writeOutput = [];\r\n};\r\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAC1BC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EACtBE,MAAM,GAAGF,OAAO,CAAC,WAAW,CAAC;EAC7BG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC,CAACG,SAAS;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGC,OAAO,CAACD,MAAM,GAAG,UAAUE,OAAO,EAAE;EAC/CH,SAAS,CAACI,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;EAC7BA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAI,CAACE,WAAW,GAAG,EAAE;EACrB,IAAI,CAACC,WAAW,GAAG,EAAE;EAErB,IAAI,CAACC,IAAI,GAAUJ,OAAO,CAACI,IAAI,IAAW,KAAK;EAC/C,IAAI,CAACC,QAAQ,GAAML,OAAO,CAACK,QAAQ,IAAO,KAAK;EAC/C,IAAI,CAACC,WAAW,GAAGN,OAAO,CAACM,WAAW,IAAI,KAAK;EAC/C,IAAI,CAACC,SAAS,GAAK,OAAOP,OAAO,CAACO,SAAS,KAAK,WAAW,GAAGP,OAAO,CAACO,SAAS,GAAG,KAAK;EACvF,IAAI,CAACC,SAAS,GAAKR,OAAO,CAACQ,SAAS,KAAKC,SAAS,GAAG,IAAI,GAAGT,OAAO,CAACQ,SAAS;EAC7E,IAAI,CAACE,KAAK,GAASV,OAAO,CAACU,KAAK,IAAU,IAAI;EAC9C,IAAI,CAACC,KAAK,GAASX,OAAO,CAACW,KAAK,IAAU,IAAI;EAE9C,IAAI,IAAI,CAACP,IAAI,EAAE;IACb,IAAI,CAACQ,SAAS,GAAGZ,OAAO,CAACY,SAAS,IAAI,UAAUC,GAAG,EAAE;MACnD,OAAOC,IAAI,CAACF,SAAS,CAACC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACAlB,IAAI,CAACoB,QAAQ,CAACjB,MAAM,EAAED,SAAS,CAAC;;AAEhC;AACA;AACA;AACAC,MAAM,CAACkB,SAAS,CAACC,IAAI,GAAG,QAAQ;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,MAAM,CAACkB,SAAS,CAACE,GAAG,GAAG,UAAUC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAC3D,IAAI,IAAI,CAACC,MAAM,EAAE;IACf,OAAOD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;EAC7B;EAEA,IAAIE,IAAI,GAAG,IAAI;IACXC,MAAM;EAEVA,MAAM,GAAG7B,MAAM,CAACsB,GAAG,CAAC;IAClBb,QAAQ,EAAK,IAAI,CAACA,QAAQ;IAC1BD,IAAI,EAAS,IAAI,CAACA,IAAI;IACtBe,KAAK,EAAQA,KAAK;IAClBO,OAAO,EAAMN,GAAG;IAChBC,IAAI,EAASA,IAAI;IACjBT,SAAS,EAAI,IAAI,CAACA,SAAS;IAC3BL,SAAS,EAAI,IAAI,CAACA,SAAS;IAC3BD,WAAW,EAAE,IAAI,CAACA,WAAW;IAC7BqB,GAAG,EAAU,IAAI,CAACA,GAAG;IACrBjB,KAAK,EAAQ,IAAI,CAACA,KAAK;IACvBC,KAAK,EAAQ,IAAI,CAACA,KAAK;IACvBiB,SAAS,EAAI,IAAI,CAACA,SAAS;IAC3BC,+BAA+B,EAAE,IAAI,CAACA;EACxC,CAAC,CAAC;EAEF,IAAIV,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,OAAO,EAAE;IAC1C,IAAI,CAACjB,WAAW,CAAC4B,IAAI,CAACL,MAAM,CAAC;EAC/B,CAAC,MAAM;IACL,IAAI,CAACtB,WAAW,CAAC2B,IAAI,CAACL,MAAM,CAAC;EAC/B;EAEAD,IAAI,CAACO,IAAI,CAAC,QAAQ,CAAC;EACnBT,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;AACtB,CAAC;AAEDxB,MAAM,CAACkB,SAAS,CAACgB,SAAS,GAAG,YAAY;EACvC,IAAI,CAAC9B,WAAW,GAAG,EAAE;EACrB,IAAI,CAACC,WAAW,GAAG,EAAE;AACvB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}