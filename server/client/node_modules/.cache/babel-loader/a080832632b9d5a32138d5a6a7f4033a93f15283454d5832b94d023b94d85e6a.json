{"ast":null,"code":"import { getTOKEN } from './tokenHelper';\n\n/**\n * https://junglast.com/blog/http-ajax-withcredential\n * defaultValue: false\n * - 쿠키를 첨부해서 보내는 요청\n * - 헤더에 Authoriztion항목이 있는 요청\n * true\n * @returns withCredentials\n */\nexport const pushDefaultConfig = () => {\n  return {\n    withCredentials: true\n  };\n};\n\n/**\n * 토큰값이 필요할때\n * @returns withCredentials, Authorization\n */\nexport const pushDefaultWithToken = () => {\n  const config = pushDefaultConfig();\n  config.headers = {\n    Authorization: getTOKEN()\n  };\n  return config;\n};\n\n// /**\n//  * 추가로 axios config에 넣을값이 있을 때\n//  * @param {*} key 추가할 key\n//  * @param {*} value 추가할 value\n//  * @param {*} isDefualt withCredentials설정\n//  * @param {*} targetConfig 기존에 있는것에 추가할때\n//  * @returns\n//  */\n// export const pushValueInConfig = (key, value, isDefualt, targetConfig) => {\n//   const defaultConfig = pushDefaultConfig();\n\n//   if (targetConfig) {\n//     if (!targetConfig[key]) {\n//       targetConfig[key] = value;\n//       if (isDefualt && !targetConfig.withCredentials) {\n//         return { ...targetConfig, defaultConfig };\n//       }\n//       return targetConfig;\n//     }\n//   }\n\n//   targetConfig = { key: value };\n//   if (isDefualt) {\n//     targetConfig = { ...targetConfig, defaultConfig };\n//   }\n//   return targetConfig;\n// };","map":{"version":3,"names":["getTOKEN","pushDefaultConfig","withCredentials","pushDefaultWithToken","config","headers","Authorization"],"sources":["/home/kty/workspace/seb41_pre_001/client/src/util/axiosHelper.js"],"sourcesContent":["import { getTOKEN } from './tokenHelper';\n\n/**\n * https://junglast.com/blog/http-ajax-withcredential\n * defaultValue: false\n * - 쿠키를 첨부해서 보내는 요청\n * - 헤더에 Authoriztion항목이 있는 요청\n * true\n * @returns withCredentials\n */\nexport const pushDefaultConfig = () => {\n  return { withCredentials: true };\n};\n\n/**\n * 토큰값이 필요할때\n * @returns withCredentials, Authorization\n */\nexport const pushDefaultWithToken = () => {\n  const config = pushDefaultConfig();\n  config.headers = { Authorization: getTOKEN() };\n  return config;\n};\n\n// /**\n//  * 추가로 axios config에 넣을값이 있을 때\n//  * @param {*} key 추가할 key\n//  * @param {*} value 추가할 value\n//  * @param {*} isDefualt withCredentials설정\n//  * @param {*} targetConfig 기존에 있는것에 추가할때\n//  * @returns\n//  */\n// export const pushValueInConfig = (key, value, isDefualt, targetConfig) => {\n//   const defaultConfig = pushDefaultConfig();\n\n//   if (targetConfig) {\n//     if (!targetConfig[key]) {\n//       targetConfig[key] = value;\n//       if (isDefualt && !targetConfig.withCredentials) {\n//         return { ...targetConfig, defaultConfig };\n//       }\n//       return targetConfig;\n//     }\n//   }\n\n//   targetConfig = { key: value };\n//   if (isDefualt) {\n//     targetConfig = { ...targetConfig, defaultConfig };\n//   }\n//   return targetConfig;\n// };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO;IAAEC,eAAe,EAAE;EAAK,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;EACxC,MAAMC,MAAM,GAAGH,iBAAiB,EAAE;EAClCG,MAAM,CAACC,OAAO,GAAG;IAAEC,aAAa,EAAEN,QAAQ;EAAG,CAAC;EAC9C,OAAOI,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}