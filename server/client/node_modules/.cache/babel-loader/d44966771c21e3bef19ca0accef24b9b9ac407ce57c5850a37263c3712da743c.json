{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\n\nexport var document = {\n  tokenize: initializeDocument\n};\n/** @type {Construct} */\n\nvar containerConstruct = {\n  tokenize: tokenizeContainer\n};\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  var self = this;\n  /** @type {Array<StackItem>} */\n\n  var stack = [];\n  var continued = 0;\n  /** @type {TokenizeContext|undefined} */\n\n  var childFlow;\n  /** @type {Token|undefined} */\n\n  var childToken;\n  /** @type {number} */\n\n  var lineStartOffset;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      var item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    } // Done.\n\n    return checkNewContainers(code);\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++; // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {Point|undefined} */\n\n      var point; // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued); // Fix positions.\n\n      var index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    } // Check if there is a new container.\n\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]); // Try another.\n\n    return documentContinued(code);\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.\n\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    var stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream); // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      var index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean|undefined} */\n\n      var seen;\n      /** @type {Point|undefined} */\n\n      var point; // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued); // Fix positions.\n\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits)); // Discard the duplicate exits.\n\n      self.events.length = index;\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    var index = stack.length; // Exit open containers.\n\n    while (index-- > size) {\n      var entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","splice","document","tokenize","initializeDocument","containerConstruct","tokenizeContainer","effects","self","stack","continued","childFlow","childToken","lineStartOffset","start","code","length","item","containerState","attempt","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","indexBeforeFlow","point","type","end","exitContainers","index","Object","assign","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","thereIsANewContainer","thereIsNoNewContainer","parser","lazy","now","line","offset","containerContinue","push","consume","flow","enter","contentType","previous","_tokenizer","flowContinue","writeToChild","exit","token","eof","stream","sliceStream","next","defineSkip","write","seen","size","entry","call","ok","nok","constructs","disable","null","includes"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark/lib/initialize/document.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}