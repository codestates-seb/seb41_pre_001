{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n\n/** @type {Construct} */\nexport var autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  var size = 1;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return asciiAtext(code) ? emailAtext(code) : nok(code);\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      return urlInside;\n    }\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      return end(code);\n    }\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      return end(code);\n    }\n    return emailValue(code);\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code);\n      return code === 45 ? emailValue : emailLabel;\n    }\n    return nok(code);\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.exit('autolink');\n    return ok;\n  }\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","autolink","name","tokenize","tokenizeAutolink","effects","ok","nok","size","start","code","enter","consume","exit","open","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","end","emailAtSignOrDot","emailLabel","type","emailValue"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-core-commonmark/lib/autolink.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}