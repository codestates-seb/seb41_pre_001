{"ast":null,"code":"import copyTextToClipboard from '@uiw/copy-to-clipboard';\nimport { useCallback, useEffect } from 'react';\nexport function useCopied(container) {\n  var handle = useCallback(function (event) {\n    var target = event.currentTarget || event.target;\n    target.classList.add('active');\n    copyTextToClipboard(target.dataset.code, function () {\n      setTimeout(function () {\n        target.classList.remove('active');\n      }, 2000);\n    });\n  }, []);\n  useEffect(function () {\n    var _container$current;\n    var btns = (_container$current = container.current) == null ? void 0 : _container$current.querySelectorAll('pre code + div.copied');\n    btns && Array.from(btns).forEach(function (elm) {\n      return elm.addEventListener('click', handle, false);\n    });\n    return function () {\n      btns && Array.from(btns).forEach(function (elm) {\n        return elm.removeEventListener('click', handle, false);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container]);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,mBAAmB,MAAM,wBAAwB;AACxD,SAASC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAE9C,OAAO,SAASC,SAAS,CAACC,SAA0C,EAAE;EACpE,IAAMC,MAAM,GAAGJ,WAAW,CAAEK,eAAY,EAAK;IAC3C,IAAMC,MAAM,GAAID,KAAK,CAACE,aAAa,IAAIF,KAAK,CAACC,MAAyB;IACtEA,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;IAC9BV,mBAAmB,CAACO,MAAM,CAACI,OAAO,CAACC,IAAI,EAAY,YAAY;MAC7DC,UAAU,CAAC,YAAM;QACfN,MAAM,CAACE,SAAS,CAACK,MAAM,CAAC,QAAQ,CAAC;MACnC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACNZ,SAAS,CAAC,YAAM;IAAA;IACd,IAAMa,IAAI,yBAAGX,SAAS,CAACY,OAAO,qBAAjBC,mBAAmBC,gBAAgB,CAAC,uBAAuB,CAAC;IACzEH,IAAI,IAAII,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAAEC,aAAG;MAAA,OAAKA,GAAG,CAACC,gBAAgB,CAAC,OAAO,EAAElB,MAAM,EAAE,KAAK,CAAC;IAAA,EAAC;IACvF,OAAO,YAAM;MACXU,IAAI,IAAII,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAAEC,aAAG;QAAA,OAAKA,GAAG,CAACE,mBAAmB,CAAC,OAAO,EAAEnB,MAAM,EAAE,KAAK,CAAC;MAAA,EAAC;IAC5F,CAAC;IACD;EACF,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC;AACjB","names":["copyTextToClipboard","useCallback","useEffect","useCopied","container","handle","event","target","currentTarget","classList","add","dataset","code","setTimeout","remove","btns","current","_container$current","querySelectorAll","Array","from","forEach","elm","addEventListener","removeEventListener"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/react-markdown-preview/src/plugins/useCopied.tsx"],"sourcesContent":["import copyTextToClipboard from '@uiw/copy-to-clipboard';\nimport { useCallback, useEffect } from 'react';\n\nexport function useCopied(container: React.RefObject<HTMLDivElement>) {\n  const handle = useCallback((event: Event) => {\n    const target = (event.currentTarget || event.target) as HTMLDivElement;\n    target.classList.add('active');\n    copyTextToClipboard(target.dataset.code as string, function () {\n      setTimeout(() => {\n        target.classList.remove('active');\n      }, 2000);\n    });\n  }, []);\n  useEffect(() => {\n    const btns = container.current?.querySelectorAll('pre code + div.copied');\n    btns && Array.from(btns).forEach((elm) => elm.addEventListener('click', handle, false));\n    return () => {\n      btns && Array.from(btns).forEach((elm) => elm.removeEventListener('click', handle, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}