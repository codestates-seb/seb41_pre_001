{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Mixin = /*#__PURE__*/function () {\n  function Mixin(host) {\n    _classCallCheck(this, Mixin);\n    var originalMethods = {};\n    var overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n    for (var _i = 0, _Object$keys = Object.keys(overriddenMethods); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      if (typeof overriddenMethods[key] === 'function') {\n        originalMethods[key] = host[key];\n        host[key] = overriddenMethods[key];\n      }\n    }\n  }\n  _createClass(Mixin, [{\n    key: \"_getOverriddenMethods\",\n    value: function _getOverriddenMethods() {\n      throw new Error('Not implemented');\n    }\n  }]);\n  return Mixin;\n}();\nMixin.install = function (host, Ctor, opts) {\n  if (!host.__mixins) {\n    host.__mixins = [];\n  }\n  for (var i = 0; i < host.__mixins.length; i++) {\n    if (host.__mixins[i].constructor === Ctor) {\n      return host.__mixins[i];\n    }\n  }\n  var mixin = new Ctor(host, opts);\n  host.__mixins.push(mixin);\n  return mixin;\n};\nmodule.exports = Mixin;","map":{"version":3,"names":["Mixin","host","originalMethods","overriddenMethods","_getOverriddenMethods","Object","keys","key","Error","install","Ctor","opts","__mixins","i","length","constructor","mixin","push","module","exports"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/parse5/lib/utils/mixin.js"],"sourcesContent":["'use strict';\n\nclass Mixin {\n    constructor(host) {\n        const originalMethods = {};\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n\n        for (const key of Object.keys(overriddenMethods)) {\n            if (typeof overriddenMethods[key] === 'function') {\n                originalMethods[key] = host[key];\n                host[key] = overriddenMethods[key];\n            }\n        }\n    }\n\n    _getOverriddenMethods() {\n        throw new Error('Not implemented');\n    }\n}\n\nMixin.install = function(host, Ctor, opts) {\n    if (!host.__mixins) {\n        host.__mixins = [];\n    }\n\n    for (let i = 0; i < host.__mixins.length; i++) {\n        if (host.__mixins[i].constructor === Ctor) {\n            return host.__mixins[i];\n        }\n    }\n\n    const mixin = new Ctor(host, opts);\n\n    host.__mixins.push(mixin);\n\n    return mixin;\n};\n\nmodule.exports = Mixin;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA,IAEPA,KAAK;EACP,eAAYC,IAAI,EAAE;IAAA;IACd,IAAMC,eAAe,GAAG,CAAC,CAAC;IAC1B,IAAMC,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAAC,IAAI,EAAEF,eAAe,CAAC;IAE3E,gCAAkBG,MAAM,CAACC,IAAI,CAACH,iBAAiB,CAAC,kCAAE;MAA7C,IAAMI,GAAG;MACV,IAAI,OAAOJ,iBAAiB,CAACI,GAAG,CAAC,KAAK,UAAU,EAAE;QAC9CL,eAAe,CAACK,GAAG,CAAC,GAAGN,IAAI,CAACM,GAAG,CAAC;QAChCN,IAAI,CAACM,GAAG,CAAC,GAAGJ,iBAAiB,CAACI,GAAG,CAAC;MACtC;IACJ;EACJ;EAAC;IAAA;IAAA,OAED,iCAAwB;MACpB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACtC;EAAC;EAAA;AAAA;AAGLR,KAAK,CAACS,OAAO,GAAG,UAASR,IAAI,EAAES,IAAI,EAAEC,IAAI,EAAE;EACvC,IAAI,CAACV,IAAI,CAACW,QAAQ,EAAE;IAChBX,IAAI,CAACW,QAAQ,GAAG,EAAE;EACtB;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACW,QAAQ,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIZ,IAAI,CAACW,QAAQ,CAACC,CAAC,CAAC,CAACE,WAAW,KAAKL,IAAI,EAAE;MACvC,OAAOT,IAAI,CAACW,QAAQ,CAACC,CAAC,CAAC;IAC3B;EACJ;EAEA,IAAMG,KAAK,GAAG,IAAIN,IAAI,CAACT,IAAI,EAAEU,IAAI,CAAC;EAElCV,IAAI,CAACW,QAAQ,CAACK,IAAI,CAACD,KAAK,CAAC;EAEzB,OAAOA,KAAK;AAChB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGnB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}