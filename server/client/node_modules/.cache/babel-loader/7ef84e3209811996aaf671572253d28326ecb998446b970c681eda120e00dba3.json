{"ast":null,"code":"/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n  for (let str of string.split(\",\").map(str => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/)) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n  return res;\n}\nexports.default = parsePart;\nmodule.exports = parsePart;","map":{"version":3,"names":["parsePart","string","res","m","str","split","map","trim","test","push","parseInt","match","_","lhs","sep","rhs","incr","i","exports","default","module"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/parse-numeric-range/index.js"],"sourcesContent":["/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,CAACC,MAAM,EAAE;EACzB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,CAAC;EAEL,KAAK,IAAIC,GAAG,IAAIH,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEF,GAAG,IAAKA,GAAG,CAACG,IAAI,EAAE,CAAC,EAAE;IAC1D;IACA,IAAI,SAAS,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;MACvBF,GAAG,CAACO,IAAI,CAACC,QAAQ,CAACN,GAAG,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC,MAAM,IACJD,CAAC,GAAGC,GAAG,CAACO,KAAK,CAAC,kDAAkD,CAAC,EAClE;MACA;MACA,IAAI,CAACC,CAAC,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGZ,CAAC;MAE1B,IAAIU,GAAG,IAAIE,GAAG,EAAE;QACdF,GAAG,GAAGH,QAAQ,CAACG,GAAG,CAAC;QACnBE,GAAG,GAAGL,QAAQ,CAACK,GAAG,CAAC;QACnB,MAAMC,IAAI,GAAGH,GAAG,GAAGE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;QAE/B;QACA,IAAID,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,QAAQ,EAAEC,GAAG,IAAIC,IAAI;QAEhE,KAAK,IAAIC,CAAC,GAAGJ,GAAG,EAAEI,CAAC,KAAKF,GAAG,EAAEE,CAAC,IAAID,IAAI,EAAEd,GAAG,CAACO,IAAI,CAACQ,CAAC,CAAC;MACrD;IACF;EACF;EAEA,OAAOf,GAAG;AACZ;AAEAgB,OAAO,CAACC,OAAO,GAAGnB,SAAS;AAC3BoB,MAAM,CAACF,OAAO,GAAGlB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}