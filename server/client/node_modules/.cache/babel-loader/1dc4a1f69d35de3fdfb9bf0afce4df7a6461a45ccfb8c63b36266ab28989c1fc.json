{"ast":null,"code":"var _slicedToArray = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  var res = [];\n  var m;\n  var _iterator = _createForOfIteratorHelper(string.split(\",\").map(function (str) {\n      return str.trim();\n    })),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var str = _step.value;\n      // just a number\n      if (/^-?\\d+$/.test(str)) {\n        res.push(parseInt(str, 10));\n      } else if (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/)) {\n        // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n        var _m = m,\n          _m2 = _slicedToArray(_m, 4),\n          _ = _m2[0],\n          lhs = _m2[1],\n          sep = _m2[2],\n          rhs = _m2[3];\n        if (lhs && rhs) {\n          lhs = parseInt(lhs);\n          rhs = parseInt(rhs);\n          var incr = lhs < rhs ? 1 : -1;\n\n          // Make it inclusive by moving the right 'stop-point' away by one.\n          if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n          for (var i = lhs; i !== rhs; i += incr) res.push(i);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return res;\n}\nexports.default = parsePart;\nmodule.exports = parsePart;","map":{"version":3,"names":["parsePart","string","res","m","split","map","str","trim","test","push","parseInt","match","_","lhs","sep","rhs","incr","i","exports","default","module"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/parse-numeric-range/index.js"],"sourcesContent":["/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,CAACC,MAAM,EAAE;EACzB,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,CAAC;EAAC,2CAEUF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,EAAE;IAAA,EAAC;IAAA;EAAA;IAA1D,oDAA4D;MAAA,IAAnDD,GAAG;MACV;MACA,IAAI,SAAS,CAACE,IAAI,CAACF,GAAG,CAAC,EAAE;QACvBJ,GAAG,CAACO,IAAI,CAACC,QAAQ,CAACJ,GAAG,EAAE,EAAE,CAAC,CAAC;MAC7B,CAAC,MAAM,IACJH,CAAC,GAAGG,GAAG,CAACK,KAAK,CAAC,kDAAkD,CAAC,EAClE;QACA;QACA,SAAyBR,CAAC;UAAA;UAArBS,CAAC;UAAEC,GAAG;UAAEC,GAAG;UAAEC,GAAG;QAErB,IAAIF,GAAG,IAAIE,GAAG,EAAE;UACdF,GAAG,GAAGH,QAAQ,CAACG,GAAG,CAAC;UACnBE,GAAG,GAAGL,QAAQ,CAACK,GAAG,CAAC;UACnB,IAAMC,IAAI,GAAGH,GAAG,GAAGE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;UAE/B;UACA,IAAID,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,QAAQ,EAAEC,GAAG,IAAIC,IAAI;UAEhE,KAAK,IAAIC,CAAC,GAAGJ,GAAG,EAAEI,CAAC,KAAKF,GAAG,EAAEE,CAAC,IAAID,IAAI,EAAEd,GAAG,CAACO,IAAI,CAACQ,CAAC,CAAC;QACrD;MACF;IACF;EAAC;IAAA;EAAA;IAAA;EAAA;EAED,OAAOf,GAAG;AACZ;AAEAgB,OAAO,CAACC,OAAO,GAAGnB,SAAS;AAC3BoB,MAAM,CAACF,OAAO,GAAGlB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}