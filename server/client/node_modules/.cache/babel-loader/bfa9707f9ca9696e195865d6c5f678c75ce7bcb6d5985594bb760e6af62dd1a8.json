{"ast":null,"code":"/**\n * @typedef {import('../../types.js').Node} Node\n * @typedef {import('../../types.js').Text} Text\n */\n\nimport { convert } from 'unist-util-is';\nimport { whitespace } from 'hast-util-whitespace';\n\n/** @type {import('unist-util-is').AssertPredicate<Text>} */\n// @ts-ignore\nconst isText = convert('text');\n\n/**\n * Check if `node` starts with whitespace.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nexport function whitespaceStart(node) {\n  return isText(node) && whitespace(node.value.charAt(0));\n}","map":{"version":3,"names":["convert","whitespace","isText","whitespaceStart","node","value","charAt"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js"],"sourcesContent":["/**\n * @typedef {import('../../types.js').Node} Node\n * @typedef {import('../../types.js').Text} Text\n */\n\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\n\n/** @type {import('unist-util-is').AssertPredicate<Text>} */\n// @ts-ignore\nconst isText = convert('text')\n\n/**\n * Check if `node` starts with whitespace.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nexport function whitespaceStart(node) {\n  return isText(node) && whitespace(node.value.charAt(0))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,eAAe;AACrC,SAAQC,UAAU,QAAO,sBAAsB;;AAE/C;AACA;AACA,MAAMC,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAe,CAACC,IAAI,EAAE;EACpC,OAAOF,MAAM,CAACE,IAAI,CAAC,IAAIH,UAAU,CAACG,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}