{"ast":null,"code":"import { visit } from 'unist-util-visit';\nvar rehypeIgnore = function rehypeIgnore() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$openDelimite = options.openDelimiter,\n    openDelimiter = _options$openDelimite === void 0 ? 'rehype:ignore:start' : _options$openDelimite,\n    _options$closeDelimit = options.closeDelimiter,\n    closeDelimiter = _options$closeDelimit === void 0 ? 'rehype:ignore:end' : _options$closeDelimit;\n  return function (tree) {\n    visit(tree, function (node, index, parent) {\n      if (node.type === 'element' || node.type === 'root') {\n        // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);\n        // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);\n        // if (start > -1 && end > -1) {\n        //   node.children = node.children.filter((_, idx) => idx < start || idx > end);\n        // }\n        var start = false;\n        node.children = node.children.filter(function (item) {\n          if (item.type === 'raw' || item.type === 'comment') {\n            var _item$value;\n            var str = (_item$value = item.value) === null || _item$value === void 0 ? void 0 : _item$value.trim();\n            str = str.replace(/^<!--(.*?)-->/, '$1');\n            if (str === openDelimiter) {\n              start = true;\n              return false;\n            }\n            if (str === closeDelimiter) {\n              start = false;\n              return false;\n            }\n          }\n          return !start;\n        });\n      }\n    });\n  };\n};\nexport default rehypeIgnore;","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,kBAAkB;AAaxC,IAAMC,YAAY,GAAyC,SAArDA,YAAY,GAA0D;EAAA,IAAhBC,OAAO,uEAAG,EAAE;EACtE,4BAAwFA,OAAO,CAAvFC,aAAa;IAAbA,aAAa,sCAAG,qBAAqB;IAAA,wBAA2CD,OAAO,CAAhDE,cAAc;IAAdA,cAAc,sCAAG,mBAAmB;EACnF,OAAO,UAACC,IAAI,EAAI;IACdL,KAAK,CAACK,IAAI,EAAE,UAACC,IAAwB,EAAEC,KAAK,EAAEC,MAAM,EAAI;MACtD,IAAIF,IAAI,CAACG,IAAI,KAAK,SAAS,IAAIH,IAAI,CAACG,IAAI,KAAK,MAAM,EAAE;QACnD;QACA;QACA;QACA;QACA;QACA,IAAIC,KAAK,GAAG,KAAK;QACjBJ,IAAI,CAACK,QAAQ,GAAGL,IAAI,CAACK,QAAQ,CAACC,MAAM,CAAC,UAACC,IAAI,EAAI;UAC5C,IAAIA,IAAI,CAACJ,IAAI,KAAK,KAAK,IAAII,IAAI,CAACJ,IAAI,KAAK,SAAS,EAAE;YAAA;YAClD,IAAIK,GAAG,kBAAID,IAAI,CAACE,KAAK,gDAAV,YAAYC,IAAI,EAAE;YAC7BF,GAAG,GAAGA,GAAG,CAACG,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;YACxC,IAAIH,GAAG,KAAKX,aAAa,EAAE;cACvBO,KAAK,GAAG,IAAI;cACZ,OAAO,KAAK;;YAEhB,IAAII,GAAG,KAAKV,cAAc,EAAE;cACxBM,KAAK,GAAG,KAAK;cACb,OAAO,KAAK;;;UAIlB,OAAO,CAACA,KAAK;QACf,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,eAAeT,YAAY","names":["visit","rehypeIgnore","options","openDelimiter","closeDelimiter","tree","node","index","parent","type","start","children","filter","item","str","value","trim","replace"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-ignore/src/index.ts"],"sourcesContent":["import { Plugin } from 'unified';\nimport { Root, RootContent } from 'hast';\nimport { visit } from 'unist-util-visit';\n\nexport type RehypeIgnoreOptions = {\n  /**\n   *  Character to use for opening delimiter, by default `rehype:ignore:start`\n   */\n  openDelimiter?: string;\n  /**\n   * Character to use for closing delimiter, by default `rehype:ignore:end`\n   */\n  closeDelimiter?: string;\n}\n\nconst rehypeIgnore: Plugin<[RehypeIgnoreOptions?], Root> = (options = {}) => {\n  const { openDelimiter = 'rehype:ignore:start', closeDelimiter = 'rehype:ignore:end' } = options;\n  return (tree) => {\n    visit(tree, (node: Root | RootContent, index, parent) => {\n      if (node.type === 'element' || node.type === 'root') {\n        // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);\n        // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);\n        // if (start > -1 && end > -1) {\n        //   node.children = node.children.filter((_, idx) => idx < start || idx > end);\n        // }\n        let start = false;\n        node.children = node.children.filter((item) => {\n          if (item.type === 'raw' || item.type === 'comment') {\n            let str =  item.value?.trim();\n            str = str.replace(/^<!--(.*?)-->/, '$1')\n            if (str === openDelimiter) {\n                start = true;\n                return false;\n            }\n            if (str === closeDelimiter) {\n                start = false;\n                return false;\n            }\n          }\n          \n          return !start;\n        })\n      }\n    });\n  }\n}\n\nexport default rehypeIgnore;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}