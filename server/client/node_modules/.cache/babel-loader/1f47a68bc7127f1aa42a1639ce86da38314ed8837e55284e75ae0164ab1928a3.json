{"ast":null,"code":"// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nconst whitespace = new Set([9, 10, 12, 13, 32]);\nconst ZERO = \"0\".charCodeAt(0);\nconst NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\nexport function parse(formula) {\n  formula = formula.trim().toLowerCase();\n  if (formula === \"even\") {\n    return [2, 0];\n  } else if (formula === \"odd\") {\n    return [2, 1];\n  }\n  // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n  let idx = 0;\n  let a = 0;\n  let sign = readSign();\n  let number = readNumber();\n  if (idx < formula.length && formula.charAt(idx) === \"n\") {\n    idx++;\n    a = sign * (number !== null && number !== void 0 ? number : 1);\n    skipWhitespace();\n    if (idx < formula.length) {\n      sign = readSign();\n      skipWhitespace();\n      number = readNumber();\n    } else {\n      sign = number = 0;\n    }\n  }\n  // Throw if there is anything else\n  if (number === null || idx < formula.length) {\n    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n  }\n  return [a, sign * number];\n  function readSign() {\n    if (formula.charAt(idx) === \"-\") {\n      idx++;\n      return -1;\n    }\n    if (formula.charAt(idx) === \"+\") {\n      idx++;\n    }\n    return 1;\n  }\n  function readNumber() {\n    const start = idx;\n    let value = 0;\n    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n      value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n      idx++;\n    }\n    // Return `null` if we didn't read anything.\n    return idx === start ? null : value;\n  }\n  function skipWhitespace() {\n    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n      idx++;\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AAEA;AACA,MAAMA,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC/C,MAAMC,IAAI,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;AAC9B,MAAMC,IAAI,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC;AAE9B;;;;;;;AAOA,OAAM,SAAUE,KAAK,CAACC,OAAe;EACjCA,OAAO,GAAGA,OAAO,CAACC,IAAI,EAAE,CAACC,WAAW,EAAE;EAEtC,IAAIF,OAAO,KAAK,MAAM,EAAE;IACpB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;GAChB,MAAM,IAAIA,OAAO,KAAK,KAAK,EAAE;IAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;;EAGjB;EAEA,IAAIG,GAAG,GAAG,CAAC;EAEX,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,IAAI,GAAGC,QAAQ,EAAE;EACrB,IAAIC,MAAM,GAAGC,UAAU,EAAE;EAEzB,IAAIL,GAAG,GAAGH,OAAO,CAACS,MAAM,IAAIT,OAAO,CAACU,MAAM,CAACP,GAAG,CAAC,KAAK,GAAG,EAAE;IACrDA,GAAG,EAAE;IACLC,CAAC,GAAGC,IAAI,IAAIE,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,CAAC,CAAC;IAExBI,cAAc,EAAE;IAEhB,IAAIR,GAAG,GAAGH,OAAO,CAACS,MAAM,EAAE;MACtBJ,IAAI,GAAGC,QAAQ,EAAE;MACjBK,cAAc,EAAE;MAChBJ,MAAM,GAAGC,UAAU,EAAE;KACxB,MAAM;MACHH,IAAI,GAAGE,MAAM,GAAG,CAAC;;;EAIzB;EACA,IAAIA,MAAM,KAAK,IAAI,IAAIJ,GAAG,GAAGH,OAAO,CAACS,MAAM,EAAE;IACzC,MAAM,IAAIG,KAAK,CAAC,kCAAkCZ,OAAO,IAAI,CAAC;;EAGlE,OAAO,CAACI,CAAC,EAAEC,IAAI,GAAGE,MAAM,CAAC;EAEzB,SAASD,QAAQ;IACb,IAAIN,OAAO,CAACU,MAAM,CAACP,GAAG,CAAC,KAAK,GAAG,EAAE;MAC7BA,GAAG,EAAE;MACL,OAAO,CAAC,CAAC;;IAGb,IAAIH,OAAO,CAACU,MAAM,CAACP,GAAG,CAAC,KAAK,GAAG,EAAE;MAC7BA,GAAG,EAAE;;IAGT,OAAO,CAAC;EACZ;EAEA,SAASK,UAAU;IACf,MAAMK,KAAK,GAAGV,GAAG;IACjB,IAAIW,KAAK,GAAG,CAAC;IAEb,OACIX,GAAG,GAAGH,OAAO,CAACS,MAAM,IACpBT,OAAO,CAACH,UAAU,CAACM,GAAG,CAAC,IAAIP,IAAI,IAC/BI,OAAO,CAACH,UAAU,CAACM,GAAG,CAAC,IAAIL,IAAI,EACjC;MACEgB,KAAK,GAAGA,KAAK,GAAG,EAAE,IAAId,OAAO,CAACH,UAAU,CAACM,GAAG,CAAC,GAAGP,IAAI,CAAC;MACrDO,GAAG,EAAE;;IAGT;IACA,OAAOA,GAAG,KAAKU,KAAK,GAAG,IAAI,GAAGC,KAAK;EACvC;EAEA,SAASH,cAAc;IACnB,OACIR,GAAG,GAAGH,OAAO,CAACS,MAAM,IACpBf,UAAU,CAACqB,GAAG,CAACf,OAAO,CAACH,UAAU,CAACM,GAAG,CAAC,CAAC,EACzC;MACEA,GAAG,EAAE;;EAEb;AACJ","names":["whitespace","Set","ZERO","charCodeAt","NINE","parse","formula","trim","toLowerCase","idx","a","sign","readSign","number","readNumber","length","charAt","skipWhitespace","Error","start","value","has"],"sources":["https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/parse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}