{"ast":null,"code":"/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport { listItem } from 'mdast-util-to-markdown/lib/handle/list-item.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js';\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n};\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{\n    atBreak: true,\n    character: '-',\n    after: '[:|-]'\n  }],\n  handlers: {\n    listItem: listItemWithTaskListItem\n  }\n};\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */this.stack[this.stack.length - 2];\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked';\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */this.stack[this.stack.length - 2];\n  const node = /** @type {Paragraph} */this.stack[this.stack.length - 1];\n  const siblings = parent.children;\n  const head = node.children[0];\n  let index = -1;\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph;\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean' && head && head.type === 'text') {\n    while (++index < siblings.length) {\n      const sibling = siblings[index];\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling;\n        break;\n      }\n    }\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1);\n      if (head.value.length === 0) {\n        node.children.shift();\n      } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\n        head.position.start.column++;\n        head.position.start.offset++;\n        node.position.start = Object.assign({}, head.position.start);\n      }\n    }\n  }\n  this.exit(token);\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0];\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\n  const tracker = track(safeOptions);\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  });\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n  return value;\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox;\n  }\n}","map":{"version":3,"names":["listItem","track","gfmTaskListItemFromMarkdown","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","unsafe","atBreak","character","after","handlers","listItemWithTaskListItem","token","node","stack","length","checked","type","parent","siblings","children","head","index","firstParaghraph","sibling","value","slice","shift","position","start","offset","column","Object","assign","context","safeOptions","checkable","checkbox","tracker","move","current","replace","check","$0"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/mdast-util-gfm-task-list-item/index.js"],"sourcesContent":["/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}