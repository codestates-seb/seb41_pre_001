{"ast":null,"code":"import { visit as e } from \"unist-util-visit\";\nimport { toString as r } from \"hast-util-to-string\";\nimport { filter as t } from \"unist-util-filter\";\nimport n from \"parse-numeric-range\";\nimport { refractor as i } from \"refractor/lib/common.js\";\nimport { refractor as o } from \"refractor/lib/all.js\";\nfunction l() {\n  l = function l(e, r) {\n    return new t(e, void 0, r);\n  };\n  var e = RegExp.prototype,\n    r = new WeakMap();\n  function t(e, n, i) {\n    var o = new RegExp(e, n);\n    return r.set(o, i || r.get(e)), a(o, t.prototype);\n  }\n  function n(e, t) {\n    var n = r.get(t);\n    return Object.keys(n).reduce(function (r, t) {\n      return r[t] = e[n[t]], r;\n    }, Object.create(null));\n  }\n  return s(t, RegExp), t.prototype.exec = function (r) {\n    var t = e.exec.call(this, r);\n    return t && (t.groups = n(t, this)), t;\n  }, t.prototype[Symbol.replace] = function (t, i) {\n    if (\"string\" == typeof i) {\n      var o = r.get(this);\n      return e[Symbol.replace].call(this, t, i.replace(/\\$<([^>]+)>/g, function (e, r) {\n        return \"$\" + o[r];\n      }));\n    }\n    if (\"function\" == typeof i) {\n      var l = this;\n      return e[Symbol.replace].call(this, t, function () {\n        var e = arguments;\n        return \"object\" != typeof e[e.length - 1] && (e = [].slice.call(e)).push(n(e, l)), i.apply(this, e);\n      });\n    }\n    return e[Symbol.replace].call(this, t, i);\n  }, l.apply(this, arguments);\n}\nfunction s(e, r) {\n  if (\"function\" != typeof r && null !== r) throw new TypeError(\"Super expression must either be null or a function\");\n  e.prototype = Object.create(r && r.prototype, {\n    constructor: {\n      value: e,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), r && a(e, r);\n}\nfunction a(e, r) {\n  return a = Object.setPrototypeOf || function (e, r) {\n    return e.__proto__ = r, e;\n  }, a(e, r);\n}\nfunction u(e, r) {\n  (null == r || r > e.length) && (r = e.length);\n  for (var t = 0, n = new Array(r); t < r; t++) n[t] = e[t];\n  return n;\n}\nfunction c(e, r) {\n  var t = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (t) return (t = t.call(e)).next.bind(t);\n  if (Array.isArray(e) || (t = function (e, r) {\n    if (e) {\n      if (\"string\" == typeof e) return u(e, r);\n      var t = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === t && e.constructor && (t = e.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(e) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? u(e, r) : void 0;\n    }\n  }(e)) || r && e && \"number\" == typeof e.length) {\n    t && (e = t);\n    var n = 0;\n    return function () {\n      return n >= e.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: e[n++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar p = function p(i) {\n    return function (o) {\n      return void 0 === o && (o = {}), function (r) {\n        e(r, \"element\", s);\n      };\n      function s(e, s, a) {\n        if (a && \"pre\" === a.tagName && \"code\" === e.tagName) {\n          var u = e.data && e.data.meta ? e.data.meta : \"\";\n          e.properties.className ? \"boolean\" == typeof e.properties.className ? e.properties.className = [] : Array.isArray(e.properties.className) || (e.properties.className = [e.properties.className]) : e.properties.className = [], e.properties.className.push(\"code-highlight\");\n          var p,\n            f,\n            m = function (e) {\n              for (var r, t = c(e.properties.className); !(r = t()).done;) {\n                var n = r.value;\n                if (\"language-\" === n.slice(0, 9)) return n.slice(9).toLowerCase();\n              }\n              return null;\n            }(e);\n          if (m) try {\n            var h;\n            h = null != m && m.includes(\"diff-\") ? m.split(\"-\")[1] : m, p = i.highlight(r(e), h), a.properties.className = (a.properties.className || []).concat(\"language-\" + h);\n          } catch (r) {\n            if (!o.ignoreMissing || !/Unknown language/.test(r.message)) throw r;\n            p = e;\n          } else p = e;\n          p.children = (f = 1, function e(r) {\n            return r.reduce(function (r, t) {\n              if (\"text\" === t.type) {\n                var n = t.value,\n                  i = (n.match(/\\n/g) || \"\").length;\n                if (0 === i) t.position = {\n                  start: {\n                    line: f,\n                    column: 1\n                  },\n                  end: {\n                    line: f,\n                    column: 1\n                  }\n                }, r.push(t);else for (var o, l = n.split(\"\\n\"), s = c(l.entries()); !(o = s()).done;) {\n                  var a = o.value,\n                    u = a[0],\n                    p = a[1];\n                  r.push({\n                    type: \"text\",\n                    value: u === l.length - 1 ? p : p + \"\\n\",\n                    position: {\n                      start: {\n                        line: f + u,\n                        column: 1\n                      },\n                      end: {\n                        line: f + u,\n                        column: 1\n                      }\n                    }\n                  });\n                }\n                return f += i, r;\n              }\n              if (Object.prototype.hasOwnProperty.call(t, \"children\")) {\n                var m = f;\n                return t.children = e(t.children), r.push(t), t.position = {\n                  start: {\n                    line: m,\n                    column: 1\n                  },\n                  end: {\n                    line: f,\n                    column: 1\n                  }\n                }, r;\n              }\n              return r.push(t), r;\n            }, []);\n          })(p.children), p.position = p.children.length > 0 ? {\n            start: {\n              line: p.children[0].position.start.line,\n              column: 0\n            },\n            end: {\n              line: p.children[p.children.length - 1].position.end.line,\n              column: 0\n            }\n          } : {\n            start: {\n              line: 0,\n              column: 0\n            },\n            end: {\n              line: 0,\n              column: 0\n            }\n          };\n          for (var d, g = function (e) {\n              var r = /{([\\d,-]+)}/,\n                t = e.split(\",\").map(function (e) {\n                  return e.trim();\n                }).join();\n              if (r.test(t)) {\n                var i = r.exec(t)[1],\n                  o = n(i);\n                return function (e) {\n                  return o.includes(e + 1);\n                };\n              }\n              return function () {\n                return !1;\n              };\n            }(u), y = function (e) {\n              var r = /*#__PURE__*/l(/showLineNumbers=([0-9]+)/i, {\n                lines: 1\n              });\n              if (r.test(e)) {\n                var t = r.exec(e);\n                return Number(t.groups.lines);\n              }\n              return 1;\n            }(u), v = function (e) {\n              for (var r = new Array(e), t = 0; t < e; t++) r[t] = {\n                type: \"element\",\n                tagName: \"span\",\n                properties: {\n                  className: []\n                },\n                children: []\n              };\n              return r;\n            }(p.position.end.line), b = [\"showlinenumbers=false\", 'showlinenumbers=\"false\"', \"showlinenumbers={false}\"], w = function w() {\n              var e = d.value,\n                n = e[0],\n                i = e[1];\n              i.properties.className = [\"code-line\"];\n              var l = t(p, function (e) {\n                return e.position.start.line <= n + 1 && e.position.end.line >= n + 1;\n              });\n              i.children = l.children, !u.toLowerCase().includes(\"showLineNumbers\".toLowerCase()) && !o.showLineNumbers || b.some(function (e) {\n                return u.toLowerCase().includes(e);\n              }) || (i.properties.line = [(n + y).toString()], i.properties.className.push(\"line-number\")), g(n) && i.properties.className.push(\"highlight-line\"), (\"diff\" === m || null != m && m.includes(\"diff-\")) && \"-\" === r(i).substring(0, 1) ? i.properties.className.push(\"deleted\") : (\"diff\" === m || null != m && m.includes(\"diff-\")) && \"+\" === r(i).substring(0, 1) && i.properties.className.push(\"inserted\");\n            }, N = c(v.entries()); !(d = N()).done;) w();\n          v.length > 0 && \"\" === r(v[v.length - 1]).trim() && v.pop(), e.children = v;\n        }\n      }\n    };\n  },\n  f = p(i),\n  m = p(o);\nexport { m as default, f as rehypePrismCommon, p as rehypePrismGenerator };","map":{"version":3,"mappings":"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","names":["rehypePrismGenerator","refractor","options","tree","visit","visitor","node","index","parent","tagName","meta","data","properties","className","Array","isArray","push","refractorRoot","startLineNum","lang","classListItem","slice","toLowerCase","getLanguage","rootLang","includes","split","highlight","toString","concat","err","ignoreMissing","test","message","children","addNodePosition","ast","reduce","result","type","value","numLines","match","length","position","start","line","column","end","lines","entries","i","Object","prototype","hasOwnProperty","call","initialLineNum","shouldHighlightLine","RE","parsedMeta","map","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","calculateLinesToHighlight","startingLineNumber","Number","groups","calculateStartingLine","codeLineArray","number","a","createLineNodes","falseShowLineNumbersStr","treeExtract","filter","showLineNumbers","some","substring","pop","rehypePrismCommon","refractorCommon","rehypePrismAll","refractorAll"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-prism-plus/src/generator.js","/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-prism-plus/src/common.js","/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-prism-plus/src/all.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Create container AST for node lines\n *\n * @param {number} number\n * @return {Element[]}\n */\nconst createLineNodes = (number) => {\n  const a = new Array(number)\n  for (let i = 0; i < number; i++) {\n    a[i] = {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: [] },\n      children: [],\n    }\n  }\n  return a\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        if (numLines === 0) {\n          node.position = {\n            // column: 1 is needed to avoid error with @next/mdx\n            // https://github.com/timlrx/rehype-prism-plus/issues/44\n            start: { line: startLineNum, column: 1 },\n            end: { line: startLineNum, column: 1 },\n          }\n          result.push(node)\n        } else {\n          const lines = value.split('\\n')\n          for (const [i, line] of lines.entries()) {\n            result.push({\n              type: 'text',\n              value: i === lines.length - 1 ? line : line + '\\n',\n              position: {\n                start: { line: startLineNum + i, column: 1 },\n                end: { line: startLineNum + i, column: 1 },\n              },\n            })\n          }\n        }\n        startLineNum = startLineNum + numLines\n\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 1 },\n          end: { line: startLineNum, column: 1 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          let rootLang\n          if (lang?.includes('diff-')){\n            rootLang=lang.split('-')[1]\n          } else{\n            rootLang=lang\n          }\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), rootLang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + rootLang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      refractorRoot.children = addNodePositionClosure()(refractorRoot.children)\n\n      // Add position info to root\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      } else {\n        refractorRoot.position = {\n          start: { line: 0, column: 0 },\n          end: { line: 0, column: 0 },\n        }\n      }\n\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = createLineNodes(refractorRoot.position.end.line)\n\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Default class name for each line\n        line.properties.className = ['code-line']\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n\n        // Line number\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          line.properties.className.push('highlight-line')\n        }\n\n        // Diff classes\n        if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '-') {\n          line.properties.className.push('deleted')\n        } else if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '+') {\n          line.properties.className.push('inserted')\n        }\n      }\n\n      // Remove possible trailing line when splitting by \\n which results in empty array\n      if (\n        codeLineArray.length > 0 &&\n        toString(codeLineArray[codeLineArray.length - 1]).trim() === ''\n      ) {\n        codeLineArray.pop()\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}