{"ast":null,"code":"/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Quote} Quote\n */\n\nimport { html, svg } from 'property-information';\nimport { htmlVoidElements } from 'html-void-elements';\nimport { omission } from './omission/index.js';\nimport { one } from './tree.js';\n\n/**\n * @param {Node|Array.<Node>} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toHtml(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var quote = options.quote || '\"';\n  /** @type {Quote} */\n  var alternative = quote === '\"' ? \"'\" : '\"';\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`');\n  }\n\n  /** @type {Context} */\n  var context = {\n    valid: options.allowParseErrors ? 0 : 1,\n    safe: options.allowDangerousCharacters ? 0 : 1,\n    schema: options.space === 'svg' ? svg : html,\n    omit: options.omitOptionalTags ? omission : undefined,\n    quote: quote,\n    alternative: alternative,\n    smart: options.quoteSmart,\n    unquoted: options.preferUnquoted,\n    tight: options.tightAttributes,\n    upperDoctype: options.upperDoctype,\n    tightDoctype: options.tightDoctype,\n    bogusComments: options.bogusComments,\n    tightLists: options.tightCommaSeparatedLists,\n    tightClose: options.tightSelfClosing,\n    collapseEmpty: options.collapseEmptyAttributes,\n    dangerous: options.allowDangerousHtml,\n    voids: options.voids || htmlVoidElements.concat(),\n    entities: options.entities || {},\n    close: options.closeSelfClosing,\n    closeEmpty: options.closeEmptyElements\n  };\n  return one(context,\n  // @ts-ignore Assume `node` does not contain a root.\n  Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node, null, null);\n}","map":{"version":3,"names":["html","svg","htmlVoidElements","omission","one","toHtml","node","options","quote","alternative","Error","context","valid","allowParseErrors","safe","allowDangerousCharacters","schema","space","omit","omitOptionalTags","undefined","smart","quoteSmart","unquoted","preferUnquoted","tight","tightAttributes","upperDoctype","tightDoctype","bogusComments","tightLists","tightCommaSeparatedLists","tightClose","tightSelfClosing","collapseEmpty","collapseEmptyAttributes","dangerous","allowDangerousHtml","voids","concat","entities","close","closeSelfClosing","closeEmpty","closeEmptyElements","Array","isArray","type","children"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Quote} Quote\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {omission} from './omission/index.js'\nimport {one} from './tree.js'\n\n/**\n * @param {Node|Array.<Node>} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toHtml(node, options = {}) {\n  const quote = options.quote || '\"'\n  /** @type {Quote} */\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {Context} */\n  const context = {\n    valid: options.allowParseErrors ? 0 : 1,\n    safe: options.allowDangerousCharacters ? 0 : 1,\n    schema: options.space === 'svg' ? svg : html,\n    omit: options.omitOptionalTags ? omission : undefined,\n    quote,\n    alternative,\n    smart: options.quoteSmart,\n    unquoted: options.preferUnquoted,\n    tight: options.tightAttributes,\n    upperDoctype: options.upperDoctype,\n    tightDoctype: options.tightDoctype,\n    bogusComments: options.bogusComments,\n    tightLists: options.tightCommaSeparatedLists,\n    tightClose: options.tightSelfClosing,\n    collapseEmpty: options.collapseEmptyAttributes,\n    dangerous: options.allowDangerousHtml,\n    voids: options.voids || htmlVoidElements.concat(),\n    entities: options.entities || {},\n    close: options.closeSelfClosing,\n    closeEmpty: options.closeEmptyElements\n  }\n\n  return one(\n    context,\n    // @ts-ignore Assume `node` does not contain a root.\n    Array.isArray(node) ? {type: 'root', children: node} : node,\n    null,\n    null\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,IAAI,EAAEC,GAAG,QAAO,sBAAsB;AAC9C,SAAQC,gBAAgB,QAAO,oBAAoB;AACnD,SAAQC,QAAQ,QAAO,qBAAqB;AAC5C,SAAQC,GAAG,QAAO,WAAW;;AAE7B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAM,CAACC,IAAI,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EACvC,IAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,GAAG;EAClC;EACA,IAAMC,WAAW,GAAGD,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;EAE7C,IAAIA,KAAK,KAAK,GAAG,IAAIA,KAAK,KAAK,GAAG,EAAE;IAClC,MAAM,IAAIE,KAAK,CAAC,iBAAiB,GAAGF,KAAK,GAAG,yBAAyB,CAAC;EACxE;;EAEA;EACA,IAAMG,OAAO,GAAG;IACdC,KAAK,EAAEL,OAAO,CAACM,gBAAgB,GAAG,CAAC,GAAG,CAAC;IACvCC,IAAI,EAAEP,OAAO,CAACQ,wBAAwB,GAAG,CAAC,GAAG,CAAC;IAC9CC,MAAM,EAAET,OAAO,CAACU,KAAK,KAAK,KAAK,GAAGhB,GAAG,GAAGD,IAAI;IAC5CkB,IAAI,EAAEX,OAAO,CAACY,gBAAgB,GAAGhB,QAAQ,GAAGiB,SAAS;IACrDZ,KAAK,EAALA,KAAK;IACLC,WAAW,EAAXA,WAAW;IACXY,KAAK,EAAEd,OAAO,CAACe,UAAU;IACzBC,QAAQ,EAAEhB,OAAO,CAACiB,cAAc;IAChCC,KAAK,EAAElB,OAAO,CAACmB,eAAe;IAC9BC,YAAY,EAAEpB,OAAO,CAACoB,YAAY;IAClCC,YAAY,EAAErB,OAAO,CAACqB,YAAY;IAClCC,aAAa,EAAEtB,OAAO,CAACsB,aAAa;IACpCC,UAAU,EAAEvB,OAAO,CAACwB,wBAAwB;IAC5CC,UAAU,EAAEzB,OAAO,CAAC0B,gBAAgB;IACpCC,aAAa,EAAE3B,OAAO,CAAC4B,uBAAuB;IAC9CC,SAAS,EAAE7B,OAAO,CAAC8B,kBAAkB;IACrCC,KAAK,EAAE/B,OAAO,CAAC+B,KAAK,IAAIpC,gBAAgB,CAACqC,MAAM,EAAE;IACjDC,QAAQ,EAAEjC,OAAO,CAACiC,QAAQ,IAAI,CAAC,CAAC;IAChCC,KAAK,EAAElC,OAAO,CAACmC,gBAAgB;IAC/BC,UAAU,EAAEpC,OAAO,CAACqC;EACtB,CAAC;EAED,OAAOxC,GAAG,CACRO,OAAO;EACP;EACAkC,KAAK,CAACC,OAAO,CAACxC,IAAI,CAAC,GAAG;IAACyC,IAAI,EAAE,MAAM;IAAEC,QAAQ,EAAE1C;EAAI,CAAC,GAAGA,IAAI,EAC3D,IAAI,EACJ,IAAI,CACL;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}