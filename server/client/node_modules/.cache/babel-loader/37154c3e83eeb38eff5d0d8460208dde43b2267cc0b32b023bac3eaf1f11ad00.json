{"ast":null,"code":"// @ts-nocheck\nimport refractorCss from './css.js';\nsass.displayName = 'sass';\nsass.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function sass(Prism) {\n  Prism.register(refractorCss);\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorCss","sass","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","greedy","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/sass.js"],"sourcesContent":["// @ts-nocheck\nimport refractorCss from './css.js'\nsass.displayName = 'sass'\nsass.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function sass(Prism) {\n  Prism.register(refractorCss)\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,YAAY,MAAM,UAAU;AACnCC,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;;AAEjB;AACA,eAAe,SAASF,IAAI,CAACG,KAAK,EAAE;EAClCA,KAAK,CAACC,QAAQ,CAACL,YAAY,CAAC;EAC3B,CAAC,UAAUI,KAAK,EAAE;IACjBA,KAAK,CAACE,SAAS,CAACL,IAAI,GAAGG,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,KAAK,EAAE;MACnD;MACAC,OAAO,EAAE;QACPC,OAAO,EAAE,+CAA+C;QACxDC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IACFP,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE;MAC7C;MACA,aAAa,EAAE;QACb;QACAH,OAAO,EAAE,qBAAqB;QAC9BE,MAAM,EAAE,IAAI;QACZE,MAAM,EAAE;UACNC,MAAM,EAAE;QACV;MACF;IACF,CAAC,CAAC;IACF,OAAOV,KAAK,CAACE,SAAS,CAACL,IAAI,CAACa,MAAM;IAClC,IAAIC,QAAQ,GAAG,wBAAwB;IACvC,IAAIC,QAAQ,GAAG,CACb,0CAA0C,EAC1C;MACEP,OAAO,EAAE,aAAa;MACtBC,UAAU,EAAE;IACd,CAAC,CACF;IACDN,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;MAC/C;MACA,eAAe,EAAE;QACfH,OAAO,EAAE,cAAc;QACvBE,MAAM,EAAE,IAAI;QACZE,MAAM,EAAE;UACNI,WAAW,EAAE,GAAG;UAChBF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;MACD;MACA,eAAe,EAAE;QACfP,OAAO,EAAE,oCAAoC;QAC7CE,MAAM,EAAE,IAAI;QACZE,MAAM,EAAE;UACNK,QAAQ,EAAE,CACR,iBAAiB,EACjB;YACET,OAAO,EAAE,YAAY;YACrBC,UAAU,EAAE;UACd,CAAC,CACF;UACDO,WAAW,EAAE,GAAG;UAChBF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA,QAAQ;UAClBG,SAAS,EAAEf,KAAK,CAACE,SAAS,CAACL,IAAI,CAACkB;QAClC;MACF;IACF,CAAC,CAAC;IACF,OAAOf,KAAK,CAACE,SAAS,CAACL,IAAI,CAACiB,QAAQ;IACpC,OAAOd,KAAK,CAACE,SAAS,CAACL,IAAI,CAACkB,SAAS,EAAC;IACtC;;IAEAf,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE;MAClDQ,QAAQ,EAAE;QACRX,OAAO,EACL,wHAAwH;QAC1HC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ,CAAC,EAAEP,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}