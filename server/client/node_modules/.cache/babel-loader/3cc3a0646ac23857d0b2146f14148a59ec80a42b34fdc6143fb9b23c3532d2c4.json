{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport React, { useContext, useEffect } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { EditorContext } from '../../Context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction html2Escape(sHtml) {\n  return sHtml.replace(/```(\\w+)?([\\s\\S]*?)(\\s.+)?```/g, function (str) {\n    return str.replace(/[<&\"]/g, function (c) {\n      return {\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;'\n      }[c];\n    });\n  }).replace(/[<&\"]/g, function (c) {\n    return {\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;'\n    }[c];\n  });\n}\nexport default function Markdown(props) {\n  var prefixCls = props.prefixCls;\n  var _useContext = useContext(EditorContext),\n    _useContext$markdown = _useContext.markdown,\n    markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,\n    highlightEnable = _useContext.highlightEnable,\n    dispatch = _useContext.dispatch;\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(function () {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (!markdown) {\n    return /*#__PURE__*/_jsx(\"pre\", {\n      ref: preRef,\n      className: prefixCls + \"-text-pre wmde-markdown-color\"\n    });\n  }\n  var mdStr = \"<pre class=\\\"language-markdown \" + prefixCls + \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\" + html2Escape(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\", \"\"])), markdown)) + \"\\n</code></pre>\";\n  if (highlightEnable) {\n    try {\n      mdStr = rehype().data('settings', {\n        fragment: true\n      }).use(rehypePrism, {\n        ignoreMissing: true\n      }).processSync(mdStr).toString();\n    } catch (error) {}\n  }\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'wmde-markdown-color',\n    dangerouslySetInnerHTML: {\n      __html: mdStr || ''\n    }\n  });\n}","map":{"version":3,"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAiB,OAAO;AAC7D,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,mBAAmB;AAE3C,SAASC,aAAa,QAAQ,eAAe;AAAC;AAE9C,SAASC,WAAW,CAACC,KAAa,EAAE;EAClC,OAAOA,KAAK,CACTC,OAAO,CAAC,gCAAgC,EAAGC,aAAW,EAAK;IAC1D,OAAOA,GAAG,CAACD,OAAO,CAChB,QAAQ,EACPE,WAAS;MAAA,OAAO;QAAE,GAAG,EAAE,MAAM;QAAE,GAAG,EAAE,MAAM;QAAE,GAAG,EAAE,OAAO;QAAE,GAAG,EAAE;MAAS,CAAC,CAA4BA,CAAC,CAAE;IAAA,EAC1G;EACH,CAAC,CAAC,CACDF,OAAO,CACN,QAAQ,EACPE,WAAS;IAAA,OAAO;MAAE,GAAG,EAAE,MAAM;MAAE,GAAG,EAAE,MAAM;MAAE,GAAG,EAAE,OAAO;MAAE,GAAG,EAAE;IAAS,CAAC,CAA4BA,CAAC,CAAE;EAAA,EAC1G;AACL;AAIA,eAAe,SAASC,QAAQ,CAACC,KAAoB,EAAE;EACrD,IAAQC,YAAcD,KAAK,CAAnBC;EACR,kBAAqDZ,UAAU,CAACI,aAAa,CAAC;IAAA,mCAAtES,QAAQ;IAARA,QAAQ,qCAAG,EAAE;IAAEC,eAAe,eAAfA,eAAe;IAAEC;EACxC,IAAMC,MAAM,gBAAGjB,KAAK,CAACkB,SAAS,EAAkB;EAChDhB,SAAS,CAAC,YAAM;IACd,IAAIe,MAAM,CAACE,OAAO,IAAIH,QAAQ,EAAE;MAC9BA,QAAQ,CAAC;QAAEI,WAAW,EAAEH,MAAM,CAACE;MAAQ,CAAC,CAAC;IAC3C;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EACN,IAAI,CAACL,QAAQ,EAAE;IACb,oBAAOO;MAAKC,GAAG,EAAEL,MAAO;MAACM,SAAS,EAAKV,SAAS;IAAgC,EAAG;EACrF;EACA,IAAIW,KAAK,uCAAoCX,SAAS,0EAAkEP,WAAW,CACjImB,MAAM,CAACC,GAAG,+EAAGZ,QAAQ,EACtB,oBAAiB;EAElB,IAAIC,eAAe,EAAE;IACnB,IAAI;MACFS,KAAK,GAAGrB,MAAM,EAAE,CACbwB,IAAI,CAAC,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC,CACpCC,GAAG,CAACzB,WAAW,EAAE;QAAE0B,aAAa,EAAE;MAAK,CAAC,CAAC,CACzCC,WAAW,CAACP,KAAK,CAAC,CAClBQ,QAAQ,EAAE;IACf,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;EACnB;EAEA,oBAAOjC,KAAK,CAACkC,aAAa,CAAC,KAAK,EAAE;IAChCX,SAAS,EAAE,qBAAqB;IAChCY,uBAAuB,EAAE;MAAEC,MAAM,EAAEZ,KAAK,IAAI;IAAG;EACjD,CAAC,CAAC;AACJ","names":["React","useContext","useEffect","rehype","rehypePrism","EditorContext","html2Escape","sHtml","replace","str","c","Markdown","props","prefixCls","markdown","highlightEnable","dispatch","preRef","createRef","current","textareaPre","_jsx","ref","className","mdStr","String","raw","data","fragment","use","ignoreMissing","processSync","toString","error","createElement","dangerouslySetInnerHTML","__html"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/react-md-editor/src/components/TextArea/Markdown.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { IProps } from '../../Editor';\nimport { EditorContext } from '../../Context';\n\nfunction html2Escape(sHtml: string) {\n  return sHtml\n    .replace(/```(\\w+)?([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n      return str.replace(\n        /[<&\"]/g,\n        (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n      );\n    })\n    .replace(\n      /[<&\"]/g,\n      (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n    );\n}\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (!markdown) {\n    return <pre ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />;\n  }\n  let mdStr = `<pre class=\"language-markdown ${prefixCls}-text-pre wmde-markdown-color\"><code class=\"language-markdown\">${html2Escape(\n    String.raw`${markdown}`,\n  )}\\n</code></pre>`;\n\n  if (highlightEnable) {\n    try {\n      mdStr = rehype()\n        .data('settings', { fragment: true })\n        .use(rehypePrism, { ignoreMissing: true })\n        .processSync(mdStr)\n        .toString();\n    } catch (error) {}\n  }\n\n  return React.createElement('div', {\n    className: 'wmde-markdown-color',\n    dangerouslySetInnerHTML: { __html: mdStr || '' },\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}