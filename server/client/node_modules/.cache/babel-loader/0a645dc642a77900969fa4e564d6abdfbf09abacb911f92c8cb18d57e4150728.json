{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n};\n\n/** @type {HtmlExtension} */\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      /** @type {Array<Align>} */\n      // @ts-expect-error Custom.\n      const tableAlign = token._align;\n      this.lineEndingIfNeeded();\n      this.tag('<table>');\n      this.setData('tableAlign', tableAlign);\n    },\n    tableBody() {\n      // Clear slurping line ending from the delimiter row.\n      this.setData('slurpOneLineEnding');\n      this.tag('<tbody>');\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */\n      this.getData('tableAlign');\n      const tableColumn = /** @type {number} */this.getData('tableColumn');\n      const align = alignment[tableAlign[tableColumn]];\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer();\n      } else {\n        this.lineEndingIfNeeded();\n        this.tag('<td' + align + '>');\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded();\n      this.tag('<thead>');\n    },\n    tableHeader() {\n      const tableAlign = /** @type {Array<Align>} */\n      this.getData('tableAlign');\n      const tableColumn = /** @type {number} */this.getData('tableColumn');\n      const align = alignment[tableAlign[tableColumn]];\n      this.lineEndingIfNeeded();\n      this.tag('<th' + align + '>');\n    },\n    tableRow() {\n      this.setData('tableColumn', 0);\n      this.lineEndingIfNeeded();\n      this.tag('<tr>');\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token);\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace);\n      }\n      this.raw(this.encode(value));\n    },\n    table() {\n      this.setData('tableAlign');\n      // If there was no table body, make sure the slurping from the delimiter row\n      // is cleared.\n      this.setData('slurpAllLineEndings');\n      this.lineEndingIfNeeded();\n      this.tag('</table>');\n    },\n    tableBody() {\n      this.lineEndingIfNeeded();\n      this.tag('</tbody>');\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */\n      this.getData('tableAlign');\n      const tableColumn = /** @type {number} */this.getData('tableColumn');\n      if (tableColumn in tableAlign) {\n        this.tag('</td>');\n        this.setData('tableColumn', tableColumn + 1);\n      } else {\n        // Stop capturing.\n        this.resume();\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded();\n      this.tag('</thead>');\n      this.setData('slurpOneLineEnding', true);\n      // Slurp the line ending from the delimiter row.\n    },\n\n    tableHeader() {\n      const tableColumn = /** @type {number} */this.getData('tableColumn');\n      this.tag('</th>');\n      this.setData('tableColumn', tableColumn + 1);\n    },\n    tableRow() {\n      const tableAlign = /** @type {Array<Align>} */\n      this.getData('tableAlign');\n      let tableColumn = /** @type {number} */this.getData('tableColumn');\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded();\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');\n        tableColumn++;\n      }\n      this.setData('tableColumn', tableColumn);\n      this.lineEndingIfNeeded();\n      this.tag('</tr>');\n    }\n  }\n};\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","map":{"version":3,"names":["alignment","none","left","right","center","gfmTableHtml","enter","table","token","tableAlign","_align","lineEndingIfNeeded","tag","setData","tableBody","tableData","getData","tableColumn","align","undefined","buffer","tableHead","tableHeader","tableRow","exit","codeTextData","value","sliceSerialize","replace","raw","encode","resume","length","$0","$1"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-extension-gfm-table/dev/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n\n/** @type {HtmlExtension} */\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      /** @type {Array<Align>} */\n      // @ts-expect-error Custom.\n      const tableAlign = token._align\n      this.lineEndingIfNeeded()\n      this.tag('<table>')\n      this.setData('tableAlign', tableAlign)\n    },\n    tableBody() {\n      // Clear slurping line ending from the delimiter row.\n      this.setData('slurpOneLineEnding')\n      this.tag('<tbody>')\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      const align = alignment[tableAlign[tableColumn]]\n\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer()\n      } else {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + align + '>')\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('<thead>')\n    },\n    tableHeader() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      const align = alignment[tableAlign[tableColumn]]\n\n      this.lineEndingIfNeeded()\n      this.tag('<th' + align + '>')\n    },\n    tableRow() {\n      this.setData('tableColumn', 0)\n      this.lineEndingIfNeeded()\n      this.tag('<tr>')\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token)\n\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace)\n      }\n\n      this.raw(this.encode(value))\n    },\n    table() {\n      this.setData('tableAlign')\n      // If there was no table body, make sure the slurping from the delimiter row\n      // is cleared.\n      this.setData('slurpAllLineEndings')\n      this.lineEndingIfNeeded()\n      this.tag('</table>')\n    },\n    tableBody() {\n      this.lineEndingIfNeeded()\n      this.tag('</tbody>')\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n\n      if (tableColumn in tableAlign) {\n        this.tag('</td>')\n        this.setData('tableColumn', tableColumn + 1)\n      } else {\n        // Stop capturing.\n        this.resume()\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('</thead>')\n      this.setData('slurpOneLineEnding', true)\n      // Slurp the line ending from the delimiter row.\n    },\n    tableHeader() {\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      this.tag('</th>')\n      this.setData('tableColumn', tableColumn + 1)\n    },\n    tableRow() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      let tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n        tableColumn++\n      }\n\n      this.setData('tableColumn', tableColumn)\n      this.lineEndingIfNeeded()\n      this.tag('</tr>')\n    }\n  }\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}