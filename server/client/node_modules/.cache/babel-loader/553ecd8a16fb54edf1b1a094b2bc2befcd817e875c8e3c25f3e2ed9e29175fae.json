{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { labelEnd } from './label-end.js';\n/** @type {Construct} */\n\nexport var labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  var self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelLink');\n    return after;\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["labelEnd","labelStartLink","name","tokenize","tokenizeLabelStartLink","resolveAll","effects","ok","nok","self","start","code","enter","consume","exit","after","parser","constructs"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-core-commonmark/lib/label-start-link.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAQ,QAAO,gBAAgB;AACvC;;AAEA,OAAO,IAAMC,cAAc,GAAG;EAC5BC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAEC,sBAAsB;EAChCC,UAAU,EAAEL,QAAQ,CAACK;AACvB,CAAC;AACD;;AAEA,SAASD,sBAAsB,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAChD,IAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBL,OAAO,CAACM,KAAK,CAAC,WAAW,CAAC;IAC1BN,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;IAC5BN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;IACrBL,OAAO,CAACQ,IAAI,CAAC,aAAa,CAAC;IAC3BR,OAAO,CAACQ,IAAI,CAAC,WAAW,CAAC;IACzB,OAAOC,KAAK;EACd;EACA;;EAEA,SAASA,KAAK,CAACJ,IAAI,EAAE;IACnB;AACJ;AACA;;IAEI;;IAEA;IACA,OAAOA,IAAI,KAAK,EAAE,IAAI,wBAAwB,IAAIF,IAAI,CAACO,MAAM,CAACC,UAAU,GACpET,GAAG,CAACG,IAAI,CAAC,GACTJ,EAAE,CAACI,IAAI,CAAC;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}