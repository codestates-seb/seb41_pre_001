{"ast":null,"code":"/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  var code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of the basic block and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 ||\n  // Out of range\n  code > 1114111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCharCode(code);\n}","map":{"version":3,"names":["decodeNumericCharacterReference","value","base","code","Number","parseInt","String","fromCharCode"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-util-decode-numeric-character-reference/index.js"],"sourcesContent":["/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAA+B,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3D,IAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACJ,KAAK,EAAEC,IAAI,CAAC;EAEzC;EACE;EACAC,IAAI,GAAG,CAAC,IACRA,IAAI,KAAK,EAAE,IACVA,IAAI,GAAG,EAAE,IAAIA,IAAI,GAAG,EAAG;EAAI;EAC3BA,IAAI,GAAG,GAAG,IAAIA,IAAI,GAAG,GAAI;EAAI;EAC7BA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM;EAAI;EACjCA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM,IAC9B,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK,IACxB,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK;EAAI;EAC5BA,IAAI,GAAG,OAAO,EACd;IACA,OAAO,QAAQ;EACjB;EAEA,OAAOG,MAAM,CAACC,YAAY,CAACJ,IAAI,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}