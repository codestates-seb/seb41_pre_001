{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { asciiPunctuation } from 'micromark-util-character';\n\n/** @type {Construct} */\nexport var characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    effects.exit('escapeMarker');\n    return open;\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue');\n      effects.consume(code);\n      effects.exit('characterEscapeValue');\n      effects.exit('characterEscape');\n      return ok;\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["asciiPunctuation","characterEscape","name","tokenize","tokenizeCharacterEscape","effects","ok","nok","start","code","enter","consume","exit","open"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-core-commonmark/lib/character-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,gBAAgB,QAAO,0BAA0B;;AAEzD;AACA,OAAO,IAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC;AACZ,CAAC;AACD;;AAEA,SAASA,uBAAuB,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBJ,OAAO,CAACK,KAAK,CAAC,iBAAiB,CAAC;IAChCL,OAAO,CAACK,KAAK,CAAC,cAAc,CAAC;IAC7BL,OAAO,CAACM,OAAO,CAACF,IAAI,CAAC;IACrBJ,OAAO,CAACO,IAAI,CAAC,cAAc,CAAC;IAC5B,OAAOC,IAAI;EACb;EACA;;EAEA,SAASA,IAAI,CAACJ,IAAI,EAAE;IAClB,IAAIT,gBAAgB,CAACS,IAAI,CAAC,EAAE;MAC1BJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,CAAC;MACrCL,OAAO,CAACM,OAAO,CAACF,IAAI,CAAC;MACrBJ,OAAO,CAACO,IAAI,CAAC,sBAAsB,CAAC;MACpCP,OAAO,CAACO,IAAI,CAAC,iBAAiB,CAAC;MAC/B,OAAON,EAAE;IACX;IAEA,OAAOC,GAAG,CAACE,IAAI,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}