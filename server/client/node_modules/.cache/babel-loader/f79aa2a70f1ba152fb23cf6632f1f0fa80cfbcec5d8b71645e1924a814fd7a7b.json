{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport var resolver = {\n  resolveAll: createResolver()\n};\nexport var string = initializeFactory('string');\nexport var text = initializeFactory('text');\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    var self = this;\n    var constructs = this.parser.constructs[field];\n    var text = effects.attempt(constructs, start, notText);\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      } // Data.\n\n      effects.consume(code);\n      return data;\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      var list = constructs[code];\n      var index = -1;\n      if (list) {\n        while (++index < list.length) {\n          var item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    var index = -1;\n    /** @type {number|undefined} */\n\n    var enter; // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  var eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      var data = events[eventIndex - 1][1];\n      var chunks = context.sliceStream(data);\n      var index = chunks.length;\n      var bufferIndex = -1;\n      var size = 0;\n      /** @type {boolean|undefined} */\n\n      var tabs = void 0;\n      while (index--) {\n        var chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        } // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        var token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","map":{"version":3,"names":["resolver","resolveAll","createResolver","string","initializeFactory","text","field","tokenize","initializeText","resolveAllLineSuffixes","undefined","effects","self","constructs","parser","attempt","start","notText","code","atBreak","consume","enter","data","exit","list","index","length","item","previous","call","extraResolver","resolveAllText","events","context","type","end","splice","eventIndex","chunks","sliceStream","bufferIndex","size","tabs","chunk","charCodeAt","token","line","column","offset","_index","_bufferIndex","Object","assign"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark/lib/initialize/text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}