{"ast":null,"code":"import _classCallCheck from \"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { regex } from './regex.js';\nvar own = Object.hasOwnProperty;\n\n/**\n * Slugger.\n */\nvar BananaSlug = /*#__PURE__*/function () {\n  /**\n   * Create a new slug class.\n   */\n  function BananaSlug() {\n    _classCallCheck(this, BananaSlug);\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences;\n    this.reset();\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  _createClass(BananaSlug, [{\n    key: \"slug\",\n    value: function slug(value, maintainCase) {\n      var self = this;\n      var result = _slug(value, maintainCase === true);\n      var originalSlug = result;\n      while (own.call(self.occurrences, result)) {\n        self.occurrences[originalSlug]++;\n        result = originalSlug + '-' + self.occurrences[originalSlug];\n      }\n      self.occurrences[result] = 0;\n      return result;\n    }\n\n    /**\n     * Reset - Forget all previous slugs\n     *\n     * @return void\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.occurrences = Object.create(null);\n    }\n  }]);\n  return BananaSlug;\n}();\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport { BananaSlug as default };\nfunction _slug(value, maintainCase) {\n  if (typeof value !== 'string') return '';\n  if (!maintainCase) value = value.toLowerCase();\n  return value.replace(regex, '').replace(/ /g, '-');\n}\nexport { _slug as slug };","map":{"version":3,"names":["regex","own","Object","hasOwnProperty","BananaSlug","occurrences","reset","value","maintainCase","self","result","slug","originalSlug","call","create","toLowerCase","replace"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/github-slugger/index.js"],"sourcesContent":["import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,YAAY;AAElC,IAAMC,GAAG,GAAGC,MAAM,CAACC,cAAc;;AAEjC;AACA;AACA;AAFA,IAGqBC,UAAU;EAC7B;AACF;AACA;EACE,sBAAe;IAAA;IACb;IACA;IACA,IAAI,CAACC,WAAW;IAEhB,IAAI,CAACC,KAAK,EAAE;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAbE;IAAA;IAAA,OAcA,cAAMC,KAAK,EAAEC,YAAY,EAAE;MACzB,IAAMC,IAAI,GAAG,IAAI;MACjB,IAAIC,MAAM,GAAGC,KAAI,CAACJ,KAAK,EAAEC,YAAY,KAAK,IAAI,CAAC;MAC/C,IAAMI,YAAY,GAAGF,MAAM;MAE3B,OAAOT,GAAG,CAACY,IAAI,CAACJ,IAAI,CAACJ,WAAW,EAAEK,MAAM,CAAC,EAAE;QACzCD,IAAI,CAACJ,WAAW,CAACO,YAAY,CAAC,EAAE;QAChCF,MAAM,GAAGE,YAAY,GAAG,GAAG,GAAGH,IAAI,CAACJ,WAAW,CAACO,YAAY,CAAC;MAC9D;MAEAH,IAAI,CAACJ,WAAW,CAACK,MAAM,CAAC,GAAG,CAAC;MAE5B,OAAOA,MAAM;IACf;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,iBAAS;MACP,IAAI,CAACL,WAAW,GAAGH,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;IACxC;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAnDqBV,UAAU;AAiExB,SAASO,KAAI,CAAEJ,KAAK,EAAEC,YAAY,EAAE;EACzC,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE,OAAO,EAAE;EACxC,IAAI,CAACC,YAAY,EAAED,KAAK,GAAGA,KAAK,CAACQ,WAAW,EAAE;EAC9C,OAAOR,KAAK,CAACS,OAAO,CAAChB,KAAK,EAAE,EAAE,CAAC,CAACgB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AACpD;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}