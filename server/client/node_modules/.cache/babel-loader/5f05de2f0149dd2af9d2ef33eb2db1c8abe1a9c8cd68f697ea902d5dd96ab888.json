{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { labelEnd } from './label-end.js';\n/** @type {Construct} */\n\nexport var labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  var self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n    return nok(code);\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["labelEnd","labelStartImage","name","tokenize","tokenizeLabelStartImage","resolveAll","effects","ok","nok","self","start","code","enter","consume","exit","open","after","parser","constructs"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-core-commonmark/lib/label-start-image.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAQ,QAAO,gBAAgB;AACvC;;AAEA,OAAO,IAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC,uBAAuB;EACjCC,UAAU,EAAEL,QAAQ,CAACK;AACvB,CAAC;AACD;;AAEA,SAASD,uBAAuB,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,IAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBL,OAAO,CAACM,KAAK,CAAC,YAAY,CAAC;IAC3BN,OAAO,CAACM,KAAK,CAAC,kBAAkB,CAAC;IACjCN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;IACrBL,OAAO,CAACQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,OAAOC,IAAI;EACb;EACA;;EAEA,SAASA,IAAI,CAACJ,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACfL,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;MAC5BN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;MACrBL,OAAO,CAACQ,IAAI,CAAC,aAAa,CAAC;MAC3BR,OAAO,CAACQ,IAAI,CAAC,YAAY,CAAC;MAC1B,OAAOE,KAAK;IACd;IAEA,OAAOR,GAAG,CAACG,IAAI,CAAC;EAClB;EACA;;EAEA,SAASK,KAAK,CAACL,IAAI,EAAE;IACnB;AACJ;AACA;;IAEI;;IAEA;IACA,OAAOA,IAAI,KAAK,EAAE,IAAI,wBAAwB,IAAIF,IAAI,CAACQ,MAAM,CAACC,UAAU,GACpEV,GAAG,CAACG,IAAI,CAAC,GACTJ,EAAE,CAACI,IAAI,CAAC;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}