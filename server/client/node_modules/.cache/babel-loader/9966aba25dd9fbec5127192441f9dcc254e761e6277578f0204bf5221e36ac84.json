{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nqore.displayName = 'qore';\nqore.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function qore(Prism) {\n  Prism.register(refractorClike);\n  Prism.languages.qore = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    // Overridden to allow unescaped multi-line strings\n    string: {\n      pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    keyword: /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\$?\\b(?!\\d)\\w+(?=\\()/,\n    number: /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n      lookbehind: true\n    },\n    variable: /\\$(?!\\d)\\w+\\b/\n  });\n}","map":{"version":3,"names":["refractorClike","qore","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","string","greedy","keyword","boolean","function","number","operator","variable"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/qore.js"],"sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nqore.displayName = 'qore'\nqore.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function qore(Prism) {\n  Prism.register(refractorClike)\n  Prism.languages.qore = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    // Overridden to allow unescaped multi-line strings\n    string: {\n      pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\$?\\b(?!\\d)\\w+(?=\\()/,\n    number:\n      /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n    operator: {\n      pattern:\n        /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n      lookbehind: true\n    },\n    variable: /\\$(?!\\d)\\w+\\b/\n  })\n}\n"],"mappings":"AAAA;AACA,OAAOA,cAAc,MAAM,YAAY;AACvCC,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;;AAEjB;AACA,eAAe,SAASF,IAAI,CAACG,KAAK,EAAE;EAClCA,KAAK,CAACC,QAAQ,CAACL,cAAc,CAAC;EAC9BI,KAAK,CAACE,SAAS,CAACL,IAAI,GAAGG,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE;IACrDC,OAAO,EAAE;MACPC,OAAO,EAAE,4CAA4C;MACrDC,UAAU,EAAE;IACd,CAAC;IACD;IACAC,MAAM,EAAE;MACNF,OAAO,EAAE,kCAAkC;MAC3CG,MAAM,EAAE;IACV,CAAC;IACDC,OAAO,EACL,sdAAsd;IACxdC,OAAO,EAAE,qBAAqB;IAC9BC,QAAQ,EAAE,sBAAsB;IAChCC,MAAM,EACJ,4GAA4G;IAC9GC,QAAQ,EAAE;MACRR,OAAO,EACL,6FAA6F;MAC/FC,UAAU,EAAE;IACd,CAAC;IACDQ,QAAQ,EAAE;EACZ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}