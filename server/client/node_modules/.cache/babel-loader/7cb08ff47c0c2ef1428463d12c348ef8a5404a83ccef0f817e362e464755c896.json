{"ast":null,"code":"/*\r\n * console.js: Transport for outputting to the console\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\n\nvar events = require('events'),\n  os = require('os'),\n  util = require('util'),\n  common = require('../common'),\n  Transport = require('./transport').Transport;\n\n//\n// ### function Console (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Console transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\nvar Console = exports.Console = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.json = options.json || false;\n  this.colorize = options.colorize || false;\n  this.prettyPrint = options.prettyPrint || false;\n  this.timestamp = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.label = options.label || null;\n  this.logstash = options.logstash || false;\n  this.depth = options.depth || null;\n  this.align = options.align || false;\n  this.stderrLevels = setStderrLevels(options.stderrLevels, options.debugStdout);\n  this.eol = options.eol || os.EOL;\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  }\n\n  //\n  // Convert stderrLevels into an Object for faster key-lookup times than an Array.\n  //\n  // For backwards compatibility, stderrLevels defaults to ['error', 'debug']\n  // or ['error'] depending on whether options.debugStdout is true.\n  //\n  function setStderrLevels(levels, debugStdout) {\n    var defaultMsg = 'Cannot have non-string elements in stderrLevels Array';\n    if (debugStdout) {\n      if (levels) {\n        //\n        // Don't allow setting both debugStdout and stderrLevels together,\n        // since this could cause behaviour a programmer might not expect.\n        //\n        throw new Error('Cannot set debugStdout and stderrLevels together');\n      }\n      return common.stringArrayToSet(['error'], defaultMsg);\n    }\n    if (!levels) {\n      return common.stringArrayToSet(['error', 'debug'], defaultMsg);\n    } else if (!Array.isArray(levels)) {\n      throw new Error('Cannot set stderrLevels to type other than Array');\n    }\n    return common.stringArrayToSet(levels, defaultMsg);\n  }\n  ;\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(Console, Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nConsole.prototype.name = 'console';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nConsole.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n  var self = this,\n    output;\n  output = common.log({\n    colorize: this.colorize,\n    json: this.json,\n    level: level,\n    message: msg,\n    meta: meta,\n    stringify: this.stringify,\n    timestamp: this.timestamp,\n    showLevel: this.showLevel,\n    prettyPrint: this.prettyPrint,\n    raw: this.raw,\n    label: this.label,\n    logstash: this.logstash,\n    depth: this.depth,\n    formatter: this.formatter,\n    align: this.align,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n  if (this.stderrLevels[level]) {\n    process.stderr.write(output + this.eol);\n  } else {\n    process.stdout.write(output + this.eol);\n  }\n\n  //\n  // Emit the `logged` event immediately because the event loop\n  // will not exit until `process.stdout` has drained anyway.\n  //\n  self.emit('logged');\n  callback(null, true);\n};","map":{"version":3,"names":["events","require","os","util","common","Transport","Console","exports","options","call","json","colorize","prettyPrint","timestamp","showLevel","undefined","label","logstash","depth","align","stderrLevels","setStderrLevels","debugStdout","eol","EOL","stringify","obj","JSON","levels","defaultMsg","Error","stringArrayToSet","Array","isArray","inherits","prototype","name","log","level","msg","meta","callback","silent","self","output","message","raw","formatter","humanReadableUnhandledException","process","stderr","write","stdout","emit"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/transports/console.js"],"sourcesContent":["/*\r\n * console.js: Transport for outputting to the console\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\r\n\r\nvar events = require('events'),\r\n    os = require('os'),\r\n    util = require('util'),\r\n    common = require('../common'),\r\n    Transport = require('./transport').Transport;\r\n\r\n//\r\n// ### function Console (options)\r\n// #### @options {Object} Options for this instance.\r\n// Constructor function for the Console transport object responsible\r\n// for persisting log messages and metadata to a terminal or TTY.\r\n//\r\nvar Console = exports.Console = function (options) {\r\n  Transport.call(this, options);\r\n  options = options || {};\r\n\r\n  this.json         = options.json        || false;\r\n  this.colorize     = options.colorize    || false;\r\n  this.prettyPrint  = options.prettyPrint || false;\r\n  this.timestamp    = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\r\n  this.showLevel    = options.showLevel === undefined ? true : options.showLevel;\r\n  this.label        = options.label       || null;\r\n  this.logstash     = options.logstash    || false;\r\n  this.depth        = options.depth       || null;\r\n  this.align        = options.align       || false;\r\n  this.stderrLevels = setStderrLevels(options.stderrLevels, options.debugStdout);\r\n  this.eol          = options.eol   || os.EOL;\r\n\r\n  if (this.json) {\r\n    this.stringify = options.stringify || function (obj) {\r\n      return JSON.stringify(obj, null, 2);\r\n    };\r\n  }\r\n\r\n  //\r\n  // Convert stderrLevels into an Object for faster key-lookup times than an Array.\r\n  //\r\n  // For backwards compatibility, stderrLevels defaults to ['error', 'debug']\r\n  // or ['error'] depending on whether options.debugStdout is true.\r\n  //\r\n  function setStderrLevels (levels, debugStdout) {\r\n    var defaultMsg = 'Cannot have non-string elements in stderrLevels Array';\r\n    if (debugStdout) {\r\n      if (levels) {\r\n        //\r\n        // Don't allow setting both debugStdout and stderrLevels together,\r\n        // since this could cause behaviour a programmer might not expect.\r\n        //\r\n        throw new Error('Cannot set debugStdout and stderrLevels together');\r\n      }\r\n\r\n      return common.stringArrayToSet(['error'], defaultMsg);\r\n    }\r\n\r\n    if (!levels) {\r\n      return common.stringArrayToSet(['error', 'debug'], defaultMsg);\r\n    } else if (!(Array.isArray(levels))) {\r\n      throw new Error('Cannot set stderrLevels to type other than Array');\r\n    }\r\n\r\n    return common.stringArrayToSet(levels, defaultMsg);\r\n  };\r\n};\r\n\r\n//\r\n// Inherit from `winston.Transport`.\r\n//\r\nutil.inherits(Console, Transport);\r\n\r\n//\r\n// Expose the name of this Transport on the prototype\r\n//\r\nConsole.prototype.name = 'console';\r\n\r\n//\r\n// ### function log (level, msg, [meta], callback)\r\n// #### @level {string} Level at which to log the message.\r\n// #### @msg {string} Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Core logging method exposed to Winston. Metadata is optional.\r\n//\r\nConsole.prototype.log = function (level, msg, meta, callback) {\r\n  if (this.silent) {\r\n    return callback(null, true);\r\n  }\r\n\r\n  var self = this,\r\n      output;\r\n\r\n  output = common.log({\r\n    colorize:    this.colorize,\r\n    json:        this.json,\r\n    level:       level,\r\n    message:     msg,\r\n    meta:        meta,\r\n    stringify:   this.stringify,\r\n    timestamp:   this.timestamp,\r\n    showLevel:   this.showLevel,\r\n    prettyPrint: this.prettyPrint,\r\n    raw:         this.raw,\r\n    label:       this.label,\r\n    logstash:    this.logstash,\r\n    depth:       this.depth,\r\n    formatter:   this.formatter,\r\n    align:       this.align,\r\n    humanReadableUnhandledException: this.humanReadableUnhandledException\r\n  });\r\n\r\n  if (this.stderrLevels[level]) {\r\n    process.stderr.write(output + this.eol);\r\n  } else {\r\n    process.stdout.write(output + this.eol);\r\n  }\r\n\r\n  //\r\n  // Emit the `logged` event immediately because the event loop\r\n  // will not exit until `process.stdout` has drained anyway.\r\n  //\r\n  self.emit('logged');\r\n  callback(null, true);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}