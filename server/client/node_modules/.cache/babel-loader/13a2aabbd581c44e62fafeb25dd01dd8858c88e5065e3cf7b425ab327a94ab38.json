{"ast":null,"code":"/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport { ccount } from 'ccount';\nimport { findAndReplace } from 'mdast-util-find-and-replace';\nimport { unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nvar inConstruct = 'phrasing';\nvar notInConstruct = ['autolink', 'link', 'image', 'label'];\n\n/** @type {FromMarkdownExtension} */\nexport var gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n};\n\n/** @type {ToMarkdownExtension} */\nexport var gfmAutolinkLiteralToMarkdown = {\n  unsafe: [{\n    character: '@',\n    before: '[+\\\\-.\\\\w]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct: inConstruct,\n    notInConstruct: notInConstruct\n  }, {\n    character: '.',\n    before: '[Ww]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct: inConstruct,\n    notInConstruct: notInConstruct\n  }, {\n    character: ':',\n    before: '[ps]',\n    after: '\\\\/',\n    inConstruct: inConstruct,\n    notInConstruct: notInConstruct\n  }]\n};\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  var node = /** @type {Link} */this.stack[this.stack.length - 1];\n  node.url = 'http://' + this.sliceSerialize(token);\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl], [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  var prefix = '';\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false;\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n  var parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n\n  /** @type {PhrasingContent} */\n  var result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n  if (parts[1]) {\n    return [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n  return result;\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n  // Not an expected previous character.\n  !previous(match, true) ||\n  // Label ends in not allowed character.\n  /[_-\\d]$/.test(label)) {\n    return false;\n  }\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  var parts = domain.split('.');\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  var trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n  /** @type {number} */\n  var closingParenIndex;\n  /** @type {number} */\n  var openingParens;\n  /** @type {number} */\n  var closingParens;\n  /** @type {string|undefined} */\n  var trail;\n  if (trailExec) {\n    url = url.slice(0, trailExec.index);\n    trail = trailExec[0];\n    closingParenIndex = trail.indexOf(')');\n    openingParens = ccount(url, '(');\n    closingParens = ccount(url, ')');\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1);\n      trail = trail.slice(closingParenIndex + 1);\n      closingParenIndex = trail.indexOf(')');\n      closingParens++;\n    }\n  }\n  return [url, trail];\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  var code = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || unicodeWhitespace(code) || unicodePunctuation(code)) && (!email || code !== 47);\n}","map":{"version":3,"names":["ccount","findAndReplace","unicodePunctuation","unicodeWhitespace","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","character","before","after","token","type","title","url","children","config","autolinkProtocol","call","data","node","stack","length","sliceSerialize","autolinkEmail","tree","findUrl","findEmail","ignore","_","protocol","domain","path","match","prefix","previous","test","isCorrectDomain","parts","splitUrl","result","value","atext","label","split","trailExec","exec","closingParenIndex","openingParens","closingParens","trail","slice","index","indexOf","email","code","input","charCodeAt"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/mdast-util-gfm-autolink-literal/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}