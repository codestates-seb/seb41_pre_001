{"ast":null,"code":"var _jsxFileName = \"/home/kty/workspace/seb41_pre_001/client/src/components/ModalEdit.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Modal from 'react-modal';\nimport { ColumnDiv } from '../styles/StyledStore';\nimport CommonButton, { BUTTON_TYPE_USER, BUTTON_TYPE_USER_EDIT } from './CommonButton';\nimport LabelInput from './LabelInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n//불러오는측에서\n// const [modalIsOpen, setIsOpen] = useState(false);\n//ReactModal.setAppElement('#app');\nfunction ModalEdit(_ref) {\n  _s();\n  let {\n    editModalIsOpen,\n    setIsEditModalOpen\n  } = _ref;\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n\n  //  let subtitle;\n  // function afterOpenModal() {\n  //   // references are now sync'd and can be accessed.\n  //   subtitle.style.color = '#f00';\n  // }\n\n  const handleName = e => {\n    setName(e.target.value);\n  };\n  const handleEmail = e => {\n    setPassword(e.target.value);\n  };\n  const handleEmailConfirm = e => {\n    setPasswordConfirm(e.target.value);\n  };\n  const handleEdit = () => {\n    if (name.length === 0 || password.length === 0 || passwordConfirm === 0) {\n      alert('empty is not allowed');\n      return false;\n    }\n    if (password !== passwordConfirm) {\n      alert('password is not matched');\n      return false;\n    }\n    closeModal();\n  };\n  const closeModal = () => {\n    setIsEditModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"modalContainer\",\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: editModalIsOpen\n      /*  onAfterOpen={afterOpenModal} */,\n      onRequestClose: closeModal,\n      style: customStyles,\n      contentLabel: \"Edit account modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Account edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ColumnDiv, {\n        children: [/*#__PURE__*/_jsxDEV(LabelInput, {\n          label: 'Display Name',\n          value: name,\n          onChange: handleName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LabelInput, {\n          label: 'Password',\n          value: password,\n          type: 'password',\n          onChange: handleEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LabelInput, {\n          label: 'Password Confirm',\n          value: passwordConfirm,\n          type: 'password',\n          onChange: handleEmailConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommonButton, {\n        buttonType: BUTTON_TYPE_USER_EDIT,\n        cont: 'Edit',\n        onClick: handleEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommonButton, {\n        buttonType: BUTTON_TYPE_USER,\n        cont: 'Close',\n        onClick: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(ModalEdit, \"TRSVXKy+Enoi9vp86d9imKhMZ1g=\");\n_c = ModalEdit;\nexport default ModalEdit;\nvar _c;\n$RefreshReg$(_c, \"ModalEdit\");","map":{"version":3,"names":["useState","Modal","ColumnDiv","CommonButton","BUTTON_TYPE_USER","BUTTON_TYPE_USER_EDIT","LabelInput","customStyles","content","top","left","right","bottom","marginRight","transform","ModalEdit","editModalIsOpen","setIsEditModalOpen","name","setName","password","setPassword","passwordConfirm","setPasswordConfirm","handleName","e","target","value","handleEmail","handleEmailConfirm","handleEdit","length","alert","closeModal"],"sources":["/home/kty/workspace/seb41_pre_001/client/src/components/ModalEdit.js"],"sourcesContent":["import { useState } from 'react';\nimport Modal from 'react-modal';\nimport { ColumnDiv } from '../styles/StyledStore';\nimport CommonButton, {\n  BUTTON_TYPE_USER,\n  BUTTON_TYPE_USER_EDIT,\n} from './CommonButton';\nimport LabelInput from './LabelInput';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\n//불러오는측에서\n// const [modalIsOpen, setIsOpen] = useState(false);\n//ReactModal.setAppElement('#app');\nfunction ModalEdit({ editModalIsOpen, setIsEditModalOpen }) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n\n  //  let subtitle;\n  // function afterOpenModal() {\n  //   // references are now sync'd and can be accessed.\n  //   subtitle.style.color = '#f00';\n  // }\n\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleEmail = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const handleEmailConfirm = (e) => {\n    setPasswordConfirm(e.target.value);\n  };\n\n  const handleEdit = () => {\n    if (name.length === 0 || password.length === 0 || passwordConfirm === 0) {\n      alert('empty is not allowed');\n      return false;\n    }\n    if (password !== passwordConfirm) {\n      alert('password is not matched');\n      return false;\n    }\n    closeModal();\n  };\n\n  const closeModal = () => {\n    setIsEditModalOpen(false);\n  };\n  return (\n    <div id=\"modalContainer\">\n      <Modal\n        isOpen={editModalIsOpen}\n        /*  onAfterOpen={afterOpenModal} */\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Edit account modal\"\n      >\n        <h2 /*  ref={(_subtitle) => (subtitle = _subtitle)} */>Edit Account</h2>\n        <div>Account edit</div>\n        <ColumnDiv>\n          <LabelInput\n            label={'Display Name'}\n            value={name}\n            onChange={handleName}\n          />\n          <LabelInput\n            label={'Password'}\n            value={password}\n            type={'password'}\n            onChange={handleEmail}\n          />\n          <LabelInput\n            label={'Password Confirm'}\n            value={passwordConfirm}\n            type={'password'}\n            onChange={handleEmailConfirm}\n          />\n        </ColumnDiv>\n        <CommonButton\n          buttonType={BUTTON_TYPE_USER_EDIT}\n          cont={'Edit'}\n          onClick={handleEdit}\n        />\n        <CommonButton\n          buttonType={BUTTON_TYPE_USER}\n          cont={'Close'}\n          onClick={closeModal}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalEdit;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}