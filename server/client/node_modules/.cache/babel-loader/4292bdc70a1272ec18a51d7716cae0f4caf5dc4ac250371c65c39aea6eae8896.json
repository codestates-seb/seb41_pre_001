{"ast":null,"code":"/*!\n * @uiw/copy-to-clipboard v1.0.12\n * Copy to clipboard.\n * \n * Copyright (c) 2021 Kenny Wang\n * https://github.com/uiwjs/copy-to-clipboard.git\n * \n * Licensed under the MIT license.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.copyTextToClipboard = factory());\n})(this, function () {\n  'use strict';\n\n  /**\n   * *** This styling is an extra step which is likely not required. ***\n   * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\n   * \n   * Why is it here? To ensure:\n   * \n   * 1. the element is able to have focus and selection.\n   * 2. if element was to flash render it has minimal visual impact.\n   * 3. less flakyness with selection and copying which **might** occur if\n   *     the textarea element is not visible.\n   *\n   *   The likelihood is the element won't even render, not even a flash,\n   *   so some of these are just precautions. However in IE the element\n   *   is visible whilst the popup box asking the user for permission for\n   *   the web page to copy to the clipboard.\n   *  \n   *   Place in top-left corner of screen regardless of scroll position.\n   *\n   * @typedef CopyTextToClipboard\n   * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\n   * @returns {void}\n   * \n   * @param {string} text \n   * @param {CopyTextToClipboard} cb \n   */\n  function copyTextToClipboard(text, cb) {\n    var el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style = {\n      position: 'absolute',\n      left: '-9999px'\n    };\n    document.body.appendChild(el);\n    var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n    el.select();\n    var isCopy = false;\n    try {\n      var successful = document.execCommand('copy');\n      isCopy = !!successful;\n    } catch (err) {\n      isCopy = false;\n    }\n    document.body.removeChild(el);\n    if (selected && document.getSelection) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    cb && cb(isCopy);\n  }\n  return copyTextToClipboard;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;EAyBe,SAASA,mBAAmB,CAACC,IAAI,EAAEC,EAAE,EAAE;IACpD,IAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;IAC7CF,EAAE,CAACG,KAAK,GAAGL,IAAI;IACfE,EAAE,CAACI,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC;IAC/BJ,EAAE,CAACK,KAAK,GAAG;MACTC,QAAQ,EAAE,UAAU;MACpBC,IAAI,EAAE;IACV;IACEN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,EAAE,CAAC;IAC7B,IAAMU,QAAQ,GAAGT,QAAQ,CAACU,YAAY,EAAE,CAACC,UAAU,GAAG,CAAC,GAAGX,QAAQ,CAACU,YAAY,EAAE,CAACE,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK;IACvGb,EAAE,CAACc,MAAM,EAAE;IACX,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAI;MACF,IAAMC,UAAU,GAAGf,QAAQ,CAACgB,WAAW,CAAC,MAAM,CAAC;MAC/CF,MAAM,GAAG,CAAC,CAACC,UAAU;IACzB,CAAG,CAAC,OAAOE,GAAG,EAAE;MACZH,MAAM,GAAG,KAAK;IAClB;IACEd,QAAQ,CAACO,IAAI,CAACW,WAAW,CAACnB,EAAE,CAAC;IAC7B,IAAIU,QAAQ,IAAIT,QAAQ,CAACU,YAAY,EAAE;MACrCV,QAAQ,CAACU,YAAY,EAAE,CAACS,eAAe,EAAE;MACzCnB,QAAQ,CAACU,YAAY,EAAE,CAACU,QAAQ,CAACX,QAAQ,CAAC;IAC9C;IACEX,EAAE,IAAIA,EAAE,CAACgB,MAAM,CAAC;EAClB","names":["copyTextToClipboard","text","cb","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","isCopy","successful","execCommand","err","removeChild","removeAllRanges","addRange"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/copy-to-clipboard/src/main.js"],"sourcesContent":["/**\n * *** This styling is an extra step which is likely not required. ***\n * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\n * \n * Why is it here? To ensure:\n * \n * 1. the element is able to have focus and selection.\n * 2. if element was to flash render it has minimal visual impact.\n * 3. less flakyness with selection and copying which **might** occur if\n *     the textarea element is not visible.\n *\n *   The likelihood is the element won't even render, not even a flash,\n *   so some of these are just precautions. However in IE the element\n *   is visible whilst the popup box asking the user for permission for\n *   the web page to copy to the clipboard.\n *  \n *   Place in top-left corner of screen regardless of scroll position.\n *\n * @typedef CopyTextToClipboard\n * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\n * @returns {void}\n * \n * @param {string} text \n * @param {CopyTextToClipboard} cb \n */\nexport default function copyTextToClipboard(text, cb) {\n  const el = document.createElement('textarea');\n  el.value = text;\n  el.setAttribute('readonly', '');\n  el.style = {\n    position: 'absolute',\n    left: '-9999px',\n  }\n  document.body.appendChild(el);\n  const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n  el.select();\n  let isCopy = false;\n  try {\n    const successful = document.execCommand('copy');\n    isCopy = !!successful;\n  } catch (err) {\n    isCopy = false;\n  }\n  document.body.removeChild(el);\n  if (selected && document.getSelection) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n  cb && cb(isCopy);\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}