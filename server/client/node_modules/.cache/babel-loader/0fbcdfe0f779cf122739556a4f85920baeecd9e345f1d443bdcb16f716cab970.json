{"ast":null,"code":"// @ts-nocheck\nplantUml.displayName = 'plant-uml';\nplantUml.aliases = ['plantuml'];\n\n/** @type {import('../core.js').Syntax} */\nexport default function plantUml(Prism) {\n  ;\n  (function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/;\n    var arrowAttr = /\\[[^[\\]]*\\]/.source;\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source;\n    var arrowBody = '(?:-+' + arrowDirection + '-+|\\\\.+' + arrowDirection + '\\\\.+|-+(?:' + arrowAttr + '-*)?|' + arrowAttr + '-+|\\\\.+(?:' + arrowAttr + '\\\\.*)?|' + arrowAttr + '\\\\.+)';\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source;\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source;\n    var arrowPrefix = /[[?]?[ox]?/.source;\n    var arrowSuffix = /[ox]?[\\]?]?/.source;\n    var arrow = arrowPrefix + '(?:' + arrowBody + arrowRight + '|' + arrowLeft + arrowBody + '(?:' + arrowRight + ')?' + ')' + arrowSuffix;\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(/(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [{\n        pattern: /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n        lookbehind: true,\n        greedy: true\n      }, /\\b(?:elseif|equals|not|while)(?=\\s*\\()/, /\\b(?:as|is|then)\\b/],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    };\n    Prism.languages['plant-uml'].arrow.inside.expression.inside = Prism.languages['plant-uml'];\n    Prism.languages['plantuml'] = Prism.languages['plant-uml'];\n  })(Prism);\n}","map":{"version":3,"names":["plantUml","displayName","aliases","Prism","variable","arrowAttr","source","arrowDirection","arrowBody","arrowLeft","arrowRight","arrowPrefix","arrowSuffix","arrow","languages","comment","pattern","lookbehind","greedy","preprocessor","alias","inside","delimiter","RegExp","expression","punctuation","string","text","keyword","divider","time","color"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/plant-uml.js"],"sourcesContent":["// @ts-nocheck\nplantUml.displayName = 'plant-uml'\nplantUml.aliases = ['plantuml']\n\n/** @type {import('../core.js').Syntax} */\nexport default function plantUml(Prism) {\n  ;(function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/\n    var arrowAttr = /\\[[^[\\]]*\\]/.source\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source\n    var arrowBody =\n      '(?:-+' +\n      arrowDirection +\n      '-+|\\\\.+' +\n      arrowDirection +\n      '\\\\.+|-+(?:' +\n      arrowAttr +\n      '-*)?|' +\n      arrowAttr +\n      '-+|\\\\.+(?:' +\n      arrowAttr +\n      '\\\\.*)?|' +\n      arrowAttr +\n      '\\\\.+)'\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source\n    var arrowPrefix = /[[?]?[ox]?/.source\n    var arrowSuffix = /[ox]?[\\]?]?/.source\n    var arrow =\n      arrowPrefix +\n      '(?:' +\n      arrowBody +\n      arrowRight +\n      '|' +\n      arrowLeft +\n      arrowBody +\n      '(?:' +\n      arrowRight +\n      ')?' +\n      ')' +\n      arrowSuffix\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(\n          /(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [\n        {\n          pattern:\n            /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n          lookbehind: true,\n          greedy: true\n        },\n        /\\b(?:elseif|equals|not|while)(?=\\s*\\()/,\n        /\\b(?:as|is|then)\\b/\n      ],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    }\n    Prism.languages['plant-uml'].arrow.inside.expression.inside =\n      Prism.languages['plant-uml']\n    Prism.languages['plantuml'] = Prism.languages['plant-uml']\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}