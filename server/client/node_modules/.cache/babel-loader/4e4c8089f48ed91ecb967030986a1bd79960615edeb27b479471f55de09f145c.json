{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nreason.displayName = 'reason';\nreason.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function reason(Prism) {\n  Prism.register(refractorClike);\n  Prism.languages.reason = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    'class-name': /\\b[A-Z]\\w*/,\n    keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n  });\n  Prism.languages.insertBefore('reason', 'class-name', {\n    char: {\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n      greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n      pattern: /\\b[a-z]\\w*(?=::)/,\n      alias: 'symbol'\n    }\n  }); // We can't match functions property, so let's not even try.\n\n  delete Prism.languages.reason.function;\n}","map":{"version":3,"names":["refractorClike","reason","displayName","aliases","Prism","register","languages","extend","string","pattern","greedy","keyword","operator","insertBefore","char","constructor","label","alias","function"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/reason.js"],"sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nreason.displayName = 'reason'\nreason.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function reason(Prism) {\n  Prism.register(refractorClike)\n  Prism.languages.reason = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    'class-name': /\\b[A-Z]\\w*/,\n    keyword:\n      /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator:\n      /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n  })\n  Prism.languages.insertBefore('reason', 'class-name', {\n    char: {\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n      greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n      pattern: /\\b[a-z]\\w*(?=::)/,\n      alias: 'symbol'\n    }\n  }) // We can't match functions property, so let's not even try.\n\n  delete Prism.languages.reason.function\n}\n"],"mappings":"AAAA;AACA,OAAOA,cAAc,MAAM,YAAY;AACvCC,MAAM,CAACC,WAAW,GAAG,QAAQ;AAC7BD,MAAM,CAACE,OAAO,GAAG,EAAE;;AAEnB;AACA,eAAe,SAASF,MAAM,CAACG,KAAK,EAAE;EACpCA,KAAK,CAACC,QAAQ,CAACL,cAAc,CAAC;EAC9BI,KAAK,CAACE,SAAS,CAACL,MAAM,GAAGG,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE;IACvDC,MAAM,EAAE;MACNC,OAAO,EAAE,qCAAqC;MAC9CC,MAAM,EAAE;IACV,CAAC;IACD;IACA,YAAY,EAAE,YAAY;IAC1BC,OAAO,EACL,2RAA2R;IAC7RC,QAAQ,EACN;EACJ,CAAC,CAAC;EACFR,KAAK,CAACE,SAAS,CAACO,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE;IACnDC,IAAI,EAAE;MACJL,OAAO,EAAE,+DAA+D;MACxEC,MAAM,EAAE;IACV,CAAC;IACD;IACAK,WAAW,EAAE,uBAAuB;IACpCC,KAAK,EAAE;MACLP,OAAO,EAAE,kBAAkB;MAC3BQ,KAAK,EAAE;IACT;EACF,CAAC,CAAC,EAAC;;EAEH,OAAOb,KAAK,CAACE,SAAS,CAACL,MAAM,CAACiB,QAAQ;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}