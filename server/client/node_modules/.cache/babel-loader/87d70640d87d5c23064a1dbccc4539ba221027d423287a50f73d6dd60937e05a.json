{"ast":null,"code":"/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').PropertyValue} PropertyValue\n * @typedef {import('./types.js').Parent} Parent\n */\n\nimport { svg, find } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { stringifyEntities } from 'stringify-entities';\nimport { ccount } from 'ccount';\nimport { constants } from './constants.js';\nimport { comment } from './comment.js';\nimport { doctype } from './doctype.js';\nimport { raw } from './raw.js';\nimport { text } from './text.js';\n\n/**\n * @type {Object.<string, Handle>}\n */\nconst handlers = {\n  comment,\n  doctype,\n  element,\n  // @ts-ignore `raw` is nonstandard\n  raw,\n  // @ts-ignore `root` is a parent.\n  root: all,\n  text\n};\nconst own = {}.hasOwnProperty;\n\n/**\n * @type {Handle}\n */\nexport function one(ctx, node, index, parent) {\n  if (!node || !node.type) {\n    throw new Error('Expected node, not `' + node + '`');\n  }\n  if (!own.call(handlers, node.type)) {\n    throw new Error('Cannot compile unknown node `' + node.type + '`');\n  }\n  return handlers[node.type](ctx, node, index, parent);\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @type {Handle}\n * @param {Parent} parent\n */\nexport function all(ctx, parent) {\n  /** @type {Array.<string>} */\n  const results = [];\n  const children = parent && parent.children || [];\n  let index = -1;\n  while (++index < children.length) {\n    results[index] = one(ctx, children[index], index, parent);\n  }\n  return results.join('');\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function element(ctx, node, index, parent) {\n  const schema = ctx.schema;\n  const omit = schema.space === 'svg' ? undefined : ctx.omit;\n  let selfClosing = schema.space === 'svg' ? ctx.closeEmpty : ctx.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array.<string>} */\n  const parts = [];\n  /** @type {string} */\n  let last;\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg;\n  }\n  const attrs = serializeAttributes(ctx, node.properties);\n  const content = all(ctx, schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  ctx.schema = schema;\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false;\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1);\n      if (!ctx.tightClose || last === '/' || last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n      parts.push('/');\n    }\n    parts.push('>');\n  }\n  parts.push(content);\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n  return parts.join('');\n}\n\n/**\n * @param {Context} ctx\n * @param {Properties} props\n * @returns {string}\n */\nfunction serializeAttributes(ctx, props) {\n  /** @type {Array.<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n  let key;\n  /** @type {string} */\n  let value;\n  /** @type {string} */\n  let last;\n  for (key in props) {\n    if (props[key] !== undefined && props[key] !== null) {\n      value = serializeAttribute(ctx, key, props[key]);\n      if (value) values.push(value);\n    }\n  }\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null;\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n  return values.join('');\n}\n\n/**\n * @param {Context} ctx\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(ctx, key, value) {\n  const info = find(ctx.schema, key);\n  let quote = ctx.quote;\n  /** @type {string} */\n  let result;\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {\n    return '';\n  }\n  const name = stringifyEntities(info.attribute, Object.assign({}, ctx.entities, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n  }));\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name;\n  value = typeof value === 'object' && 'length' in value ?\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  (info.commaSeparated ? commas : spaces)(value, {\n    padLeft: !ctx.tightLists\n  }) : String(value);\n  if (ctx.collapseEmpty && !value) return name;\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = stringifyEntities(value, Object.assign({}, ctx.entities, {\n      subset: constants.unquoted[ctx.valid][ctx.safe],\n      attribute: true\n    }));\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative;\n    }\n    result = quote + stringifyEntities(value, Object.assign({}, ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe],\n      attribute: true\n    })) + quote;\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"names":["svg","find","stringify","spaces","commas","stringifyEntities","ccount","constants","comment","doctype","raw","text","handlers","element","root","all","own","hasOwnProperty","one","ctx","node","index","parent","type","Error","call","results","children","length","join","schema","omit","space","undefined","selfClosing","closeEmpty","voids","includes","tagName","toLowerCase","parts","last","attrs","serializeAttributes","properties","content","opening","push","close","charAt","tightClose","closing","props","values","key","value","serializeAttribute","tight","info","quote","result","overloadedBoolean","attribute","boolean","Boolean","Number","isNaN","name","Object","assign","entities","subset","valid","safe","commaSeparated","padLeft","tightLists","String","collapseEmpty","unquoted","smart","alternative","single","double"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/tree.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').PropertyValue} PropertyValue\n * @typedef {import('./types.js').Parent} Parent\n */\n\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {ccount} from 'ccount'\nimport {constants} from './constants.js'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {raw} from './raw.js'\nimport {text} from './text.js'\n\n/**\n * @type {Object.<string, Handle>}\n */\nconst handlers = {\n  comment,\n  doctype,\n  element,\n  // @ts-ignore `raw` is nonstandard\n  raw,\n  // @ts-ignore `root` is a parent.\n  root: all,\n  text\n}\n\nconst own = {}.hasOwnProperty\n\n/**\n * @type {Handle}\n */\nexport function one(ctx, node, index, parent) {\n  if (!node || !node.type) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  if (!own.call(handlers, node.type)) {\n    throw new Error('Cannot compile unknown node `' + node.type + '`')\n  }\n\n  return handlers[node.type](ctx, node, index, parent)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @type {Handle}\n * @param {Parent} parent\n */\nexport function all(ctx, parent) {\n  /** @type {Array.<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = one(ctx, children[index], index, parent)\n  }\n\n  return results.join('')\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function element(ctx, node, index, parent) {\n  const schema = ctx.schema\n  const omit = schema.space === 'svg' ? undefined : ctx.omit\n  let selfClosing =\n    schema.space === 'svg'\n      ? ctx.closeEmpty\n      : ctx.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array.<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg\n  }\n\n  const attrs = serializeAttributes(ctx, node.properties)\n\n  const content = all(\n    ctx,\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  ctx.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {Properties} props\n * @returns {string}\n */\nfunction serializeAttributes(ctx, props) {\n  /** @type {Array.<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n  /** @type {string} */\n  let value\n  /** @type {string} */\n  let last\n\n  for (key in props) {\n    if (props[key] !== undefined && props[key] !== null) {\n      value = serializeAttribute(ctx, key, props[key])\n      if (value) values.push(value)\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(ctx, key, value) {\n  const info = find(ctx.schema, key)\n  let quote = ctx.quote\n  /** @type {string} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset:\n        constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  value =\n    typeof value === 'object' && 'length' in value\n      ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n        // keep the code cleaner.\n        (info.commaSeparated ? commas : spaces)(value, {\n          padLeft: !ctx.tightLists\n        })\n      : String(value)\n\n  if (ctx.collapseEmpty && !value) return name\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, ctx.entities, {\n        subset: constants.unquoted[ctx.valid][ctx.safe],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, ctx.entities, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[\n            ctx.schema.space === 'html' ? ctx.valid : 1\n          ][ctx.safe],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}