{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n\n/** @type {Construct} */\nexport var thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  var size = 0;\n  /** @type {NonNullable<Code>} */\n\n  var marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak');\n    marker = code;\n    return atBreak(code);\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code);\n    }\n    if (size < 3 || code !== null && !markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.exit('thematicBreak');\n    return ok(code);\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit('thematicBreakSequence');\n    return atBreak(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","ok","nok","size","marker","start","code","enter","atBreak","sequence","exit","consume"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;;AAE1E;AACA,OAAO,IAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAEC;AACZ,CAAC;AACD;;AAEA,SAASA,qBAAqB,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC/C,IAAIC,IAAI,GAAG,CAAC;EACZ;;EAEA,IAAIC,MAAM;EACV,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBN,OAAO,CAACO,KAAK,CAAC,eAAe,CAAC;IAC9BH,MAAM,GAAGE,IAAI;IACb,OAAOE,OAAO,CAACF,IAAI,CAAC;EACtB;EACA;;EAEA,SAASE,OAAO,CAACF,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBJ,OAAO,CAACO,KAAK,CAAC,uBAAuB,CAAC;MACtC,OAAOE,QAAQ,CAACH,IAAI,CAAC;IACvB;IAEA,IAAIX,aAAa,CAACW,IAAI,CAAC,EAAE;MACvB,OAAOb,YAAY,CAACO,OAAO,EAAEQ,OAAO,EAAE,YAAY,CAAC,CAACF,IAAI,CAAC;IAC3D;IAEA,IAAIH,IAAI,GAAG,CAAC,IAAKG,IAAI,KAAK,IAAI,IAAI,CAACZ,kBAAkB,CAACY,IAAI,CAAE,EAAE;MAC5D,OAAOJ,GAAG,CAACI,IAAI,CAAC;IAClB;IAEAN,OAAO,CAACU,IAAI,CAAC,eAAe,CAAC;IAC7B,OAAOT,EAAE,CAACK,IAAI,CAAC;EACjB;EACA;;EAEA,SAASG,QAAQ,CAACH,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBJ,OAAO,CAACW,OAAO,CAACL,IAAI,CAAC;MACrBH,IAAI,EAAE;MACN,OAAOM,QAAQ;IACjB;IAEAT,OAAO,CAACU,IAAI,CAAC,uBAAuB,CAAC;IACrC,OAAOF,OAAO,CAACF,IAAI,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}