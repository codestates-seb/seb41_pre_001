{"ast":null,"code":"/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Text} Text\n */\n\nimport { stringifyEntities } from 'stringify-entities';\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(ctx, node, _, parent) {\n  // Check if content of `node` should be escaped.\n  return parent && parent.type === 'element' && (\n  // @ts-expect-error: hush.\n  parent.tagName === 'script' || parent.tagName === 'style') ? node.value : stringifyEntities(node.value, Object.assign({}, ctx.entities, {\n    subset: ['<', '&']\n  }));\n}","map":{"version":3,"names":["stringifyEntities","text","ctx","node","_","parent","type","tagName","value","Object","assign","entities","subset"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/text.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(ctx, node, _, parent) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    // @ts-expect-error: hush.\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, ctx.entities, {subset: ['<', '&']})\n      )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,iBAAiB,QAAO,oBAAoB;;AAEpD;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAI,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,EAAEC,MAAM,EAAE;EACzC;EACA,OAAOA,MAAM,IACXA,MAAM,CAACC,IAAI,KAAK,SAAS;EACzB;EACCD,MAAM,CAACE,OAAO,KAAK,QAAQ,IAAIF,MAAM,CAACE,OAAO,KAAK,OAAO,CAAC,GACzDJ,IAAI,CAACK,KAAK,GACVR,iBAAiB,CACfG,IAAI,CAACK,KAAK,EACVC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,GAAG,CAACS,QAAQ,EAAE;IAACC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;EAAC,CAAC,CAAC,CACtD;AACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}