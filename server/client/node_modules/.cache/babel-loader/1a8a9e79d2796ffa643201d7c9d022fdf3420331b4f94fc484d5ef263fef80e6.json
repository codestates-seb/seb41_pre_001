{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport { splice } from 'micromark-util-chunked';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  var jumps = {};\n  var index = -1;\n  /** @type {Event} */\n\n  var event;\n  /** @type {number|undefined} */\n\n  var lineIndex;\n  /** @type {number} */\n\n  var otherIndex;\n  /** @type {Event} */\n\n  var otherEvent;\n  /** @type {Event[]} */\n\n  var parameters;\n  /** @type {Event[]} */\n\n  var subevents;\n  /** @type {boolean|undefined} */\n\n  var more;\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n  return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  var token = events[eventIndex][1];\n  var context = events[eventIndex][2];\n  var startPosition = eventIndex - 1;\n  /** @type {number[]} */\n\n  var startPositions = [];\n  var tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  var childEvents = tokenizer.events;\n  /** @type {[number, number][]} */\n\n  var jumps = [];\n  /** @type {Record<string, number>} */\n\n  var gaps = {};\n  /** @type {Chunk[]} */\n\n  var stream;\n  /** @type {Token|undefined} */\n\n  var previous;\n  var index = -1;\n  /** @type {Token|undefined} */\n\n  var current = token;\n  var adjust = 0;\n  var start = 0;\n  var breaks = [start]; // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    } // Unravel the next token.\n\n    previous = current;\n    current = current.next;\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start); // Help GC.\n\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  } // Help GC.\n\n  tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length;\n  while (index--) {\n    var slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    var _start = startPositions.pop();\n    jumps.unshift([_start, _start + slice.length - 1]);\n    splice(events, _start, 2, slice);\n  }\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","map":{"version":3,"names":["splice","subtokenize","events","jumps","index","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","length","type","_tokenizer","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","undefined","end","start","slice","unshift","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","push","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","pop"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}