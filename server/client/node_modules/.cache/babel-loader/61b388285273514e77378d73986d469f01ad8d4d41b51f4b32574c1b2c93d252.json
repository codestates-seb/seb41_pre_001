{"ast":null,"code":"var util = require('util'),\n  winston = require('../../winston'),\n  http = require('http'),\n  https = require('https'),\n  Stream = require('stream').Stream,\n  Transport = require('./transport').Transport;\n\n//\n// ### function Http (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Http transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\nvar Http = exports.Http = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.name = 'http';\n  this.ssl = !!options.ssl;\n  this.host = options.host || 'localhost';\n  this.port = options.port;\n  this.auth = options.auth;\n  this.path = options.path || '';\n  this.agent = options.agent;\n  this.headers = options.headers || {};\n  this.headers['content-type'] = 'application/json';\n  if (!this.port) {\n    this.port = this.ssl ? 443 : 80;\n  }\n};\nutil.inherits(Http, winston.Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nHttp.prototype.name = 'http';\n\n//\n// ### function _request (options, callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Make a request to a winstond server or any http server which can\n// handle json-rpc.\n//\nHttp.prototype._request = function (options, callback) {\n  options = options || {};\n  var auth = options.auth || this.auth,\n    path = options.path || this.path || '',\n    req;\n  delete options.auth;\n  delete options.path;\n\n  // Prepare options for outgoing HTTP request\n  req = (this.ssl ? https : http).request({\n    host: this.host,\n    port: this.port,\n    path: '/' + path.replace(/^\\//, ''),\n    method: 'POST',\n    headers: this.headers,\n    agent: this.agent,\n    auth: auth ? auth.username + ':' + auth.password : ''\n  });\n  req.on('error', callback);\n  req.on('response', function (res) {\n    var body = '';\n    res.on('data', function (chunk) {\n      body += chunk;\n    });\n    res.on('end', function () {\n      callback(null, res, body);\n    });\n    res.resume();\n  });\n  req.end(new Buffer.from(JSON.stringify(options), 'utf8'));\n};\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nHttp.prototype.log = function (level, msg, meta, callback) {\n  var self = this;\n  if (typeof meta === 'function') {\n    callback = meta;\n    meta = {};\n  }\n  var options = {\n    method: 'collect',\n    params: {\n      level: level,\n      message: msg,\n      meta: meta\n    }\n  };\n  if (meta) {\n    if (meta.path) {\n      options.path = meta.path;\n      delete meta.path;\n    }\n    if (meta.auth) {\n      options.auth = meta.auth;\n      delete meta.auth;\n    }\n  }\n  this._request(options, function (err, res) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n    if (err) return callback(err);\n\n    // TODO: emit 'logged' correctly,\n    // keep track of pending logs.\n    self.emit('logged');\n    if (callback) callback(null, true);\n  });\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\nHttp.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  var self = this,\n    options = this.normalizeQuery(options);\n  options = {\n    method: 'query',\n    params: options\n  };\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n  this._request(options, function (err, res, body) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n    if (err) return callback(err);\n    if (typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        return callback(e);\n      }\n    }\n    callback(null, body);\n  });\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\nHttp.prototype.stream = function (options) {\n  options = options || {};\n  var self = this,\n    stream = new Stream(),\n    req,\n    buff;\n  stream.destroy = function () {\n    req.destroy();\n  };\n  options = {\n    method: 'stream',\n    params: options\n  };\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n  req = this._request(options);\n  buff = '';\n  req.on('data', function (data) {\n    var data = (buff + data).split(/\\n+/),\n      l = data.length - 1,\n      i = 0;\n    for (; i < l; i++) {\n      try {\n        stream.emit('log', JSON.parse(data[i]));\n      } catch (e) {\n        stream.emit('error', e);\n      }\n    }\n    buff = data[l];\n  });\n  req.on('error', function (err) {\n    stream.emit('error', err);\n  });\n  return stream;\n};","map":{"version":3,"names":["util","require","winston","http","https","Stream","Transport","Http","exports","options","call","name","ssl","host","port","auth","path","agent","headers","inherits","prototype","_request","callback","req","request","replace","method","username","password","on","res","body","chunk","resume","end","Buffer","from","JSON","stringify","log","level","msg","meta","self","params","message","err","statusCode","Error","emit","query","normalizeQuery","parse","e","stream","buff","destroy","data","split","l","length","i"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/transports/http.js"],"sourcesContent":["var util = require('util'),\r\n    winston = require('../../winston'),\r\n    http = require('http'),\r\n    https = require('https'),\r\n    Stream = require('stream').Stream,\r\n    Transport = require('./transport').Transport;\r\n\r\n//\r\n// ### function Http (options)\r\n// #### @options {Object} Options for this instance.\r\n// Constructor function for the Http transport object responsible\r\n// for persisting log messages and metadata to a terminal or TTY.\r\n//\r\nvar Http = exports.Http = function (options) {\r\n  Transport.call(this, options);\r\n  options = options || {};\r\n\r\n  this.name = 'http';\r\n  this.ssl = !!options.ssl;\r\n  this.host = options.host || 'localhost';\r\n  this.port = options.port;\r\n  this.auth = options.auth;\r\n  this.path = options.path || '';\r\n  this.agent = options.agent;\r\n  this.headers = options.headers || {};\r\n  this.headers['content-type'] = 'application/json';\r\n\r\n  if (!this.port) {\r\n    this.port = this.ssl ? 443 : 80;\r\n  }\r\n};\r\n\r\nutil.inherits(Http, winston.Transport);\r\n\r\n//\r\n// Expose the name of this Transport on the prototype\r\n//\r\nHttp.prototype.name = 'http';\r\n\r\n//\r\n// ### function _request (options, callback)\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Make a request to a winstond server or any http server which can\r\n// handle json-rpc.\r\n//\r\nHttp.prototype._request = function (options, callback) {\r\n  options = options || {};\r\n\r\n  var auth = options.auth || this.auth,\r\n      path = options.path || this.path || '',\r\n      req;\r\n\r\n  delete options.auth;\r\n  delete options.path;\r\n\r\n  // Prepare options for outgoing HTTP request\r\n  req = (this.ssl ? https : http).request({\r\n    host: this.host,\r\n    port: this.port,\r\n    path: '/' + path.replace(/^\\//, ''),\r\n    method: 'POST',\r\n    headers: this.headers,\r\n    agent: this.agent,\r\n    auth: (auth) ? auth.username + ':' + auth.password : ''\r\n  });\r\n\r\n  req.on('error', callback);\r\n  req.on('response', function (res) {\r\n    var body = '';\r\n\r\n    res.on('data', function (chunk) {\r\n      body += chunk;\r\n    });\r\n\r\n    res.on('end', function () {\r\n      callback(null, res, body);\r\n    });\r\n\r\n    res.resume();\r\n  });\r\n\r\n  req.end(new Buffer.from(JSON.stringify(options), 'utf8'));\r\n};\r\n\r\n//\r\n// ### function log (level, msg, [meta], callback)\r\n// #### @level {string} Level at which to log the message.\r\n// #### @msg {string} Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Core logging method exposed to Winston. Metadata is optional.\r\n//\r\nHttp.prototype.log = function (level, msg, meta, callback) {\r\n  var self = this;\r\n\r\n  if (typeof meta === 'function') {\r\n    callback = meta;\r\n    meta = {};\r\n  }\r\n\r\n  var options = {\r\n    method: 'collect',\r\n    params: {\r\n      level: level,\r\n      message: msg,\r\n      meta: meta\r\n    }\r\n  };\r\n\r\n  if (meta) {\r\n    if (meta.path) {\r\n      options.path = meta.path;\r\n      delete meta.path;\r\n    }\r\n\r\n    if (meta.auth) {\r\n      options.auth = meta.auth;\r\n      delete meta.auth;\r\n    }\r\n  }\r\n\r\n  this._request(options, function (err, res) {\r\n    if (res && res.statusCode !== 200) {\r\n      err = new Error('HTTP Status Code: ' + res.statusCode);\r\n    }\r\n\r\n    if (err) return callback(err);\r\n\r\n    // TODO: emit 'logged' correctly,\r\n    // keep track of pending logs.\r\n    self.emit('logged');\r\n\r\n    if (callback) callback(null, true);\r\n  });\r\n};\r\n\r\n//\r\n// ### function query (options, callback)\r\n// #### @options {Object} Loggly-like query options for this instance.\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Query the transport. Options object is optional.\r\n//\r\nHttp.prototype.query = function (options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  var self = this,\r\n      options = this.normalizeQuery(options);\r\n\r\n  options = {\r\n    method: 'query',\r\n    params: options\r\n  };\r\n\r\n  if (options.params.path) {\r\n    options.path = options.params.path;\r\n    delete options.params.path;\r\n  }\r\n\r\n  if (options.params.auth) {\r\n    options.auth = options.params.auth;\r\n    delete options.params.auth;\r\n  }\r\n\r\n  this._request(options, function (err, res, body) {\r\n    if (res && res.statusCode !== 200) {\r\n      err = new Error('HTTP Status Code: ' + res.statusCode);\r\n    }\r\n\r\n    if (err) return callback(err);\r\n\r\n    if (typeof body === 'string') {\r\n      try {\r\n        body = JSON.parse(body);\r\n      } catch (e) {\r\n        return callback(e);\r\n      }\r\n    }\r\n\r\n    callback(null, body);\r\n  });\r\n};\r\n\r\n//\r\n// ### function stream (options)\r\n// #### @options {Object} Stream options for this instance.\r\n// Returns a log stream for this transport. Options object is optional.\r\n//\r\nHttp.prototype.stream = function (options) {\r\n  options = options || {};\r\n\r\n  var self = this,\r\n      stream = new Stream,\r\n      req,\r\n      buff;\r\n\r\n  stream.destroy = function () {\r\n    req.destroy();\r\n  };\r\n\r\n  options = {\r\n    method: 'stream',\r\n    params: options\r\n  };\r\n\r\n  if (options.params.path) {\r\n    options.path = options.params.path;\r\n    delete options.params.path;\r\n  }\r\n\r\n  if (options.params.auth) {\r\n    options.auth = options.params.auth;\r\n    delete options.params.auth;\r\n  }\r\n\r\n  req = this._request(options);\r\n  buff = '';\r\n\r\n  req.on('data', function (data) {\r\n    var data = (buff + data).split(/\\n+/),\r\n        l = data.length - 1,\r\n        i = 0;\r\n\r\n    for (; i < l; i++) {\r\n      try {\r\n        stream.emit('log', JSON.parse(data[i]));\r\n      } catch (e) {\r\n        stream.emit('error', e);\r\n      }\r\n    }\r\n\r\n    buff = data[l];\r\n  });\r\n\r\n  req.on('error', function (err) {\r\n    stream.emit('error', err);\r\n  });\r\n\r\n  return stream;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}