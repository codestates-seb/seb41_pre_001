{"ast":null,"code":"/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node);\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : '';\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value;\n  }\n  return 'children' in node ? all(node) : '';\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  var index = -1;\n  /** @type {string[]} */\n  var result = [];\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index]);\n  }\n  return result.join('');\n}","map":{"version":3,"names":["toString","node","all","value","one","type","index","result","children","length","join"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-string/index.js"],"sourcesContent":["/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQ,CAACC,IAAI,EAAE;EAC7B;EACA;EACA,IAAI,UAAU,IAAIA,IAAI,EAAE;IACtB,OAAOC,GAAG,CAACD,IAAI,CAAC;EAClB;;EAEA;EACA,OAAO,OAAO,IAAIA,IAAI,GAAGA,IAAI,CAACE,KAAK,GAAG,EAAE;AAC1C;;AAEA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACH,IAAI,EAAE;EACjB,IAAIA,IAAI,CAACI,IAAI,KAAK,MAAM,EAAE;IACxB,OAAOJ,IAAI,CAACE,KAAK;EACnB;EAEA,OAAO,UAAU,IAAIF,IAAI,GAAGC,GAAG,CAACD,IAAI,CAAC,GAAG,EAAE;AAC5C;;AAEA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACD,IAAI,EAAE;EACjB,IAAIK,KAAK,GAAG,CAAC,CAAC;EACd;EACA,IAAMC,MAAM,GAAG,EAAE;EAEjB,OAAO,EAAED,KAAK,GAAGL,IAAI,CAACO,QAAQ,CAACC,MAAM,EAAE;IACrCF,MAAM,CAACD,KAAK,CAAC,GAAGF,GAAG,CAACH,IAAI,CAACO,QAAQ,CAACF,KAAK,CAAC,CAAC;EAC3C;EAEA,OAAOC,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}