{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\njava.displayName = 'java';\njava.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function java(Prism) {\n  Prism.register(refractorClike);\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n\n    var classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n\n    var className = {\n      pattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    };\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [className, {\n        // variables, parameters, and constructor references\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n        lookbehind: true,\n        inside: className.inside\n      }, {\n        // class names based on keyword\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      function: [Prism.languages.clike.function, {\n        pattern: /(::\\s*)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      },\n      constant: /\\b[A-Z][A-Z_\\d]+\\b/\n    });\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      import: [{\n        pattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n        lookbehind: true,\n        inside: {\n          namespace: className.inside.namespace,\n          punctuation: /\\./,\n          operator: /\\*/,\n          'class-name': /\\w+/\n        }\n      }, {\n        pattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n        lookbehind: true,\n        alias: 'static',\n        inside: {\n          namespace: className.inside.namespace,\n          static: /\\b\\w+$/,\n          punctuation: /\\./,\n          operator: /\\*/,\n          'class-name': /\\w+/\n        }\n      }],\n      namespace: {\n        pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n          return keywords.source;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorClike","java","displayName","aliases","Prism","register","keywords","classNamePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","function","clike","number","operator","constant","insertBefore","alias","char","annotation","generics","import","static","replace"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/java.js"],"sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\njava.displayName = 'java'\njava.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function java(Prism) {\n  Prism.register(refractorClike)\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n\n    var classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source // based on the java naming conventions\n\n    var className = {\n      pattern: RegExp(\n        /(^|[^\\w.])/.source +\n          classNamePrefix +\n          /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source\n      ),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables, parameters, and constructor references\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            /(^|[^\\w.])/.source +\n              classNamePrefix +\n              /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/\n                .source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        },\n        {\n          // class names based on keyword\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            /(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/\n              .source +\n              classNamePrefix +\n              /[A-Z]\\w*\\b/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      },\n      constant: /\\b[A-Z][A-Z_\\d]+\\b/\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      import: [\n        {\n          pattern: RegExp(\n            /(\\bimport\\s+)/.source +\n              classNamePrefix +\n              /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source\n          ),\n          lookbehind: true,\n          inside: {\n            namespace: className.inside.namespace,\n            punctuation: /\\./,\n            operator: /\\*/,\n            'class-name': /\\w+/\n          }\n        },\n        {\n          pattern: RegExp(\n            /(\\bimport\\s+static\\s+)/.source +\n              classNamePrefix +\n              /(?:\\w+|\\*)(?=\\s*;)/.source\n          ),\n          lookbehind: true,\n          alias: 'static',\n          inside: {\n            namespace: className.inside.namespace,\n            static: /\\b\\w+$/,\n            punctuation: /\\./,\n            operator: /\\*/,\n            'class-name': /\\w+/\n          }\n        }\n      ],\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}