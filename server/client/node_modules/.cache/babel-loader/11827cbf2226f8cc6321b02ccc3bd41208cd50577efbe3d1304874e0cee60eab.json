{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Fragment, useContext, useEffect, useRef } from 'react';\nimport { EditorContext } from '../../Context';\nimport Child from './Child';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ToolbarItems(props) {\n  var {\n    prefixCls,\n    overflow\n  } = props;\n  var {\n    fullscreen,\n    preview,\n    barPopup = {},\n    components,\n    commandOrchestrator,\n    dispatch\n  } = useContext(EditorContext);\n  var originalOverflow = useRef('');\n  function handleClick(command, name) {\n    if (!dispatch) return;\n    var state = {\n      barPopup: _extends({}, barPopup)\n    };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach(item => {\n        if (name === item.groupName) {\n          state.barPopup[name] = true;\n        } else if (item.keyCommand) {\n          state.barPopup[item.groupName] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach(keyName => {\n        state.barPopup[keyName] = false;\n      });\n    }\n    if (Object.keys(state).length) {\n      dispatch(_extends({}, state));\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n  useEffect(() => {\n    if (document && overflow) {\n      if (fullscreen) {\n        // prevent scroll on fullscreen\n        document.body.style.overflow = 'hidden';\n      } else {\n        // get the original overflow only the first time\n        if (!originalOverflow.current) {\n          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;\n        }\n        // reset to the original overflow\n        document.body.style.overflow = originalOverflow.current;\n      }\n    }\n  }, [fullscreen, originalOverflow, overflow]);\n  return /*#__PURE__*/_jsx(\"ul\", {\n    children: (props.commands || []).map((item, idx) => {\n      if (item.keyCommand === 'divider') {\n        return /*#__PURE__*/_jsx(\"li\", _extends({}, item.liProps, {\n          className: prefixCls + \"-toolbar-divider\"\n        }), idx);\n      }\n      if (!item.keyCommand) return /*#__PURE__*/_jsx(Fragment, {}, idx);\n      var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;\n      var childNode = item.children && typeof item.children === 'function' ? item.children({\n        getState: () => commandOrchestrator.getState(),\n        textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,\n        close: () => handleClick({}, item.groupName),\n        execute: () => handleClick({\n          execute: item.execute\n        })\n      }) : undefined;\n      var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n      var render = (components == null ? void 0 : components.toolbar) || item.render;\n      var com = render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null;\n      return /*#__PURE__*/_jsxs(\"li\", _extends({}, item.liProps, {\n        className: activeBtn ? \"active\" : '',\n        children: [com && /*#__PURE__*/React.isValidElement(com) && com, !com && !item.buttonProps && item.icon, !com && item.buttonProps && /*#__PURE__*/React.createElement('button', _extends({\n          type: 'button',\n          key: idx,\n          disabled,\n          'data-name': item.name\n        }, item.buttonProps, {\n          onClick: evn => {\n            evn.stopPropagation();\n            handleClick(item, item.groupName);\n          }\n        }), item.icon), item.children && /*#__PURE__*/_jsx(Child, {\n          overflow: overflow,\n          groupName: item.groupName,\n          prefixCls: prefixCls,\n          children: childNode,\n          commands: Array.isArray(item.children) ? item.children : undefined\n        })]\n      }), idx);\n    })\n  });\n}\nexport default function Toolbar(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    prefixCls,\n    toolbarBottom,\n    isChild\n  } = props;\n  var {\n    commands,\n    extraCommands\n  } = useContext(EditorContext);\n  var bottomClassName = toolbarBottom ? 'bottom' : '';\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: prefixCls + \"-toolbar \" + bottomClassName,\n    children: [/*#__PURE__*/_jsx(ToolbarItems, _extends({}, props, {\n      commands: props.commands || commands || []\n    })), !isChild && /*#__PURE__*/_jsx(ToolbarItems, _extends({}, props, {\n      commands: extraCommands || []\n    }))]\n  });\n}","map":{"version":3,"mappings":"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","names":["React","Fragment","useContext","useEffect","useRef","EditorContext","Child","ToolbarItems","props","prefixCls","overflow","fullscreen","preview","barPopup","components","commandOrchestrator","dispatch","originalOverflow","handleClick","command","name","state","keyCommand","value","commands","forEach","item","groupName","parent","Object","keys","keyName","length","executeCommand","document","body","style","current","window","getComputedStyle","_jsx","children","map","idx","liProps","className","activeBtn","childNode","getState","textApi","undefined","close","execute","disabled","test","render","toolbar","com","_jsxs","isValidElement","buttonProps","icon","createElement","type","key","onClick","evn","stopPropagation","Array","isArray","Toolbar","toolbarBottom","isChild","extraCommands","bottomClassName"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/react-md-editor/src/components/Toolbar/index.tsx"],"sourcesContent":["import React, { Fragment, useContext, useEffect, useRef } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, PreviewType, ContextStore } from '../../Context';\nimport { ICommand } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  overflow?: boolean;\n  toolbarBottom?: boolean;\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n  isChild?: boolean;\n}\n\nexport function ToolbarItems(props: IToolbarProps) {\n  const { prefixCls, overflow } = props;\n  const { fullscreen, preview, barPopup = {}, components, commandOrchestrator, dispatch } = useContext(EditorContext);\n  const originalOverflow = useRef('');\n\n  function handleClick(command: ICommand<string>, name?: string) {\n    if (!dispatch) return;\n    const state: ContextStore = { barPopup: { ...barPopup } };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value as PreviewType;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach((item) => {\n        if (name === item.groupName) {\n          state.barPopup![name!] = true;\n        } else if (item.keyCommand) {\n          state.barPopup![item.groupName!] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach((keyName) => {\n        state.barPopup![keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch({ ...state });\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  useEffect(() => {\n    if (document && overflow) {\n      if (fullscreen) {\n        // prevent scroll on fullscreen\n        document.body.style.overflow = 'hidden';\n      } else {\n        // get the original overflow only the first time\n        if (!originalOverflow.current) {\n          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;\n        }\n        // reset to the original overflow\n        document.body.style.overflow = originalOverflow.current;\n      }\n    }\n  }, [fullscreen, originalOverflow, overflow]);\n\n  return (\n    <ul>\n      {(props.commands || []).map((item, idx) => {\n        if (item.keyCommand === 'divider') {\n          return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n        }\n        if (!item.keyCommand) return <Fragment key={idx} />;\n        const activeBtn =\n          (fullscreen && item.keyCommand === 'fullscreen') || (item.keyCommand === 'preview' && preview === item.value);\n        const childNode =\n          item.children && typeof item.children === 'function'\n            ? item.children({\n                getState: () => commandOrchestrator!.getState(),\n                textApi: commandOrchestrator ? commandOrchestrator!.textApi : undefined,\n                close: () => handleClick({}, item.groupName),\n                execute: () => handleClick({ execute: item.execute }),\n              })\n            : undefined;\n        const disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n        const render = components?.toolbar || item.render;\n        const com = (\n          render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null\n        ) as React.ReactElement;\n        return (\n          <li key={idx} {...item.liProps} className={activeBtn ? `active` : ''}>\n            {com && React.isValidElement(com) && com}\n            {!com && !item.buttonProps && item.icon}\n            {!com &&\n              item.buttonProps &&\n              React.createElement(\n                'button',\n                {\n                  type: 'button',\n                  key: idx,\n                  disabled,\n                  'data-name': item.name,\n                  ...item.buttonProps,\n                  onClick: (evn: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                    evn.stopPropagation();\n                    handleClick(item, item.groupName);\n                  },\n                },\n                item.icon,\n              )}\n            {item.children && (\n              <Child\n                overflow={overflow}\n                groupName={item.groupName}\n                prefixCls={prefixCls}\n                children={childNode}\n                commands={Array.isArray(item.children) ? item.children : undefined}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, toolbarBottom, isChild } = props;\n  const { commands, extraCommands } = useContext(EditorContext);\n  const bottomClassName = toolbarBottom ? 'bottom' : '';\n  return (\n    <div className={`${prefixCls}-toolbar ${bottomClassName}`}>\n      <ToolbarItems {...props} commands={props.commands || commands || []} />\n      {!isChild && <ToolbarItems {...props} commands={extraCommands || []} />}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}