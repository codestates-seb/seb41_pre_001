{"ast":null,"code":"/*\r\n * logger.js: Core logger object used by winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\n\nvar events = require('events'),\n  util = require('util'),\n  async = require('async'),\n  config = require('./config'),\n  common = require('./common'),\n  exception = require('./exception'),\n  Stream = require('stream').Stream;\nvar formatRegExp = /%[sdj%]/g;\n\n//\n// ### function Logger (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Logger object responsible\n// for persisting log messages and metadata to one or more transports.\n//\nvar Logger = exports.Logger = function (options) {\n  events.EventEmitter.call(this);\n  this.configure(options);\n};\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutil.inherits(Logger, events.EventEmitter);\n\n//\n// ### function configure (options)\n// This will wholesale reconfigure this instance by:\n// 1. Resetting all transports. Older transports will be removed implicitly.\n// 2. Set all other options including levels, colors, rewriters, filters,\n//    exceptionHandlers, etc.\n//\nLogger.prototype.configure = function (options) {\n  var self = this;\n\n  //\n  // If we have already been setup with transports\n  // then remove them before proceeding.\n  //\n  if (Array.isArray(this._names) && this._names.length) {\n    this.clear();\n  }\n  options = options || {};\n  this.transports = {};\n  this._names = [];\n  if (options.transports) {\n    options.transports.forEach(function (transport) {\n      self.add(transport, null, true);\n    });\n  }\n\n  //\n  // Set Levels and default logging level\n  //\n  this.padLevels = options.padLevels || false;\n  this.setLevels(options.levels);\n  if (options.colors) {\n    config.addColors(options.colors);\n  }\n\n  //\n  // Hoist other options onto this instance.\n  //\n  this.id = options.id || null;\n  this.level = options.level || 'info';\n  this.emitErrs = options.emitErrs || false;\n  this.stripColors = options.stripColors || false;\n  this.exitOnError = typeof options.exitOnError !== 'undefined' ? options.exitOnError : true;\n\n  //\n  // Setup internal state as empty Objects even though it is\n  // defined lazily later to ensure a strong existential API contract.\n  //\n  this.exceptionHandlers = {};\n  this.profilers = {};\n  ['rewriters', 'filters'].forEach(function (kind) {\n    self[kind] = Array.isArray(options[kind]) ? options[kind] : [];\n  });\n  if (options.exceptionHandlers) {\n    this.handleExceptions(options.exceptionHandlers);\n  }\n};\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nLogger.prototype.log = function (level) {\n  var args = Array.prototype.slice.call(arguments, 1),\n    self = this,\n    transports;\n  while (args[args.length - 1] === null) {\n    args.pop();\n  }\n\n  //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n\n  //\n  // Handle errors appropriately.\n  //\n  function onError(err) {\n    if (callback) {\n      callback(err);\n    } else if (self.emitErrs) {\n      self.emit('error', err);\n    }\n  }\n  if (this._names.length === 0) {\n    return onError(new Error('Cannot log with no transports.'));\n  } else if (typeof self.levels[level] === 'undefined') {\n    return onError(new Error('Unknown log level: ' + level));\n  }\n\n  //\n  // If there are no transports that match the level\n  // then be eager and return. This could potentially be calculated\n  // during `setLevels` for more performance gains.\n  //\n  var targets = this._names.filter(function (name) {\n    var transport = self.transports[name];\n    return transport.level && self.levels[transport.level] >= self.levels[level] || !transport.level && self.levels[self.level] >= self.levels[level];\n  });\n  if (!targets.length) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n\n  //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n  var msg,\n    meta = {},\n    validMeta = false;\n  var hasFormat = args && args[0] && args[0].match && args[0].match(formatRegExp) !== null;\n  var tokens = hasFormat ? args[0].match(formatRegExp) : [];\n  var ptokens = tokens.filter(function (t) {\n    return t === '%%';\n  });\n  if (args.length - 1 - (tokens.length - ptokens.length) > 0 || args.length === 1) {\n    // last arg is meta\n    meta = args[args.length - 1] || args;\n    var metaType = Object.prototype.toString.call(meta);\n    validMeta = metaType === '[object Object]' || metaType === '[object Error]' || metaType === '[object Array]';\n    meta = validMeta ? args.pop() : {};\n  }\n  msg = util.format.apply(null, args);\n\n  //\n  // Respond to the callback.\n  //\n  function finish(err) {\n    if (callback) {\n      if (err) return callback(err);\n      callback(null, level, msg, meta);\n    }\n    callback = null;\n    if (!err) {\n      self.emit('logged', level, msg, meta);\n    }\n  }\n\n  // If we should pad for levels, do so\n  if (this.padLevels) {\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\n  }\n  this.rewriters.forEach(function (rewriter) {\n    meta = rewriter(level, msg, meta, self);\n  });\n  this.filters.forEach(function (filter) {\n    var filtered = filter(level, msg, meta, self);\n    if (typeof filtered === 'string') msg = filtered;else {\n      msg = filtered.msg;\n      meta = filtered.meta;\n    }\n  });\n\n  //\n  // For consideration of terminal 'color\" programs like colors.js,\n  // which can add ANSI escape color codes to strings, we destyle the\n  // ANSI color escape codes when `this.stripColors` is set.\n  //\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\n  //\n  if (this.stripColors) {\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n    msg = ('' + msg).replace(code, '');\n  }\n\n  //\n  // Log for each transport and emit 'logging' event\n  //\n  function transportLog(name, next) {\n    var transport = self.transports[name];\n    transport.log(level, msg, meta, function (err) {\n      if (err) {\n        err.transport = transport;\n        finish(err);\n        return next();\n      }\n      self.emit('logging', transport, level, msg, meta);\n      next();\n    });\n  }\n  async.forEach(targets, transportLog, finish);\n  return this;\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Queries the all transports for this instance with the specified `options`.\n// This will aggregate each transport's results into one object containing\n// a property per transport.\n//\nLogger.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  var self = this,\n    options = options || {},\n    results = {},\n    query = common.clone(options.query) || {},\n    transports;\n\n  //\n  // Helper function to query a single transport\n  //\n  function queryTransport(transport, next) {\n    if (options.query) {\n      options.query = transport.formatQuery(query);\n    }\n    transport.query(options, function (err, results) {\n      if (err) {\n        return next(err);\n      }\n      next(null, transport.formatResults(results, options.format));\n    });\n  }\n\n  //\n  // Helper function to accumulate the results from\n  // `queryTransport` into the `results`.\n  //\n  function addResults(transport, next) {\n    queryTransport(transport, function (err, result) {\n      //\n      // queryTransport could potentially invoke the callback\n      // multiple times since Transport code can be unpredictable.\n      //\n      if (next) {\n        result = err || result;\n        if (result) {\n          results[transport.name] = result;\n        }\n        next();\n      }\n      next = null;\n    });\n  }\n\n  //\n  // If an explicit transport is being queried then\n  // respond with the results from only that transport\n  //\n  if (options.transport) {\n    options.transport = options.transport.toLowerCase();\n    return queryTransport(this.transports[options.transport], callback);\n  }\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.query;\n  });\n\n  //\n  // Iterate over the transports in parallel setting the\n  // appropriate key in the `results`\n  //\n  async.forEach(transports, addResults, function () {\n    callback(null, results);\n  });\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for all transports. Options object is optional.\n//\nLogger.prototype.stream = function (options) {\n  var self = this,\n    options = options || {},\n    out = new Stream(),\n    streams = [],\n    transports;\n  if (options.transport) {\n    var transport = this.transports[options.transport];\n    delete options.transport;\n    if (transport && transport.stream) {\n      return transport.stream(options);\n    }\n  }\n  out._streams = streams;\n  out.destroy = function () {\n    var i = streams.length;\n    while (i--) streams[i].destroy();\n  };\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.stream;\n  });\n  transports.forEach(function (transport) {\n    var stream = transport.stream(options);\n    if (!stream) return;\n    streams.push(stream);\n    stream.on('log', function (log) {\n      log.transport = log.transport || [];\n      log.transport.push(transport.name);\n      out.emit('log', log);\n    });\n    stream.on('error', function (err) {\n      err.transport = err.transport || [];\n      err.transport.push(transport.name);\n      out.emit('error', err);\n    });\n  });\n  return out;\n};\n\n//\n// ### function close ()\n// Cleans up resources (streams, event listeners) for all\n// transports associated with this instance (if necessary).\n//\nLogger.prototype.close = function () {\n  var self = this;\n  this._names.forEach(function (name) {\n    var transport = self.transports[name];\n    if (transport && transport.close) {\n      transport.close();\n    }\n  });\n  this.emit('close');\n};\n\n//\n// ### function handleExceptions ([tr0, tr1...] || tr0, tr1, ...)\n// Handles `uncaughtException` events for the current process by\n// ADDING any handlers passed in.\n//\nLogger.prototype.handleExceptions = function () {\n  var args = Array.prototype.slice.call(arguments),\n    handlers = [],\n    self = this;\n  args.forEach(function (a) {\n    if (Array.isArray(a)) {\n      handlers = handlers.concat(a);\n    } else {\n      handlers.push(a);\n    }\n  });\n  this.exceptionHandlers = this.exceptionHandlers || {};\n  handlers.forEach(function (handler) {\n    self.exceptionHandlers[handler.name] = handler;\n  });\n  this._hnames = Object.keys(self.exceptionHandlers);\n  if (!this.catchExceptions) {\n    this.catchExceptions = this._uncaughtException.bind(this);\n    process.on('uncaughtException', this.catchExceptions);\n  }\n};\n\n//\n// ### function unhandleExceptions ()\n// Removes any handlers to `uncaughtException` events\n// for the current process\n//\nLogger.prototype.unhandleExceptions = function () {\n  var self = this;\n  if (this.catchExceptions) {\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\n      var handler = self.exceptionHandlers[name];\n      if (handler.close) {\n        handler.close();\n      }\n    });\n    this.exceptionHandlers = {};\n    Object.keys(this.transports).forEach(function (name) {\n      var transport = self.transports[name];\n      if (transport.handleExceptions) {\n        transport.handleExceptions = false;\n      }\n    });\n    process.removeListener('uncaughtException', this.catchExceptions);\n    this.catchExceptions = false;\n  }\n};\n\n//\n// ### function add (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\nLogger.prototype.add = function (transport, options, created) {\n  var instance = created ? transport : new transport(options);\n  if (!instance.name && !instance.log) {\n    throw new Error('Unknown transport with no log() method');\n  } else if (this.transports[instance.name]) {\n    throw new Error('Transport already attached: ' + instance.name + \", assign a different name\");\n  }\n  this.transports[instance.name] = instance;\n  this._names = Object.keys(this.transports);\n\n  //\n  // Listen for the `error` event on the new Transport\n  //\n  instance._onError = this._onError.bind(this, instance);\n  if (!created) {\n    instance.on('error', instance._onError);\n  }\n\n  //\n  // If this transport has `handleExceptions` set to `true`\n  // and we are not already handling exceptions, do so.\n  //\n  if (instance.handleExceptions && !this.catchExceptions) {\n    this.handleExceptions();\n  }\n  return this;\n};\n\n//\n// ### function clear ()\n// Remove all transports from this instance\n//\nLogger.prototype.clear = function () {\n  Object.keys(this.transports).forEach(function (name) {\n    this.remove({\n      name: name\n    });\n  }, this);\n};\n\n//\n// ### function remove (transport)\n// #### @transport {Transport|String} Transport or Name to remove.\n// Removes a transport of the specified type from this instance.\n//\nLogger.prototype.remove = function (transport) {\n  var name = typeof transport !== 'string' ? transport.name || transport.prototype.name : transport;\n  if (!this.transports[name]) {\n    throw new Error('Transport ' + name + ' not attached to this instance');\n  }\n  var instance = this.transports[name];\n  delete this.transports[name];\n  this._names = Object.keys(this.transports);\n  if (instance.close) {\n    instance.close();\n  }\n  if (instance._onError) {\n    instance.removeListener('error', instance._onError);\n  }\n  return this;\n};\n\n//\n// ### function startTimer ()\n// Returns an object corresponding to a specific timing. When done\n// is called the timer will finish and log the duration. e.g.:\n//\n//    timer = winston.startTimer()\n//    setTimeout(function(){\n//      timer.done(\"Logging message\");\n//    }, 1000);\n//\nLogger.prototype.startTimer = function () {\n  return new ProfileHandler(this);\n};\n\n//\n// ### function profile (id, [msg, meta, callback])\n// #### @id {string} Unique id of the profiler\n// #### @msg {string} **Optional** Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Tracks the time inbetween subsequent calls to this method\n// with the same `id` parameter. The second call to this method\n// will log the difference in milliseconds along with the message.\n//\nLogger.prototype.profile = function (id) {\n  var now = Date.now(),\n    then,\n    args,\n    msg,\n    meta,\n    callback;\n  if (this.profilers[id]) {\n    then = this.profilers[id];\n    delete this.profilers[id];\n\n    // Support variable arguments: msg, meta, callback\n    args = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    msg = args.length === 2 ? args[1] : id;\n\n    // Set the duration property of the metadata\n    meta.durationMs = now - then;\n    return this.info(msg, meta, callback);\n  } else {\n    this.profilers[id] = now;\n  }\n  return this;\n};\n\n//\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use on this instance\n// Sets the `target` levels specified on this instance.\n//\nLogger.prototype.setLevels = function (target) {\n  return common.setLevels(this, this.levels, target);\n};\n\n//\n// ### function cli ()\n// Configures this instance to have the default\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\nLogger.prototype.cli = function () {\n  this.padLevels = true;\n  this.setLevels(config.cli.levels);\n  config.addColors(config.cli.colors);\n  if (this.transports.console) {\n    this.transports.console.colorize = this.transports.console.colorize || true;\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\n  }\n  return this;\n};\n\n//\n// ### @private function _uncaughtException (err)\n// #### @err {Error} Error to handle\n// Logs all relevant information around the `err` and\n// exits the current process.\n//\nLogger.prototype._uncaughtException = function (err) {\n  var self = this,\n    responded = false,\n    info = exception.getAllInfo(err),\n    handlers = this._getExceptionHandlers(),\n    timeout,\n    doExit;\n\n  //\n  // Calculate if we should exit on this error\n  //\n  doExit = typeof this.exitOnError === 'function' ? this.exitOnError(err) : this.exitOnError;\n  function logAndWait(transport, next) {\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\n  }\n  function gracefulExit() {\n    if (doExit && !responded) {\n      //\n      // Remark: Currently ignoring any exceptions from transports\n      //         when catching uncaught exceptions.\n      //\n      clearTimeout(timeout);\n      responded = true;\n      process.exit(1);\n    }\n  }\n  if (!handlers || handlers.length === 0) {\n    return gracefulExit();\n  }\n\n  //\n  // Log to all transports and allow the operation to take\n  // only up to `3000ms`.\n  //\n  async.forEach(handlers, logAndWait, gracefulExit);\n  if (doExit) {\n    timeout = setTimeout(gracefulExit, 3000);\n  }\n};\n\n//\n// ### @private function _getExceptionHandlers ()\n// Returns the list of transports and exceptionHandlers\n// for this instance.\n//\nLogger.prototype._getExceptionHandlers = function () {\n  var self = this;\n  return this._hnames.map(function (name) {\n    return self.exceptionHandlers[name];\n  }).concat(this._names.map(function (name) {\n    return self.transports[name].handleExceptions && self.transports[name];\n  })).filter(Boolean);\n};\n\n//\n// ### @private function _onError (transport, err)\n// #### @transport {Object} Transport on which the error occured\n// #### @err {Error} Error that occurred on the transport\n// Bubbles the error, `err`, that occured on the specified `transport`\n// up from this instance if `emitErrs` has been set.\n//\nLogger.prototype._onError = function (transport, err) {\n  if (this.emitErrs) {\n    this.emit('error', err, transport);\n  }\n};\n\n//\n// ### @private ProfileHandler\n// Constructor function for the ProfileHandler instance used by\n// `Logger.prototype.startTimer`. When done is called the timer\n// will finish and log the duration.\n//\nfunction ProfileHandler(logger) {\n  this.logger = logger;\n  this.start = Date.now();\n}\n\n//\n// ### function done (msg)\n// Ends the current timer (i.e. ProfileHandler) instance and\n// logs the `msg` along with the duration since creation.\n//\nProfileHandler.prototype.done = function (msg) {\n  var args = Array.prototype.slice.call(arguments),\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\n    meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n  meta.duration = Date.now() - this.start + 'ms';\n  return this.logger.info(msg, meta, callback);\n};","map":{"version":3,"names":["events","require","util","async","config","common","exception","Stream","formatRegExp","Logger","exports","options","EventEmitter","call","configure","inherits","prototype","self","Array","isArray","_names","length","clear","transports","forEach","transport","add","padLevels","setLevels","levels","colors","addColors","id","level","emitErrs","stripColors","exitOnError","exceptionHandlers","profilers","kind","handleExceptions","log","args","slice","arguments","pop","callback","onError","err","emit","Error","targets","filter","name","msg","meta","validMeta","hasFormat","match","tokens","ptokens","t","metaType","Object","toString","format","apply","finish","levelLength","join","rewriters","rewriter","filters","filtered","code","replace","transportLog","next","query","results","clone","queryTransport","formatQuery","formatResults","addResults","result","toLowerCase","map","stream","out","streams","_streams","destroy","i","push","on","close","handlers","a","concat","handler","_hnames","keys","catchExceptions","_uncaughtException","bind","process","unhandleExceptions","removeListener","created","instance","_onError","remove","startTimer","ProfileHandler","profile","now","Date","then","durationMs","info","target","cli","console","colorize","timestamp","responded","getAllInfo","_getExceptionHandlers","timeout","doExit","logAndWait","logException","message","gracefulExit","clearTimeout","exit","setTimeout","Boolean","logger","start","done","duration"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/logger.js"],"sourcesContent":["/*\r\n * logger.js: Core logger object used by winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\r\n\r\nvar events = require('events'),\r\n    util = require('util'),\r\n    async = require('async'),\r\n    config = require('./config'),\r\n    common = require('./common'),\r\n    exception = require('./exception'),\r\n    Stream = require('stream').Stream;\r\n\r\nvar formatRegExp = /%[sdj%]/g;\r\n\r\n//\r\n// ### function Logger (options)\r\n// #### @options {Object} Options for this instance.\r\n// Constructor function for the Logger object responsible\r\n// for persisting log messages and metadata to one or more transports.\r\n//\r\nvar Logger = exports.Logger = function (options) {\r\n  events.EventEmitter.call(this);\r\n  this.configure(options);\r\n};\r\n\r\n//\r\n// Inherit from `events.EventEmitter`.\r\n//\r\nutil.inherits(Logger, events.EventEmitter);\r\n\r\n//\r\n// ### function configure (options)\r\n// This will wholesale reconfigure this instance by:\r\n// 1. Resetting all transports. Older transports will be removed implicitly.\r\n// 2. Set all other options including levels, colors, rewriters, filters,\r\n//    exceptionHandlers, etc.\r\n//\r\nLogger.prototype.configure = function (options) {\r\n  var self = this;\r\n\r\n  //\r\n  // If we have already been setup with transports\r\n  // then remove them before proceeding.\r\n  //\r\n  if (Array.isArray(this._names) && this._names.length) {\r\n    this.clear();\r\n  }\r\n\r\n  options = options || {};\r\n  this.transports = {};\r\n  this._names     = [];\r\n\r\n  if (options.transports) {\r\n    options.transports.forEach(function (transport) {\r\n      self.add(transport, null, true);\r\n    });\r\n  }\r\n\r\n  //\r\n  // Set Levels and default logging level\r\n  //\r\n  this.padLevels = options.padLevels || false;\r\n  this.setLevels(options.levels);\r\n  if (options.colors) {\r\n    config.addColors(options.colors);\r\n  }\r\n\r\n  //\r\n  // Hoist other options onto this instance.\r\n  //\r\n  this.id          = options.id || null;\r\n  this.level       = options.level || 'info';\r\n  this.emitErrs    = options.emitErrs || false;\r\n  this.stripColors = options.stripColors || false;\r\n  this.exitOnError = typeof options.exitOnError !== 'undefined'\r\n    ? options.exitOnError\r\n    : true;\r\n\r\n  //\r\n  // Setup internal state as empty Objects even though it is\r\n  // defined lazily later to ensure a strong existential API contract.\r\n  //\r\n  this.exceptionHandlers = {};\r\n  this.profilers         = {};\r\n\r\n  ['rewriters', 'filters'].forEach(function (kind) {\r\n    self[kind] = Array.isArray(options[kind])\r\n      ? options[kind]\r\n      : [];\r\n  });\r\n\r\n  if (options.exceptionHandlers) {\r\n    this.handleExceptions(options.exceptionHandlers);\r\n  }\r\n};\r\n\r\n//\r\n// ### function log (level, msg, [meta], callback)\r\n// #### @level {string} Level at which to log the message.\r\n// #### @msg {string} Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Core logging method exposed to Winston. Metadata is optional.\r\n//\r\nLogger.prototype.log = function (level) {\r\n  var args = Array.prototype.slice.call(arguments, 1),\r\n      self = this,\r\n      transports;\r\n\r\n  while (args[args.length - 1] === null) {\r\n    args.pop();\r\n  }\r\n\r\n  //\r\n  // Determining what is `meta` and what are arguments for string interpolation\r\n  // turns out to be VERY tricky. e.g. in the cases like this:\r\n  //\r\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\r\n  //\r\n  var callback  = typeof args[args.length - 1] === 'function'\r\n    ? args.pop()\r\n    : null;\r\n\r\n  //\r\n  // Handle errors appropriately.\r\n  //\r\n  function onError(err) {\r\n    if (callback) {\r\n      callback(err);\r\n    }\r\n    else if (self.emitErrs) {\r\n      self.emit('error', err);\r\n    }\r\n  }\r\n\r\n  if (this._names.length === 0) {\r\n    return onError(new Error('Cannot log with no transports.'));\r\n  }\r\n  else if (typeof self.levels[level] === 'undefined') {\r\n    return onError(new Error('Unknown log level: ' + level));\r\n  }\r\n\r\n  //\r\n  // If there are no transports that match the level\r\n  // then be eager and return. This could potentially be calculated\r\n  // during `setLevels` for more performance gains.\r\n  //\r\n  var targets = this._names.filter(function (name) {\r\n    var transport = self.transports[name];\r\n    return (transport.level && self.levels[transport.level] >= self.levels[level])\r\n      || (!transport.level && self.levels[self.level] >= self.levels[level]);\r\n  });\r\n\r\n  if (!targets.length) {\r\n    if (callback) { callback(); }\r\n    return;\r\n  }\r\n\r\n  //\r\n  // Determining what is `meta` and what are arguments for string interpolation\r\n  // turns out to be VERY tricky. e.g. in the cases like this:\r\n  //\r\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\r\n  //\r\n  var msg, meta = {}, validMeta = false;\r\n  var hasFormat = args && args[0] && args[0].match && args[0].match(formatRegExp) !== null;\r\n  var tokens = (hasFormat) ? args[0].match(formatRegExp) : [];\r\n  var ptokens = tokens.filter(function(t) { return t === '%%' });\r\n  if (((args.length - 1) - (tokens.length - ptokens.length)) > 0 || args.length === 1) {\r\n    // last arg is meta\r\n    meta = args[args.length - 1] || args;\r\n    var metaType = Object.prototype.toString.call(meta);\r\n    validMeta = metaType === '[object Object]' ||\r\n      metaType === '[object Error]' || metaType === '[object Array]';\r\n    meta = validMeta ? args.pop() : {};\r\n  }\r\n  msg = util.format.apply(null, args);\r\n\r\n  //\r\n  // Respond to the callback.\r\n  //\r\n  function finish(err) {\r\n    if (callback) {\r\n      if (err) return callback(err);\r\n      callback(null, level, msg, meta);\r\n    }\r\n\r\n    callback = null;\r\n    if (!err) {\r\n      self.emit('logged', level, msg, meta);\r\n    }\r\n  }\r\n\r\n  // If we should pad for levels, do so\r\n  if (this.padLevels) {\r\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\r\n  }\r\n\r\n  this.rewriters.forEach(function (rewriter) {\r\n    meta = rewriter(level, msg, meta, self);\r\n  });\r\n\r\n  this.filters.forEach(function(filter) {\r\n    var filtered = filter(level, msg, meta, self);\r\n    if (typeof filtered === 'string')\r\n      msg = filtered;\r\n    else {\r\n      msg = filtered.msg;\r\n      meta = filtered.meta;\r\n    }\r\n  });\r\n\r\n  //\r\n  // For consideration of terminal 'color\" programs like colors.js,\r\n  // which can add ANSI escape color codes to strings, we destyle the\r\n  // ANSI color escape codes when `this.stripColors` is set.\r\n  //\r\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\r\n  //\r\n  if (this.stripColors) {\r\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\r\n    msg = ('' + msg).replace(code, '');\r\n  }\r\n\r\n  //\r\n  // Log for each transport and emit 'logging' event\r\n  //\r\n  function transportLog(name, next) {\r\n    var transport = self.transports[name];\r\n    transport.log(level, msg, meta, function (err) {\r\n      if (err) {\r\n        err.transport = transport;\r\n        finish(err);\r\n        return next();\r\n      }\r\n\r\n      self.emit('logging', transport, level, msg, meta);\r\n      next();\r\n    });\r\n  }\r\n\r\n  async.forEach(targets, transportLog, finish);\r\n  return this;\r\n};\r\n\r\n//\r\n// ### function query (options, callback)\r\n// #### @options {Object} Query options for this instance.\r\n// #### @callback {function} Continuation to respond to when complete.\r\n// Queries the all transports for this instance with the specified `options`.\r\n// This will aggregate each transport's results into one object containing\r\n// a property per transport.\r\n//\r\nLogger.prototype.query = function (options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  var self = this,\r\n      options = options || {},\r\n      results = {},\r\n      query = common.clone(options.query) || {},\r\n      transports;\r\n\r\n  //\r\n  // Helper function to query a single transport\r\n  //\r\n  function queryTransport(transport, next) {\r\n    if (options.query) {\r\n      options.query = transport.formatQuery(query);\r\n    }\r\n\r\n    transport.query(options, function (err, results) {\r\n      if (err) {\r\n        return next(err);\r\n      }\r\n\r\n      next(null, transport.formatResults(results, options.format));\r\n    });\r\n  }\r\n\r\n  //\r\n  // Helper function to accumulate the results from\r\n  // `queryTransport` into the `results`.\r\n  //\r\n  function addResults(transport, next) {\r\n    queryTransport(transport, function (err, result) {\r\n      //\r\n      // queryTransport could potentially invoke the callback\r\n      // multiple times since Transport code can be unpredictable.\r\n      //\r\n      if (next) {\r\n        result = err || result;\r\n        if (result) {\r\n          results[transport.name] = result;\r\n        }\r\n\r\n        next();\r\n      }\r\n\r\n      next = null;\r\n    });\r\n  }\r\n\r\n  //\r\n  // If an explicit transport is being queried then\r\n  // respond with the results from only that transport\r\n  //\r\n  if (options.transport) {\r\n    options.transport = options.transport.toLowerCase();\r\n    return queryTransport(this.transports[options.transport], callback);\r\n  }\r\n\r\n  //\r\n  // Create a list of all transports for this instance.\r\n  //\r\n  transports = this._names.map(function (name) {\r\n    return self.transports[name];\r\n  }).filter(function (transport) {\r\n    return !!transport.query;\r\n  });\r\n\r\n  //\r\n  // Iterate over the transports in parallel setting the\r\n  // appropriate key in the `results`\r\n  //\r\n  async.forEach(transports, addResults, function () {\r\n    callback(null, results);\r\n  });\r\n};\r\n\r\n//\r\n// ### function stream (options)\r\n// #### @options {Object} Stream options for this instance.\r\n// Returns a log stream for all transports. Options object is optional.\r\n//\r\nLogger.prototype.stream = function (options) {\r\n  var self = this,\r\n      options = options || {},\r\n      out = new Stream,\r\n      streams = [],\r\n      transports;\r\n\r\n  if (options.transport) {\r\n    var transport = this.transports[options.transport];\r\n    delete options.transport;\r\n    if (transport && transport.stream) {\r\n      return transport.stream(options);\r\n    }\r\n  }\r\n\r\n  out._streams = streams;\r\n  out.destroy = function () {\r\n    var i = streams.length;\r\n    while (i--) streams[i].destroy();\r\n  };\r\n\r\n  //\r\n  // Create a list of all transports for this instance.\r\n  //\r\n  transports = this._names.map(function (name) {\r\n    return self.transports[name];\r\n  }).filter(function (transport) {\r\n    return !!transport.stream;\r\n  });\r\n\r\n  transports.forEach(function (transport) {\r\n    var stream = transport.stream(options);\r\n    if (!stream) return;\r\n\r\n    streams.push(stream);\r\n\r\n    stream.on('log', function (log) {\r\n      log.transport = log.transport || [];\r\n      log.transport.push(transport.name);\r\n      out.emit('log', log);\r\n    });\r\n\r\n    stream.on('error', function (err) {\r\n      err.transport = err.transport || [];\r\n      err.transport.push(transport.name);\r\n      out.emit('error', err);\r\n    });\r\n  });\r\n\r\n  return out;\r\n};\r\n\r\n//\r\n// ### function close ()\r\n// Cleans up resources (streams, event listeners) for all\r\n// transports associated with this instance (if necessary).\r\n//\r\nLogger.prototype.close = function () {\r\n  var self = this;\r\n\r\n  this._names.forEach(function (name) {\r\n    var transport = self.transports[name];\r\n    if (transport && transport.close) {\r\n      transport.close();\r\n    }\r\n  });\r\n\r\n  this.emit('close');\r\n};\r\n\r\n//\r\n// ### function handleExceptions ([tr0, tr1...] || tr0, tr1, ...)\r\n// Handles `uncaughtException` events for the current process by\r\n// ADDING any handlers passed in.\r\n//\r\nLogger.prototype.handleExceptions = function () {\r\n  var args = Array.prototype.slice.call(arguments),\r\n      handlers = [],\r\n      self = this;\r\n\r\n  args.forEach(function (a) {\r\n    if (Array.isArray(a)) {\r\n      handlers = handlers.concat(a);\r\n    }\r\n    else {\r\n      handlers.push(a);\r\n    }\r\n  });\r\n\r\n  this.exceptionHandlers = this.exceptionHandlers || {};\r\n  handlers.forEach(function (handler) {\r\n    self.exceptionHandlers[handler.name] = handler;\r\n  });\r\n\r\n  this._hnames = Object.keys(self.exceptionHandlers);\r\n\r\n  if (!this.catchExceptions) {\r\n    this.catchExceptions = this._uncaughtException.bind(this);\r\n    process.on('uncaughtException', this.catchExceptions);\r\n  }\r\n};\r\n\r\n//\r\n// ### function unhandleExceptions ()\r\n// Removes any handlers to `uncaughtException` events\r\n// for the current process\r\n//\r\nLogger.prototype.unhandleExceptions = function () {\r\n  var self = this;\r\n\r\n  if (this.catchExceptions) {\r\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\r\n      var handler = self.exceptionHandlers[name];\r\n      if (handler.close) {\r\n        handler.close();\r\n      }\r\n    });\r\n\r\n    this.exceptionHandlers = {};\r\n    Object.keys(this.transports).forEach(function (name) {\r\n      var transport = self.transports[name];\r\n      if (transport.handleExceptions) {\r\n        transport.handleExceptions = false;\r\n      }\r\n    })\r\n\r\n    process.removeListener('uncaughtException', this.catchExceptions);\r\n    this.catchExceptions = false;\r\n  }\r\n};\r\n\r\n//\r\n// ### function add (transport, [options])\r\n// #### @transport {Transport} Prototype of the Transport object to add.\r\n// #### @options {Object} **Optional** Options for the Transport to add.\r\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\r\n// Adds a transport of the specified type to this instance.\r\n//\r\nLogger.prototype.add = function (transport, options, created) {\r\n  var instance = created ? transport : (new (transport)(options));\r\n\r\n  if (!instance.name && !instance.log) {\r\n    throw new Error('Unknown transport with no log() method');\r\n  }\r\n  else if (this.transports[instance.name]) {\r\n    throw new Error('Transport already attached: ' + instance.name + \", assign a different name\");\r\n  }\r\n\r\n  this.transports[instance.name] = instance;\r\n  this._names = Object.keys(this.transports);\r\n\r\n  //\r\n  // Listen for the `error` event on the new Transport\r\n  //\r\n  instance._onError = this._onError.bind(this, instance)\r\n  if (!created) {\r\n    instance.on('error', instance._onError);\r\n  }\r\n\r\n  //\r\n  // If this transport has `handleExceptions` set to `true`\r\n  // and we are not already handling exceptions, do so.\r\n  //\r\n  if (instance.handleExceptions && !this.catchExceptions) {\r\n    this.handleExceptions();\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n//\r\n// ### function clear ()\r\n// Remove all transports from this instance\r\n//\r\nLogger.prototype.clear = function () {\r\n  Object.keys(this.transports).forEach(function (name) {\r\n    this.remove({ name: name });\r\n  }, this);\r\n};\r\n\r\n//\r\n// ### function remove (transport)\r\n// #### @transport {Transport|String} Transport or Name to remove.\r\n// Removes a transport of the specified type from this instance.\r\n//\r\nLogger.prototype.remove = function (transport) {\r\n  var name = typeof transport !== 'string'\r\n    ? transport.name || transport.prototype.name\r\n    : transport;\r\n\r\n  if (!this.transports[name]) {\r\n    throw new Error('Transport ' + name + ' not attached to this instance');\r\n  }\r\n\r\n  var instance = this.transports[name];\r\n  delete this.transports[name];\r\n  this._names = Object.keys(this.transports);\r\n\r\n  if (instance.close) {\r\n    instance.close();\r\n  }\r\n\r\n  if (instance._onError) {\r\n    instance.removeListener('error', instance._onError);\r\n  }\r\n  return this;\r\n};\r\n\r\n//\r\n// ### function startTimer ()\r\n// Returns an object corresponding to a specific timing. When done\r\n// is called the timer will finish and log the duration. e.g.:\r\n//\r\n//    timer = winston.startTimer()\r\n//    setTimeout(function(){\r\n//      timer.done(\"Logging message\");\r\n//    }, 1000);\r\n//\r\nLogger.prototype.startTimer = function () {\r\n  return new ProfileHandler(this);\r\n};\r\n\r\n//\r\n// ### function profile (id, [msg, meta, callback])\r\n// #### @id {string} Unique id of the profiler\r\n// #### @msg {string} **Optional** Message to log\r\n// #### @meta {Object} **Optional** Additional metadata to attach\r\n// #### @callback {function} **Optional** Continuation to respond to when complete.\r\n// Tracks the time inbetween subsequent calls to this method\r\n// with the same `id` parameter. The second call to this method\r\n// will log the difference in milliseconds along with the message.\r\n//\r\nLogger.prototype.profile = function (id) {\r\n  var now = Date.now(), then, args,\r\n      msg, meta, callback;\r\n\r\n  if (this.profilers[id]) {\r\n    then = this.profilers[id];\r\n    delete this.profilers[id];\r\n\r\n    // Support variable arguments: msg, meta, callback\r\n    args     = Array.prototype.slice.call(arguments);\r\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\r\n    meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\r\n    msg      = args.length === 2 ? args[1] : id;\r\n\r\n    // Set the duration property of the metadata\r\n    meta.durationMs = now - then;\r\n    return this.info(msg, meta, callback);\r\n  }\r\n  else {\r\n    this.profilers[id] = now;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n//\r\n// ### function setLevels (target)\r\n// #### @target {Object} Target levels to use on this instance\r\n// Sets the `target` levels specified on this instance.\r\n//\r\nLogger.prototype.setLevels = function (target) {\r\n  return common.setLevels(this, this.levels, target);\r\n};\r\n\r\n//\r\n// ### function cli ()\r\n// Configures this instance to have the default\r\n// settings for command-line interfaces: no timestamp,\r\n// colors enabled, padded output, and additional levels.\r\n//\r\nLogger.prototype.cli = function () {\r\n  this.padLevels = true;\r\n  this.setLevels(config.cli.levels);\r\n  config.addColors(config.cli.colors);\r\n\r\n  if (this.transports.console) {\r\n    this.transports.console.colorize = this.transports.console.colorize || true;\r\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n//\r\n// ### @private function _uncaughtException (err)\r\n// #### @err {Error} Error to handle\r\n// Logs all relevant information around the `err` and\r\n// exits the current process.\r\n//\r\nLogger.prototype._uncaughtException = function (err) {\r\n  var self = this,\r\n      responded = false,\r\n      info = exception.getAllInfo(err),\r\n      handlers = this._getExceptionHandlers(),\r\n      timeout,\r\n      doExit;\r\n\r\n  //\r\n  // Calculate if we should exit on this error\r\n  //\r\n  doExit = typeof this.exitOnError === 'function'\r\n    ? this.exitOnError(err)\r\n    : this.exitOnError;\r\n\r\n  function logAndWait(transport, next) {\r\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\r\n  }\r\n\r\n  function gracefulExit() {\r\n    if (doExit && !responded) {\r\n      //\r\n      // Remark: Currently ignoring any exceptions from transports\r\n      //         when catching uncaught exceptions.\r\n      //\r\n      clearTimeout(timeout);\r\n      responded = true;\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  if (!handlers || handlers.length === 0) {\r\n    return gracefulExit();\r\n  }\r\n\r\n  //\r\n  // Log to all transports and allow the operation to take\r\n  // only up to `3000ms`.\r\n  //\r\n  async.forEach(handlers, logAndWait, gracefulExit);\r\n  if (doExit) {\r\n    timeout = setTimeout(gracefulExit, 3000);\r\n  }\r\n};\r\n\r\n//\r\n// ### @private function _getExceptionHandlers ()\r\n// Returns the list of transports and exceptionHandlers\r\n// for this instance.\r\n//\r\nLogger.prototype._getExceptionHandlers = function () {\r\n  var self = this;\r\n\r\n  return this._hnames.map(function (name) {\r\n    return self.exceptionHandlers[name];\r\n  }).concat(this._names.map(function (name) {\r\n    return self.transports[name].handleExceptions && self.transports[name];\r\n  })).filter(Boolean);\r\n};\r\n\r\n//\r\n// ### @private function _onError (transport, err)\r\n// #### @transport {Object} Transport on which the error occured\r\n// #### @err {Error} Error that occurred on the transport\r\n// Bubbles the error, `err`, that occured on the specified `transport`\r\n// up from this instance if `emitErrs` has been set.\r\n//\r\nLogger.prototype._onError = function (transport, err) {\r\n  if (this.emitErrs) {\r\n    this.emit('error', err, transport);\r\n  }\r\n};\r\n\r\n//\r\n// ### @private ProfileHandler\r\n// Constructor function for the ProfileHandler instance used by\r\n// `Logger.prototype.startTimer`. When done is called the timer\r\n// will finish and log the duration.\r\n//\r\nfunction ProfileHandler(logger) {\r\n  this.logger = logger;\r\n  this.start = Date.now();\r\n}\r\n\r\n//\r\n// ### function done (msg)\r\n// Ends the current timer (i.e. ProfileHandler) instance and\r\n// logs the `msg` along with the duration since creation.\r\n//\r\nProfileHandler.prototype.done = function (msg) {\r\n  var args     = Array.prototype.slice.call(arguments),\r\n      callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\r\n      meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\r\n\r\n  meta.duration = (Date.now()) - this.start + 'ms';\r\n  return this.logger.info(msg, meta, callback);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}