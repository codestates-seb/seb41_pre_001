{"ast":null,"code":"/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  var end = list.length;\n  var chunkStart = 0;\n  /** @type {unknown[]} */\n\n  var parameters; // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;\n    [].splice.apply(list, parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;\n      [].splice.apply(list, parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","map":{"version":3,"names":["splice","list","start","remove","items","end","length","chunkStart","parameters","Array","from","unshift","apply","slice","push"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-util-chunked/index.js"],"sourcesContent":["/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;EACjD,IAAMC,GAAG,GAAGJ,IAAI,CAACK,MAAM;EACvB,IAAIC,UAAU,GAAG,CAAC;EAClB;;EAEA,IAAIC,UAAU,EAAC;;EAEf,IAAIN,KAAK,GAAG,CAAC,EAAE;IACbA,KAAK,GAAG,CAACA,KAAK,GAAGG,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAGH,KAAK;EACxC,CAAC,MAAM;IACLA,KAAK,GAAGA,KAAK,GAAGG,GAAG,GAAGA,GAAG,GAAGH,KAAK;EACnC;EAEAC,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAGA,MAAM,GAAG,CAAC,EAAC;;EAEjC,IAAIC,KAAK,CAACE,MAAM,GAAG,KAAK,EAAE;IACxBE,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC;IAC9BI,UAAU,CAACG,OAAO,CAACT,KAAK,EAAEC,MAAM,CAAC,CAAC;IAAA;IACjC,EAAE,CAACH,MAAM,CAACY,KAAK,CAACX,IAAI,EAAEO,UAAU,CAAC;EACpC,CAAC,MAAM;IACL;IACA,IAAIL,MAAM,EAAE,EAAE,CAACH,MAAM,CAACY,KAAK,CAACX,IAAI,EAAE,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC,EAAC;;IAEnD,OAAOI,UAAU,GAAGH,KAAK,CAACE,MAAM,EAAE;MAChCE,UAAU,GAAGJ,KAAK,CAACS,KAAK,CAACN,UAAU,EAAEA,UAAU,GAAG,KAAK,CAAC;MACxDC,UAAU,CAACG,OAAO,CAACT,KAAK,EAAE,CAAC,CAAC,CAAC;MAAA;MAC5B,EAAE,CAACF,MAAM,CAACY,KAAK,CAACX,IAAI,EAAEO,UAAU,CAAC;MAClCD,UAAU,IAAI,KAAK;MACnBL,KAAK,IAAI,KAAK;IAChB;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASY,IAAI,CAACb,IAAI,EAAEG,KAAK,EAAE;EAChC,IAAIH,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;IACnBN,MAAM,CAACC,IAAI,EAAEA,IAAI,CAACK,MAAM,EAAE,CAAC,EAAEF,KAAK,CAAC;IACnC,OAAOH,IAAI;EACb;EAEA,OAAOG,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}