{"ast":null,"code":"// @ts-nocheck\ncue.displayName = 'cue';\ncue.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function cue(Prism) {\n  ;\n  (function (Prism) {\n    // https://cuelang.org/docs/references/spec/\n    // eslint-disable-next-line regexp/strict\n    var stringEscape = /\\\\(?:(?!\\2)|\\2(?:[^()\\r\\n]|\\([^()]*\\)))/.source; // eslint-disable-next-line regexp/strict\n\n    var stringTypes = /\"\"\"(?:[^\\\\\"]|\"(?!\"\"\\2)|<esc>)*\"\"\"/.source +\n    // eslint-disable-next-line regexp/strict\n    '|' + /'''(?:[^\\\\']|'(?!''\\2)|<esc>)*'''/.source +\n    // eslint-disable-next-line regexp/strict\n    '|' + /\"(?:[^\\\\\\r\\n\"]|\"(?!\\2)|<esc>)*\"/.source +\n    // eslint-disable-next-line regexp/strict\n    '|' + /'(?:[^\\\\\\r\\n']|'(?!\\2)|<esc>)*'/.source;\n    var stringLiteral = '(?:' + stringTypes.replace(/<esc>/g, stringEscape) + ')';\n    Prism.languages.cue = {\n      comment: {\n        pattern: /\\/\\/.*/,\n        greedy: true\n      },\n      'string-literal': {\n        // eslint-disable-next-line regexp/strict\n        pattern: RegExp(/(^|[^#\"'\\\\])(#*)/.source + stringLiteral + /(?![\"'])\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // I'm using dirty hack here. We have to know the number hashes at the start of the string somehow,\n          // but we can't look back. So instead, we will use a lookahead, go to the end of the string, and\n          // capture the hashes at the end of the string.\n          escape: {\n            pattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1(?:U[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{1,4}|x[a-fA-F0-9]{1,2}|\\d{2,3}|[^(])/,\n            greedy: true,\n            alias: 'string'\n          },\n          interpolation: {\n            pattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1\\([^()]*\\)/,\n            greedy: true,\n            inside: {\n              punctuation: /^\\\\#*\\(|\\)$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      keyword: {\n        pattern: /(^|[^\\w$])(?:for|if|import|in|let|null|package)(?![\\w$])/,\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[^\\w$])(?:false|true)(?![\\w$])/,\n        lookbehind: true\n      },\n      builtin: {\n        pattern: /(^|[^\\w$])(?:bool|bytes|float|float(?:32|64)|u?int(?:8|16|32|64|128)?|number|rune|string)(?![\\w$])/,\n        lookbehind: true\n      },\n      attribute: {\n        pattern: /@[\\w$]+(?=\\s*\\()/,\n        alias: 'function'\n      },\n      function: {\n        pattern: /(^|[^\\w$])[a-z_$][\\w$]*(?=\\s*\\()/i,\n        lookbehind: true\n      },\n      number: {\n        pattern: /(^|[^\\w$.])(?:0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[eE][+-]?\\d+(?:_\\d+)*)?(?:[KMGTP]i?)?)(?![\\w$])/,\n        lookbehind: true\n      },\n      operator: /\\.{3}|_\\|_|&&?|\\|\\|?|[=!]~|[<>=!]=?|[+\\-*/?]/,\n      punctuation: /[()[\\]{},.:]/\n    };\n    Prism.languages.cue['string-literal'].inside.interpolation.inside.expression.inside = Prism.languages.cue;\n  })(Prism);\n}","map":{"version":3,"names":["cue","displayName","aliases","Prism","stringEscape","source","stringTypes","stringLiteral","replace","languages","comment","pattern","greedy","RegExp","lookbehind","inside","escape","alias","interpolation","punctuation","expression","string","keyword","boolean","builtin","attribute","function","number","operator"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/cue.js"],"sourcesContent":["// @ts-nocheck\ncue.displayName = 'cue'\ncue.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cue(Prism) {\n  ;(function (Prism) {\n    // https://cuelang.org/docs/references/spec/\n    // eslint-disable-next-line regexp/strict\n    var stringEscape = /\\\\(?:(?!\\2)|\\2(?:[^()\\r\\n]|\\([^()]*\\)))/.source // eslint-disable-next-line regexp/strict\n\n    var stringTypes =\n      /\"\"\"(?:[^\\\\\"]|\"(?!\"\"\\2)|<esc>)*\"\"\"/.source + // eslint-disable-next-line regexp/strict\n      '|' +\n      /'''(?:[^\\\\']|'(?!''\\2)|<esc>)*'''/.source + // eslint-disable-next-line regexp/strict\n      '|' +\n      /\"(?:[^\\\\\\r\\n\"]|\"(?!\\2)|<esc>)*\"/.source + // eslint-disable-next-line regexp/strict\n      '|' +\n      /'(?:[^\\\\\\r\\n']|'(?!\\2)|<esc>)*'/.source\n    var stringLiteral =\n      '(?:' + stringTypes.replace(/<esc>/g, stringEscape) + ')'\n    Prism.languages.cue = {\n      comment: {\n        pattern: /\\/\\/.*/,\n        greedy: true\n      },\n      'string-literal': {\n        // eslint-disable-next-line regexp/strict\n        pattern: RegExp(\n          /(^|[^#\"'\\\\])(#*)/.source + stringLiteral + /(?![\"'])\\2/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // I'm using dirty hack here. We have to know the number hashes at the start of the string somehow,\n          // but we can't look back. So instead, we will use a lookahead, go to the end of the string, and\n          // capture the hashes at the end of the string.\n          escape: {\n            pattern:\n              /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1(?:U[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{1,4}|x[a-fA-F0-9]{1,2}|\\d{2,3}|[^(])/,\n            greedy: true,\n            alias: 'string'\n          },\n          interpolation: {\n            pattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1\\([^()]*\\)/,\n            greedy: true,\n            inside: {\n              punctuation: /^\\\\#*\\(|\\)$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      keyword: {\n        pattern: /(^|[^\\w$])(?:for|if|import|in|let|null|package)(?![\\w$])/,\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[^\\w$])(?:false|true)(?![\\w$])/,\n        lookbehind: true\n      },\n      builtin: {\n        pattern:\n          /(^|[^\\w$])(?:bool|bytes|float|float(?:32|64)|u?int(?:8|16|32|64|128)?|number|rune|string)(?![\\w$])/,\n        lookbehind: true\n      },\n      attribute: {\n        pattern: /@[\\w$]+(?=\\s*\\()/,\n        alias: 'function'\n      },\n      function: {\n        pattern: /(^|[^\\w$])[a-z_$][\\w$]*(?=\\s*\\()/i,\n        lookbehind: true\n      },\n      number: {\n        pattern:\n          /(^|[^\\w$.])(?:0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[eE][+-]?\\d+(?:_\\d+)*)?(?:[KMGTP]i?)?)(?![\\w$])/,\n        lookbehind: true\n      },\n      operator: /\\.{3}|_\\|_|&&?|\\|\\|?|[=!]~|[<>=!]=?|[+\\-*/?]/,\n      punctuation: /[()[\\]{},.:]/\n    }\n    Prism.languages.cue[\n      'string-literal'\n    ].inside.interpolation.inside.expression.inside = Prism.languages.cue\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,GAAG,CAACC,WAAW,GAAG,KAAK;AACvBD,GAAG,CAACE,OAAO,GAAG,EAAE;;AAEhB;AACA,eAAe,SAASF,GAAG,CAACG,KAAK,EAAE;EACjC;EAAC,CAAC,UAAUA,KAAK,EAAE;IACjB;IACA;IACA,IAAIC,YAAY,GAAG,yCAAyC,CAACC,MAAM,EAAC;;IAEpE,IAAIC,WAAW,GACb,mCAAmC,CAACD,MAAM;IAAG;IAC7C,GAAG,GACH,mCAAmC,CAACA,MAAM;IAAG;IAC7C,GAAG,GACH,iCAAiC,CAACA,MAAM;IAAG;IAC3C,GAAG,GACH,iCAAiC,CAACA,MAAM;IAC1C,IAAIE,aAAa,GACf,KAAK,GAAGD,WAAW,CAACE,OAAO,CAAC,QAAQ,EAAEJ,YAAY,CAAC,GAAG,GAAG;IAC3DD,KAAK,CAACM,SAAS,CAACT,GAAG,GAAG;MACpBU,OAAO,EAAE;QACPC,OAAO,EAAE,QAAQ;QACjBC,MAAM,EAAE;MACV,CAAC;MACD,gBAAgB,EAAE;QAChB;QACAD,OAAO,EAAEE,MAAM,CACb,kBAAkB,CAACR,MAAM,GAAGE,aAAa,GAAG,YAAY,CAACF,MAAM,CAChE;QACDS,UAAU,EAAE,IAAI;QAChBF,MAAM,EAAE,IAAI;QACZG,MAAM,EAAE;UACN;UACA;UACA;UACAC,MAAM,EAAE;YACNL,OAAO,EACL,gGAAgG;YAClGC,MAAM,EAAE,IAAI;YACZK,KAAK,EAAE;UACT,CAAC;UACDC,aAAa,EAAE;YACbP,OAAO,EAAE,oCAAoC;YAC7CC,MAAM,EAAE,IAAI;YACZG,MAAM,EAAE;cACNI,WAAW,EAAE,aAAa;cAC1BC,UAAU,EAAE;gBACVT,OAAO,EAAE,SAAS;gBAClBI,MAAM,EAAE;cACV;YACF;UACF,CAAC;UACDM,MAAM,EAAE;QACV;MACF,CAAC;MACDC,OAAO,EAAE;QACPX,OAAO,EAAE,0DAA0D;QACnEG,UAAU,EAAE;MACd,CAAC;MACDS,OAAO,EAAE;QACPZ,OAAO,EAAE,mCAAmC;QAC5CG,UAAU,EAAE;MACd,CAAC;MACDU,OAAO,EAAE;QACPb,OAAO,EACL,oGAAoG;QACtGG,UAAU,EAAE;MACd,CAAC;MACDW,SAAS,EAAE;QACTd,OAAO,EAAE,kBAAkB;QAC3BM,KAAK,EAAE;MACT,CAAC;MACDS,QAAQ,EAAE;QACRf,OAAO,EAAE,mCAAmC;QAC5CG,UAAU,EAAE;MACd,CAAC;MACDa,MAAM,EAAE;QACNhB,OAAO,EACL,qMAAqM;QACvMG,UAAU,EAAE;MACd,CAAC;MACDc,QAAQ,EAAE,8CAA8C;MACxDT,WAAW,EAAE;IACf,CAAC;IACDhB,KAAK,CAACM,SAAS,CAACT,GAAG,CACjB,gBAAgB,CACjB,CAACe,MAAM,CAACG,aAAa,CAACH,MAAM,CAACK,UAAU,CAACL,MAAM,GAAGZ,KAAK,CAACM,SAAS,CAACT,GAAG;EACvE,CAAC,EAAEG,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}