{"ast":null,"code":"/**\n * @typedef {import('parse5').Node} P5Node\n * @typedef {import('parse5').Document} P5Document\n * @typedef {import('parse5').DocumentFragment} P5Fragment\n * @typedef {import('parse5').DocumentType} P5Doctype\n * @typedef {import('parse5').CommentNode} P5Comment\n * @typedef {import('parse5').TextNode} P5Text\n * @typedef {import('parse5').Element} P5Element\n * @typedef {import('parse5').Attribute} P5Attribute\n * @typedef {import('parse5').ParentNode} P5Parent\n * @typedef {Exclude<P5Node, P5Document|P5Fragment>} P5Child\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('property-information').Info} Info\n * @typedef {'html'|'svg'} Space\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {Parent['children'][number]} Child\n * @typedef {Child|Root} Node\n *\n * @callback Handle\n * @param {Node} node\n * @param {Schema} schema\n * @returns {P5Node}\n */\n\nimport { html, svg, find } from 'property-information';\nimport { toH } from 'hast-to-hyperscript';\nimport { webNamespaces } from 'web-namespaces';\nimport { zwitch } from 'zwitch';\nvar own = {}.hasOwnProperty;\nvar one = zwitch('type', {\n  handlers: {\n    root,\n    element,\n    text,\n    comment,\n    doctype\n  }\n});\n\n/**\n * Transform a tree from hast to Parse5’s AST.\n *\n * @param {Node} tree\n * @param {Space} [space='html']\n * @returns {P5Node}\n */\nexport function toParse5(tree, space) {\n  // @ts-ignore Types are wrong.\n  return one(tree, space === 'svg' ? svg : html);\n}\n\n/**\n * @type {Handle}\n * @param {Root} node\n * @returns {P5Document}\n */\nfunction root(node, schema) {\n  /** @type {P5Document} */\n  var p5 = {\n    nodeName: '#document',\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  };\n  // @ts-ignore Assume correct children.\n  p5.childNodes = all(node.children, p5, schema);\n  return patch(node, p5);\n}\n\n/**\n * @type {Handle}\n * @param {Root} node\n * @returns {P5Fragment}\n */\nfunction fragment(node, schema) {\n  /** @type {P5Fragment} */\n  var p5 = {\n    nodeName: '#document-fragment',\n    childNodes: []\n  };\n  // @ts-ignore Assume correct children.\n  p5.childNodes = all(node.children, p5, schema);\n  return patch(node, p5);\n}\n\n/**\n * @type {Handle}\n * @param {Doctype} node\n * @returns {P5Doctype}\n */\nfunction doctype(node) {\n  return patch(node, {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: undefined\n  });\n}\n\n/**\n * @type {Handle}\n * @param {Text} node\n * @returns {P5Text}\n */\nfunction text(node) {\n  return patch(node, {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: undefined\n  });\n}\n\n/**\n * @type {Handle}\n * @param {Comment} node\n * @returns {P5Comment}\n */\nfunction comment(node) {\n  return patch(node, {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: undefined\n  });\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n * @returns {P5Element}\n */\nfunction element(node, schema) {\n  /** @type {Space} */\n  // @ts-ignore Assume space.\n  var space = schema.space;\n  return toH(h, Object.assign({}, node, {\n    children: []\n  }), {\n    space\n  });\n\n  /**\n   * @param {string} name\n   * @param {Object.<string, string|boolean|number>} attrs\n   */\n  function h(name, attrs) {\n    /** @type {Array.<P5Attribute>} */\n    var values = [];\n    /** @type {Info} */\n    var info;\n    /** @type {P5Attribute} */\n    var value;\n    /** @type {string} */\n    var key;\n    /** @type {number} */\n    var index;\n    /** @type {P5Element} */\n    var p5;\n    for (key in attrs) {\n      if (!own.call(attrs, key) || attrs[key] === false) {\n        continue;\n      }\n      info = find(schema, key);\n      if (info.boolean && !attrs[key]) {\n        continue;\n      }\n      value = {\n        name: key,\n        value: attrs[key] === true ? '' : String(attrs[key])\n      };\n      if (info.space && info.space !== 'html' && info.space !== 'svg') {\n        index = key.indexOf(':');\n        if (index < 0) {\n          value.prefix = '';\n        } else {\n          value.name = key.slice(index + 1);\n          value.prefix = key.slice(0, index);\n        }\n        value.namespace = webNamespaces[info.space];\n      }\n      values.push(value);\n    }\n    if (schema.space === 'html' && node.tagName === 'svg') schema = svg;\n    p5 = patch(node, {\n      nodeName: name,\n      tagName: name,\n      attrs: values,\n      namespaceURI: webNamespaces[schema.space],\n      childNodes: [],\n      parentNode: undefined\n    });\n\n    // @ts-ignore Assume correct children.\n    p5.childNodes = all(node.children, p5, schema);\n\n    // @ts-ignore Types are wrong.\n    if (name === 'template') p5.content = fragment(node.content, schema);\n    return p5;\n  }\n}\n\n/**\n * @param {Array.<Child>} children\n * @param {P5Parent} p5\n * @param {Schema} schema\n * @returns {Array.<P5Child>}\n */\nfunction all(children, p5, schema) {\n  var index = -1;\n  /** @type {Array.<P5Child>} */\n  var result = [];\n  /** @type {P5Child} */\n  var child;\n  if (children) {\n    while (++index < children.length) {\n      // @ts-ignore Assume child.\n      child = one(children[index], schema);\n\n      // @ts-ignore types are wrong.\n      child.parentNode = p5;\n      result.push(child);\n    }\n  }\n  return result;\n}\n\n/**\n * Patch specific properties.\n *\n * @template {P5Node} T\n * @param {Node} node\n * @param {T} p5\n * @returns {T}\n */\nfunction patch(node, p5) {\n  var position = node.position;\n  if (position && position.start && position.end) {\n    // @ts-ignore Types are wrong.\n    p5.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    };\n  }\n  return p5;\n}","map":{"version":3,"names":["html","svg","find","toH","webNamespaces","zwitch","own","hasOwnProperty","one","handlers","root","element","text","comment","doctype","toParse5","tree","space","node","schema","p5","nodeName","mode","data","quirksMode","childNodes","all","children","patch","fragment","name","publicId","systemId","parentNode","undefined","value","h","Object","assign","attrs","values","info","key","index","call","boolean","String","indexOf","prefix","slice","namespace","push","tagName","namespaceURI","content","result","child","length","position","start","end","sourceCodeLocation","startLine","line","startCol","column","startOffset","offset","endLine","endCol","endOffset"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-parse5/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('parse5').Node} P5Node\n * @typedef {import('parse5').Document} P5Document\n * @typedef {import('parse5').DocumentFragment} P5Fragment\n * @typedef {import('parse5').DocumentType} P5Doctype\n * @typedef {import('parse5').CommentNode} P5Comment\n * @typedef {import('parse5').TextNode} P5Text\n * @typedef {import('parse5').Element} P5Element\n * @typedef {import('parse5').Attribute} P5Attribute\n * @typedef {import('parse5').ParentNode} P5Parent\n * @typedef {Exclude<P5Node, P5Document|P5Fragment>} P5Child\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('property-information').Info} Info\n * @typedef {'html'|'svg'} Space\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {Parent['children'][number]} Child\n * @typedef {Child|Root} Node\n *\n * @callback Handle\n * @param {Node} node\n * @param {Schema} schema\n * @returns {P5Node}\n */\n\nimport {html, svg, find} from 'property-information'\nimport {toH} from 'hast-to-hyperscript'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nvar own = {}.hasOwnProperty\n\nvar one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a tree from hast to Parse5’s AST.\n *\n * @param {Node} tree\n * @param {Space} [space='html']\n * @returns {P5Node}\n */\nexport function toParse5(tree, space) {\n  // @ts-ignore Types are wrong.\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @type {Handle}\n * @param {Root} node\n * @returns {P5Document}\n */\nfunction root(node, schema) {\n  /** @type {P5Document} */\n  var p5 = {\n    nodeName: '#document',\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  // @ts-ignore Assume correct children.\n  p5.childNodes = all(node.children, p5, schema)\n  return patch(node, p5)\n}\n\n/**\n * @type {Handle}\n * @param {Root} node\n * @returns {P5Fragment}\n */\nfunction fragment(node, schema) {\n  /** @type {P5Fragment} */\n  var p5 = {nodeName: '#document-fragment', childNodes: []}\n  // @ts-ignore Assume correct children.\n  p5.childNodes = all(node.children, p5, schema)\n  return patch(node, p5)\n}\n\n/**\n * @type {Handle}\n * @param {Doctype} node\n * @returns {P5Doctype}\n */\nfunction doctype(node) {\n  return patch(node, {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: undefined\n  })\n}\n\n/**\n * @type {Handle}\n * @param {Text} node\n * @returns {P5Text}\n */\nfunction text(node) {\n  return patch(node, {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: undefined\n  })\n}\n\n/**\n * @type {Handle}\n * @param {Comment} node\n * @returns {P5Comment}\n */\nfunction comment(node) {\n  return patch(node, {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: undefined\n  })\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n * @returns {P5Element}\n */\nfunction element(node, schema) {\n  /** @type {Space} */\n  // @ts-ignore Assume space.\n  var space = schema.space\n  return toH(h, Object.assign({}, node, {children: []}), {space})\n\n  /**\n   * @param {string} name\n   * @param {Object.<string, string|boolean|number>} attrs\n   */\n  function h(name, attrs) {\n    /** @type {Array.<P5Attribute>} */\n    var values = []\n    /** @type {Info} */\n    var info\n    /** @type {P5Attribute} */\n    var value\n    /** @type {string} */\n    var key\n    /** @type {number} */\n    var index\n    /** @type {P5Element} */\n    var p5\n\n    for (key in attrs) {\n      if (!own.call(attrs, key) || attrs[key] === false) {\n        continue\n      }\n\n      info = find(schema, key)\n\n      if (info.boolean && !attrs[key]) {\n        continue\n      }\n\n      value = {name: key, value: attrs[key] === true ? '' : String(attrs[key])}\n\n      if (info.space && info.space !== 'html' && info.space !== 'svg') {\n        index = key.indexOf(':')\n\n        if (index < 0) {\n          value.prefix = ''\n        } else {\n          value.name = key.slice(index + 1)\n          value.prefix = key.slice(0, index)\n        }\n\n        value.namespace = webNamespaces[info.space]\n      }\n\n      values.push(value)\n    }\n\n    if (schema.space === 'html' && node.tagName === 'svg') schema = svg\n\n    p5 = patch(node, {\n      nodeName: name,\n      tagName: name,\n      attrs: values,\n      namespaceURI: webNamespaces[schema.space],\n      childNodes: [],\n      parentNode: undefined\n    })\n\n    // @ts-ignore Assume correct children.\n    p5.childNodes = all(node.children, p5, schema)\n\n    // @ts-ignore Types are wrong.\n    if (name === 'template') p5.content = fragment(node.content, schema)\n\n    return p5\n  }\n}\n\n/**\n * @param {Array.<Child>} children\n * @param {P5Parent} p5\n * @param {Schema} schema\n * @returns {Array.<P5Child>}\n */\nfunction all(children, p5, schema) {\n  var index = -1\n  /** @type {Array.<P5Child>} */\n  var result = []\n  /** @type {P5Child} */\n  var child\n\n  if (children) {\n    while (++index < children.length) {\n      // @ts-ignore Assume child.\n      child = one(children[index], schema)\n\n      // @ts-ignore types are wrong.\n      child.parentNode = p5\n\n      result.push(child)\n    }\n  }\n\n  return result\n}\n\n/**\n * Patch specific properties.\n *\n * @template {P5Node} T\n * @param {Node} node\n * @param {T} p5\n * @returns {T}\n */\nfunction patch(node, p5) {\n  var position = node.position\n\n  if (position && position.start && position.end) {\n    // @ts-ignore Types are wrong.\n    p5.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n\n  return p5\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}