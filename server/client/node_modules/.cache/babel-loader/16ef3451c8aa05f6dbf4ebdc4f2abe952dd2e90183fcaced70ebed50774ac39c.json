{"ast":null,"code":"/**\n * @typedef _Token A hidden Prism token\n * @property {string} type\n * @property {string} content\n * @property {string} alias\n * @property {number} length\n *\n * @typedef _Env A hidden Prism environment\n * @property {string} type\n * @property {string} tag\n * @property {Text|RefractorElement|Array<Text|RefractorElement>} content\n * @property {Array<string>} classes\n * @property {Record<string, string>} attributes\n * @property {string} language\n *\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Omit<Element, 'children'> & {children: Array<RefractorElement|Text>}} RefractorElement\n * @typedef {Omit<Root, 'children'> & {children: Array<RefractorElement|Text>}} RefractorRoot\n *\n * @typedef {import('prismjs').Languages} Languages\n * @typedef {import('prismjs').Grammar} Grammar Whatever this is, Prism handles it.\n * @typedef {((prism: unknown) => void) & {displayName: string, aliases?: Array<string>}} Syntax A refractor syntax function\n *\n * @typedef Refractor Virtual syntax highlighting\n * @property {highlight} highlight\n * @property {alias} alias\n * @property {register} register\n * @property {registered} registered\n * @property {listLanguages} listLanguages\n * @property {Languages} languages\n */\n\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nimport { h } from 'hastscript';\nimport { parseEntities } from 'parse-entities';\nimport { Prism } from './prism-core.js';\nconst own = {}.hasOwnProperty;\n\n// Inherit.\nfunction Refractor() {}\nRefractor.prototype = Prism;\n\n/** @type {Refractor} */\n// @ts-expect-error: TS is wrong.\nexport const refractor = new Refractor();\n\n// Create.\nrefractor.highlight = highlight;\nrefractor.register = register;\nrefractor.alias = alias;\nrefractor.registered = registered;\nrefractor.listLanguages = listLanguages;\n\n// @ts-expect-error Overwrite Prism.\nrefractor.util.encode = encode;\n// @ts-expect-error Overwrite Prism.\nrefractor.Token.stringify = stringify;\n\n/**\n * Highlight `value` (code) as `language` (programming language).\n *\n * @param {string} value\n *   Code to highlight.\n * @param {string|Grammar} language\n *   Programming language name, alias, or grammar.\n * @returns {RefractorRoot}\n *   Node representing highlighted code.\n */\nfunction highlight(value, language) {\n  if (typeof value !== 'string') {\n    throw new TypeError('Expected `string` for `value`, got `' + value + '`');\n  }\n\n  /** @type {Grammar} */\n  let grammar;\n  /** @type {string|undefined} */\n  let name;\n\n  // `name` is a grammar object.\n  // This was called internally by Prism.js before 1.28.0.\n  /* c8 ignore next 2 */\n  if (language && typeof language === 'object') {\n    grammar = language;\n  } else {\n    name = language;\n    if (typeof name !== 'string') {\n      throw new TypeError('Expected `string` for `name`, got `' + name + '`');\n    }\n    if (own.call(refractor.languages, name)) {\n      grammar = refractor.languages[name];\n    } else {\n      throw new Error('Unknown language: `' + name + '` is not registered');\n    }\n  }\n  return {\n    type: 'root',\n    // @ts-expect-error: we hacked Prism to accept and return the things we want.\n    children: Prism.highlight.call(refractor, value, grammar, name)\n  };\n}\n\n/**\n * Register a syntax.\n *\n * @param {Syntax} syntax\n *   Language function made for refractor, as in, the files in\n *   `refractor/lang/*.js`.\n * @returns {void}\n */\nfunction register(syntax) {\n  if (typeof syntax !== 'function' || !syntax.displayName) {\n    throw new Error('Expected `function` for `syntax`, got `' + syntax + '`');\n  }\n\n  // Do not duplicate registrations.\n  if (!own.call(refractor.languages, syntax.displayName)) {\n    syntax(refractor);\n  }\n}\n\n/**\n * Register aliases for already registered languages.\n *\n * @param {Record<string, string|Array<string>>|string} language\n * @param {string|Array<string>} [alias]\n * @returns {void}\n */\nfunction alias(language, alias) {\n  const languages = refractor.languages;\n  /** @type {Record<string, string|Array<string>>} */\n  let map = {};\n  if (typeof language === 'string') {\n    if (alias) {\n      map[language] = alias;\n    }\n  } else {\n    map = language;\n  }\n\n  /** @type {string} */\n  let key;\n  for (key in map) {\n    if (own.call(map, key)) {\n      const value = map[key];\n      const list = typeof value === 'string' ? [value] : value;\n      let index = -1;\n      while (++index < list.length) {\n        languages[list[index]] = languages[key];\n      }\n    }\n  }\n}\n\n/**\n * Check whether an `alias` or `language` is registered.\n *\n * @param {string} aliasOrLanguage\n * @returns {boolean}\n */\nfunction registered(aliasOrLanguage) {\n  if (typeof aliasOrLanguage !== 'string') {\n    throw new TypeError('Expected `string` for `aliasOrLanguage`, got `' + aliasOrLanguage + '`');\n  }\n  return own.call(refractor.languages, aliasOrLanguage);\n}\n\n/**\n * List all registered languages (names and aliases).\n *\n * @returns {Array<string>}\n */\nfunction listLanguages() {\n  const languages = refractor.languages;\n  /** @type {Array<string>} */\n  const list = [];\n  /** @type {string} */\n  let language;\n  for (language in languages) {\n    if (own.call(languages, language) && typeof languages[language] === 'object') {\n      list.push(language);\n    }\n  }\n  return list;\n}\n\n/**\n * @param {string|_Token|Array<string|_Token>} value\n * @param {string} language\n * @returns {Text|RefractorElement|Array<Text|RefractorElement>}\n */\nfunction stringify(value, language) {\n  if (typeof value === 'string') {\n    return {\n      type: 'text',\n      value\n    };\n  }\n  if (Array.isArray(value)) {\n    /** @type {Array<Text|RefractorElement>} */\n    const result = [];\n    let index = -1;\n    while (++index < value.length) {\n      if (value[index] !== '' && value[index] !== null && value[index] !== undefined) {\n        // @ts-expect-error Assume no sub-arrays.\n        result.push(stringify(value[index], language));\n      }\n    }\n    return result;\n  }\n\n  /** @type {_Env} */\n  const env = {\n    type: value.type,\n    content: stringify(value.content, language),\n    tag: 'span',\n    classes: ['token', value.type],\n    attributes: {},\n    language\n  };\n  if (value.alias) {\n    env.classes.push(...(typeof value.alias === 'string' ? [value.alias] : value.alias));\n  }\n\n  // @ts-expect-error Prism.\n  refractor.hooks.run('wrap', env);\n\n  // @ts-expect-error Hush, it’s fine.\n  return h(env.tag + '.' + env.classes.join('.'), attributes(env.attributes), env.content);\n}\n\n/**\n * @template {unknown} T\n * @param {T} tokens\n * @returns {T}\n */\nfunction encode(tokens) {\n  return tokens;\n}\n\n/**\n * @param {Record<string, string>} attrs\n * @returns {Record<string, string>}\n */\nfunction attributes(attrs) {\n  /** @type {string} */\n  let key;\n  for (key in attrs) {\n    if (own.call(attrs, key)) {\n      attrs[key] = parseEntities(attrs[key]);\n    }\n  }\n  return attrs;\n}","map":{"version":3,"names":["h","parseEntities","Prism","own","hasOwnProperty","Refractor","prototype","refractor","highlight","register","alias","registered","listLanguages","util","encode","Token","stringify","value","language","TypeError","grammar","name","call","languages","Error","type","children","syntax","displayName","map","key","list","index","length","aliasOrLanguage","push","Array","isArray","result","undefined","env","content","tag","classes","attributes","hooks","run","join","tokens","attrs"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lib/core.js"],"sourcesContent":["/**\n * @typedef _Token A hidden Prism token\n * @property {string} type\n * @property {string} content\n * @property {string} alias\n * @property {number} length\n *\n * @typedef _Env A hidden Prism environment\n * @property {string} type\n * @property {string} tag\n * @property {Text|RefractorElement|Array<Text|RefractorElement>} content\n * @property {Array<string>} classes\n * @property {Record<string, string>} attributes\n * @property {string} language\n *\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Omit<Element, 'children'> & {children: Array<RefractorElement|Text>}} RefractorElement\n * @typedef {Omit<Root, 'children'> & {children: Array<RefractorElement|Text>}} RefractorRoot\n *\n * @typedef {import('prismjs').Languages} Languages\n * @typedef {import('prismjs').Grammar} Grammar Whatever this is, Prism handles it.\n * @typedef {((prism: unknown) => void) & {displayName: string, aliases?: Array<string>}} Syntax A refractor syntax function\n *\n * @typedef Refractor Virtual syntax highlighting\n * @property {highlight} highlight\n * @property {alias} alias\n * @property {register} register\n * @property {registered} registered\n * @property {listLanguages} listLanguages\n * @property {Languages} languages\n */\n\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nimport {h} from 'hastscript'\nimport {parseEntities} from 'parse-entities'\nimport {Prism} from './prism-core.js'\n\nconst own = {}.hasOwnProperty\n\n// Inherit.\nfunction Refractor() {}\n\nRefractor.prototype = Prism\n\n/** @type {Refractor} */\n// @ts-expect-error: TS is wrong.\nexport const refractor = new Refractor()\n\n// Create.\nrefractor.highlight = highlight\nrefractor.register = register\nrefractor.alias = alias\nrefractor.registered = registered\nrefractor.listLanguages = listLanguages\n\n// @ts-expect-error Overwrite Prism.\nrefractor.util.encode = encode\n// @ts-expect-error Overwrite Prism.\nrefractor.Token.stringify = stringify\n\n/**\n * Highlight `value` (code) as `language` (programming language).\n *\n * @param {string} value\n *   Code to highlight.\n * @param {string|Grammar} language\n *   Programming language name, alias, or grammar.\n * @returns {RefractorRoot}\n *   Node representing highlighted code.\n */\nfunction highlight(value, language) {\n  if (typeof value !== 'string') {\n    throw new TypeError('Expected `string` for `value`, got `' + value + '`')\n  }\n\n  /** @type {Grammar} */\n  let grammar\n  /** @type {string|undefined} */\n  let name\n\n  // `name` is a grammar object.\n  // This was called internally by Prism.js before 1.28.0.\n  /* c8 ignore next 2 */\n  if (language && typeof language === 'object') {\n    grammar = language\n  } else {\n    name = language\n\n    if (typeof name !== 'string') {\n      throw new TypeError('Expected `string` for `name`, got `' + name + '`')\n    }\n\n    if (own.call(refractor.languages, name)) {\n      grammar = refractor.languages[name]\n    } else {\n      throw new Error('Unknown language: `' + name + '` is not registered')\n    }\n  }\n\n  return {\n    type: 'root',\n    // @ts-expect-error: we hacked Prism to accept and return the things we want.\n    children: Prism.highlight.call(refractor, value, grammar, name)\n  }\n}\n\n/**\n * Register a syntax.\n *\n * @param {Syntax} syntax\n *   Language function made for refractor, as in, the files in\n *   `refractor/lang/*.js`.\n * @returns {void}\n */\nfunction register(syntax) {\n  if (typeof syntax !== 'function' || !syntax.displayName) {\n    throw new Error('Expected `function` for `syntax`, got `' + syntax + '`')\n  }\n\n  // Do not duplicate registrations.\n  if (!own.call(refractor.languages, syntax.displayName)) {\n    syntax(refractor)\n  }\n}\n\n/**\n * Register aliases for already registered languages.\n *\n * @param {Record<string, string|Array<string>>|string} language\n * @param {string|Array<string>} [alias]\n * @returns {void}\n */\nfunction alias(language, alias) {\n  const languages = refractor.languages\n  /** @type {Record<string, string|Array<string>>} */\n  let map = {}\n\n  if (typeof language === 'string') {\n    if (alias) {\n      map[language] = alias\n    }\n  } else {\n    map = language\n  }\n\n  /** @type {string} */\n  let key\n\n  for (key in map) {\n    if (own.call(map, key)) {\n      const value = map[key]\n      const list = typeof value === 'string' ? [value] : value\n      let index = -1\n\n      while (++index < list.length) {\n        languages[list[index]] = languages[key]\n      }\n    }\n  }\n}\n\n/**\n * Check whether an `alias` or `language` is registered.\n *\n * @param {string} aliasOrLanguage\n * @returns {boolean}\n */\nfunction registered(aliasOrLanguage) {\n  if (typeof aliasOrLanguage !== 'string') {\n    throw new TypeError(\n      'Expected `string` for `aliasOrLanguage`, got `' + aliasOrLanguage + '`'\n    )\n  }\n\n  return own.call(refractor.languages, aliasOrLanguage)\n}\n\n/**\n * List all registered languages (names and aliases).\n *\n * @returns {Array<string>}\n */\nfunction listLanguages() {\n  const languages = refractor.languages\n  /** @type {Array<string>} */\n  const list = []\n  /** @type {string} */\n  let language\n\n  for (language in languages) {\n    if (\n      own.call(languages, language) &&\n      typeof languages[language] === 'object'\n    ) {\n      list.push(language)\n    }\n  }\n\n  return list\n}\n\n/**\n * @param {string|_Token|Array<string|_Token>} value\n * @param {string} language\n * @returns {Text|RefractorElement|Array<Text|RefractorElement>}\n */\nfunction stringify(value, language) {\n  if (typeof value === 'string') {\n    return {type: 'text', value}\n  }\n\n  if (Array.isArray(value)) {\n    /** @type {Array<Text|RefractorElement>} */\n    const result = []\n    let index = -1\n\n    while (++index < value.length) {\n      if (\n        value[index] !== '' &&\n        value[index] !== null &&\n        value[index] !== undefined\n      ) {\n        // @ts-expect-error Assume no sub-arrays.\n        result.push(stringify(value[index], language))\n      }\n    }\n\n    return result\n  }\n\n  /** @type {_Env} */\n  const env = {\n    type: value.type,\n    content: stringify(value.content, language),\n    tag: 'span',\n    classes: ['token', value.type],\n    attributes: {},\n    language\n  }\n\n  if (value.alias) {\n    env.classes.push(\n      ...(typeof value.alias === 'string' ? [value.alias] : value.alias)\n    )\n  }\n\n  // @ts-expect-error Prism.\n  refractor.hooks.run('wrap', env)\n\n  // @ts-expect-error Hush, it’s fine.\n  return h(\n    env.tag + '.' + env.classes.join('.'),\n    attributes(env.attributes),\n    env.content\n  )\n}\n\n/**\n * @template {unknown} T\n * @param {T} tokens\n * @returns {T}\n */\nfunction encode(tokens) {\n  return tokens\n}\n\n/**\n * @param {Record<string, string>} attrs\n * @returns {Record<string, string>}\n */\nfunction attributes(attrs) {\n  /** @type {string} */\n  let key\n\n  for (key in attrs) {\n    if (own.call(attrs, key)) {\n      attrs[key] = parseEntities(attrs[key])\n    }\n  }\n\n  return attrs\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}