{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  var self = this;\n  var size = 0;\n  /** @type {boolean} */\n\n  var data;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === null || code === 91 || code === 93 && !data ||\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > 999) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return label(code);\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    data = data || !markdownSpace(code);\n    return code === 92 ? labelEscape : label;\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n    return label(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","markdownSpace","factoryLabel","effects","ok","nok","type","markerType","stringType","self","size","data","start","code","enter","consume","exit","atBreak","parser","constructs","contentType","label","labelEscape"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}