{"ast":null,"code":"/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nvar own = {}.hasOwnProperty;\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Object.<string, OmitHandle>} handlers\n * @returns {OmitHandle}\n */\nexport function omission(handlers) {\n  return omit;\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return own.call(handlers, node.tagName) && handlers[node.tagName](node, index, parent);\n  }\n}","map":{"version":3,"names":["own","hasOwnProperty","omission","handlers","omit","node","index","parent","call","tagName"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/hast-util-to-html/lib/omission/omission.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Object.<string, OmitHandle>} handlers\n * @returns {OmitHandle}\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAMA,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQ,CAACC,QAAQ,EAAE;EACjC,OAAOC,IAAI;;EAEX;AACF;AACA;AACA;AACA;EACE,SAASA,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACjC,OACEP,GAAG,CAACQ,IAAI,CAACL,QAAQ,EAAEE,IAAI,CAACI,OAAO,CAAC,IAChCN,QAAQ,CAACE,IAAI,CAACI,OAAO,CAAC,CAACJ,IAAI,EAAEC,KAAK,EAAEC,MAAM,CAAC;EAE/C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}