{"ast":null,"code":"import _slicedToArray from \"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"value\", \"commands\", \"commandsFilter\", \"direction\", \"extraCommands\", \"height\", \"enableScroll\", \"visibleDragbar\", \"highlightEnable\", \"preview\", \"fullscreen\", \"overflow\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"defaultTabEnable\", \"onChange\", \"onHeightChange\", \"hideToolbar\", \"toolbarBottom\", \"components\", \"renderTextarea\"];\nimport React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands } from './commands';\nimport { reducer, EditorContext } from './Context';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction setGroupPopFalse(data) {\n  if (data === void 0) {\n    data = {};\n  }\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _ref = props || {},\n    _ref$prefixCls = _ref.prefixCls,\n    prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n    className = _ref.className,\n    propsValue = _ref.value,\n    _ref$commands = _ref.commands,\n    commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n    commandsFilter = _ref.commandsFilter,\n    direction = _ref.direction,\n    _ref$extraCommands = _ref.extraCommands,\n    extraCommands = _ref$extraCommands === void 0 ? getExtraCommands() : _ref$extraCommands,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? 200 : _ref$height,\n    _ref$enableScroll = _ref.enableScroll,\n    enableScroll = _ref$enableScroll === void 0 ? true : _ref$enableScroll,\n    _ref$visibleDragbar = _ref.visibleDragbar,\n    visibleDragbar = _ref$visibleDragbar === void 0 ? typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true : _ref$visibleDragbar,\n    _ref$highlightEnable = _ref.highlightEnable,\n    highlightEnable = _ref$highlightEnable === void 0 ? true : _ref$highlightEnable,\n    _ref$preview = _ref.preview,\n    previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n    _ref$fullscreen = _ref.fullscreen,\n    fullscreen = _ref$fullscreen === void 0 ? false : _ref$fullscreen,\n    _ref$overflow = _ref.overflow,\n    overflow = _ref$overflow === void 0 ? true : _ref$overflow,\n    _ref$previewOptions = _ref.previewOptions,\n    previewOptions = _ref$previewOptions === void 0 ? {} : _ref$previewOptions,\n    textareaProps = _ref.textareaProps,\n    _ref$maxHeight = _ref.maxHeight,\n    maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n    _ref$minHeight = _ref.minHeight,\n    minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n    autoFocus = _ref.autoFocus,\n    _ref$tabSize = _ref.tabSize,\n    tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n    _ref$defaultTabEnable = _ref.defaultTabEnable,\n    defaultTabEnable = _ref$defaultTabEnable === void 0 ? false : _ref$defaultTabEnable,\n    _onChange = _ref.onChange,\n    onHeightChange = _ref.onHeightChange,\n    hideToolbar = _ref.hideToolbar,\n    _ref$toolbarBottom = _ref.toolbarBottom,\n    toolbarBottom = _ref$toolbarBottom === void 0 ? false : _ref$toolbarBottom,\n    components = _ref.components,\n    renderTextarea = _ref.renderTextarea,\n    other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var cmds = commands.map(function (item) {\n    return commandsFilter ? commandsFilter(item, false) : item;\n  }).filter(Boolean);\n  var extraCmds = extraCommands.map(function (item) {\n    return commandsFilter ? commandsFilter(item, true) : item;\n  }).filter(Boolean);\n  var _useReducer = useReducer(reducer, {\n      markdown: propsValue,\n      preview: previewType,\n      components: components,\n      height: height,\n      highlightEnable: highlightEnable,\n      tabSize: tabSize,\n      defaultTabEnable: defaultTabEnable,\n      scrollTop: 0,\n      scrollTopPreview: 0,\n      commands: cmds,\n      extraCommands: extraCmds,\n      fullscreen: fullscreen,\n      barPopup: {}\n    }),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var container = useRef(null);\n  var previewRef = useRef(null);\n  var enableScrollRef = useRef(enableScroll);\n  useImperativeHandle(ref, function () {\n    return _extends({}, state);\n  });\n  useMemo(function () {\n    return enableScrollRef.current = enableScroll;\n  }, [enableScroll]);\n  useEffect(function () {\n    var stateInit = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch(_extends({}, state, stateInit));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var cls = [className, 'wmde-markdown-var', direction ? prefixCls + \"-\" + direction : null, prefixCls, state.preview ? prefixCls + \"-show-\" + state.preview : null, state.fullscreen ? prefixCls + \"-fullscreen\" : null].filter(Boolean).join(' ').trim();\n  useMemo(function () {\n    return propsValue !== state.markdown && dispatch({\n      markdown: propsValue || ''\n    });\n  }, [propsValue, state.markdown]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(function () {\n    return previewType !== state.preview && dispatch({\n      preview: previewType\n    });\n  }, [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(function () {\n    return tabSize !== state.tabSize && dispatch({\n      tabSize: tabSize\n    });\n  }, [tabSize]);\n  useMemo(function () {\n    return highlightEnable !== state.highlightEnable && dispatch({\n      highlightEnable: highlightEnable\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [highlightEnable]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(function () {\n    return autoFocus !== state.autoFocus && dispatch({\n      autoFocus: autoFocus\n    });\n  }, [autoFocus]);\n  useMemo(function () {\n    return fullscreen !== state.fullscreen && dispatch({\n      fullscreen: fullscreen\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [fullscreen]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(function () {\n    return height !== state.height && dispatch({\n      height: height\n    });\n  }, [height]);\n  useMemo(function () {\n    return height !== state.height && onHeightChange && onHeightChange(state.height, height, state);\n  }, [height, onHeightChange, state]);\n  var textareaDomRef = useRef();\n  var active = useRef('preview');\n  var initScroll = useRef(false);\n  useMemo(function () {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', function () {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', function () {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n  var handleScroll = function handleScroll(e, type) {\n    if (!enableScrollRef.current) return;\n    var textareaDom = textareaDomRef.current;\n    var previewDom = previewRef.current ? previewRef.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      var scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({\n        scrollTop: scrollTop\n      });\n    }\n  };\n  var previewClassName = prefixCls + \"-preview \" + (previewOptions.className || '');\n  var handlePreviewScroll = function handlePreviewScroll(e) {\n    return handleScroll(e, 'preview');\n  };\n  var mdPreview = useMemo(function () {\n    return /*#__PURE__*/_jsx(\"div\", {\n      ref: previewRef,\n      className: previewClassName,\n      children: /*#__PURE__*/_jsx(MarkdownPreview, _extends({}, previewOptions, {\n        onScroll: handlePreviewScroll,\n        source: state.markdown || ''\n      }))\n    });\n  }, [previewClassName, previewOptions, state.markdown]);\n  var preview = (components == null ? void 0 : components.preview) && (components == null ? void 0 : components.preview(state.markdown || '', state, dispatch));\n  if (preview && /*#__PURE__*/React.isValidElement(preview)) {\n    mdPreview = /*#__PURE__*/_jsx(\"div\", {\n      className: previewClassName,\n      ref: previewRef,\n      onScroll: handlePreviewScroll,\n      children: preview\n    });\n  }\n  var containerStyle = _extends({}, other.style, {\n    height: state.height || '100%'\n  });\n  var containerClick = function containerClick() {\n    return dispatch({\n      barPopup: _extends({}, setGroupPopFalse(state.barPopup))\n    });\n  };\n  var dragBarChange = function dragBarChange(newHeight) {\n    return dispatch({\n      height: newHeight\n    });\n  };\n  return /*#__PURE__*/_jsx(EditorContext.Provider, {\n    value: _extends({}, state, {\n      dispatch: dispatch\n    }),\n    children: /*#__PURE__*/_jsxs(\"div\", _extends({\n      ref: container,\n      className: cls\n    }, other, {\n      onClick: containerClick,\n      style: containerStyle,\n      children: [!hideToolbar && !toolbarBottom && /*#__PURE__*/_jsx(Toolbar, {\n        prefixCls: prefixCls,\n        overflow: overflow,\n        toolbarBottom: toolbarBottom\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: prefixCls + \"-content\",\n        children: [/(edit|live)/.test(state.preview || '') && /*#__PURE__*/_jsx(TextArea, _extends({\n          className: prefixCls + \"-input\",\n          prefixCls: prefixCls,\n          autoFocus: autoFocus\n        }, textareaProps, {\n          onChange: function onChange(evn) {\n            _onChange && _onChange(evn.target.value, evn, state);\n            if (textareaProps && textareaProps.onChange) {\n              textareaProps.onChange(evn);\n            }\n          },\n          renderTextarea: (components == null ? void 0 : components.textarea) || renderTextarea,\n          onScroll: function onScroll(e) {\n            return handleScroll(e, 'text');\n          }\n        })), /(live|preview)/.test(state.preview || '') && mdPreview]\n      }), visibleDragbar && !state.fullscreen && /*#__PURE__*/_jsx(DragBar, {\n        prefixCls: prefixCls,\n        height: state.height,\n        maxHeight: maxHeight,\n        minHeight: minHeight,\n        onChange: dragBarChange\n      }), !hideToolbar && toolbarBottom && /*#__PURE__*/_jsx(Toolbar, {\n        prefixCls: prefixCls,\n        overflow: overflow,\n        toolbarBottom: toolbarBottom\n      })]\n    }))\n  });\n};\nvar mdEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nmdEditor.Markdown = MarkdownPreview;\nexport default mdEditor;","map":{"version":3,"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,QAAqC,OAAO;AACvH,OAAOC,eAAe,MAAgC,6BAA6B;AACnF,OAAOC,QAAQ,MAA0B,uBAAuB;AAChE,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,WAAW,EAAEC,gBAAgB,QAAkB,YAAY;AACpE,SAASC,OAAO,EAAEC,aAAa,QAAmC,WAAW;AAC7E;AAAsB;AAAA;AA2ItB,SAASC,gBAAgB,CAACC,IAA6B,EAAO;EAAA,IAApCA,IAA6B;IAA7BA,IAA6B,GAAG,CAAC,CAAC;EAAA;EAC1DC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,OAAO,CAAEC,iBAAO,EAAK;IACrCJ,IAAI,CAACI,OAAO,CAAC,GAAG,KAAK;EACvB,CAAC,CAAC;EACF,OAAOJ,IAAI;AACb;AAEA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBC,KAAoB,EACpBC,GAA+E,EAC5E;EACH,WA6BID,KAAK,IAAI,CAAC,CAAC;IAAA,iBAAdE,KA5BCC,SAAS;IAATA,SAAS,+BAAG,aAAa;IACzBC,SAAS,GA2BVF,KA3BCE,SAAS;IACFC,UAAU,GA0BlBH,KA1BCI,KAAK;IAAA,gBA0BNJ,KAzBCK,QAAQ;IAARA,QAAQ,8BAAGlB,WAAW,EAAE;IACxBmB,cAAc,GAwBfN,KAxBCM,cAAc;IACdC,SAAS,GAuBVP,KAvBCO,SAAS;IAAA,qBAuBVP,KAtBCQ,aAAa;IAAbA,aAAa,mCAAGpB,gBAAgB,EAAE;IAAA,cAsBnCY,KArBCS,MAAM;IAANA,MAAM,4BAAG,GAAG;IAAA,oBAqBbT,KApBCU,YAAY;IAAZA,YAAY,kCAAG,IAAI;IAAA,sBAoBpBV,KAnBCW,cAAc;IAAdA,cAAc,oCAAG,OAAOb,KAAK,CAACc,eAAe,KAAK,SAAS,GAAGd,KAAK,CAACc,eAAe,GAAG,IAAI;IAAA,uBAmB3FZ,KAlBCa,eAAe;IAAfA,eAAe,qCAAG,IAAI;IAAA,eAkBvBb,KAjBCc,OAAO;IAAEC,WAAW,6BAAG,MAAM;IAAA,kBAiB9Bf,KAhBCgB,UAAU;IAAVA,UAAU,gCAAG,KAAK;IAAA,gBAgBnBhB,KAfCiB,QAAQ;IAARA,QAAQ,8BAAG,IAAI;IAAA,sBAehBjB,KAdCkB,cAAc;IAAdA,cAAc,oCAAG,CAAC,CAAC;IACnBC,aAAa,GAadnB,KAbCmB,aAAa;IAAA,iBAadnB,KAZCoB,SAAS;IAATA,SAAS,+BAAG,IAAI;IAAA,iBAYjBpB,KAXCqB,SAAS;IAATA,SAAS,+BAAG,GAAG;IACfC,SAAS,GAUVtB,KAVCsB,SAAS;IAAA,eAUVtB,KATCuB,OAAO;IAAPA,OAAO,6BAAG,CAAC;IAAA,wBASZvB,KARCwB,gBAAgB;IAAhBA,gBAAgB,sCAAG,KAAK;IACxBC,SAAQ,GAOTzB,KAPCyB,QAAQ;IACRC,cAAc,GAMf1B,KANC0B,cAAc;IACdC,WAAW,GAKZ3B,KALC2B,WAAW;IAAA,qBAKZ3B,KAJC4B,aAAa;IAAbA,aAAa,mCAAG,KAAK;IACrBC,UAAU,GAGX7B,KAHC6B,UAAU;IACVC,iBAED9B,KAFC8B;IACGC,KAAK;EAEV,IAAMC,IAAI,GAAG3B,QAAQ,CAClB4B,GAAG,CAAEC,cAAI;IAAA,OAAM5B,cAAc,GAAGA,cAAc,CAAC4B,IAAI,EAAE,KAAK,CAAC,GAAGA,IAAK;EAAA,EAAC,CACpEC,MAAM,CAACC,OAAO,CAAe;EAChC,IAAMC,SAAS,GAAG7B,aAAa,CAC5ByB,GAAG,CAAEC,cAAI;IAAA,OAAM5B,cAAc,GAAGA,cAAc,CAAC4B,IAAI,EAAE,IAAI,CAAC,GAAGA,IAAK;EAAA,EAAC,CACnEC,MAAM,CAACC,OAAO,CAAe;EAChC,kBAAwBzD,UAAU,CAACU,OAAO,EAAE;MAC1CiD,QAAQ,EAAEnC,UAAU;MACpBW,OAAO,EAAEC,WAAW;MACpBc,UAAU,EAAVA,UAAU;MACVpB,MAAM,EAANA,MAAM;MACNI,eAAe,EAAfA,eAAe;MACfU,OAAO,EAAPA,OAAO;MACPC,gBAAgB,EAAhBA,gBAAgB;MAChBe,SAAS,EAAE,CAAC;MACZC,gBAAgB,EAAE,CAAC;MACnBnC,QAAQ,EAAE2B,IAAI;MACdxB,aAAa,EAAE6B,SAAS;MACxBrB,UAAU,EAAVA,UAAU;MACVyB,QAAQ,EAAE,CAAC;IACb,CAAC,CAAC;IAAA;IAdGC,KAAK;IAAEC,QAAQ;EAepB,IAAMC,SAAS,GAAG/D,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAMgE,UAAU,GAAGhE,MAAM,CAAiB,IAAI,CAAC;EAC/C,IAAMiE,eAAe,GAAGjE,MAAM,CAAC6B,YAAY,CAAC;EAE5C5B,mBAAmB,CAACiB,GAAG,EAAE;IAAA,oBAAY2C,KAAK,CAAG;EAAA,EAAC;EAC9C9D,OAAO,CAAC;IAAA,OAAOkE,eAAe,CAACC,OAAO,GAAGrC,YAAa;EAAA,GAAE,CAACA,YAAY,CAAC,CAAC;EACvEhC,SAAS,CAAC,YAAM;IACd,IAAMsE,SAAuB,GAAG,CAAC,CAAC;IAClC,IAAIJ,SAAS,CAACG,OAAO,EAAE;MACrBC,SAAS,CAACJ,SAAS,GAAGA,SAAS,CAACG,OAAO,IAAIE,SAAS;IACtD;IACAD,SAAS,CAACV,QAAQ,GAAGnC,UAAU,IAAI,EAAE;IACrC6C,SAAS,CAACP,QAAQ,GAAG,CAAC,CAAC;IACvB,IAAIE,QAAQ,EAAE;MACZA,QAAQ,cAAMD,KAAK,EAAKM,SAAS,EAAG;IACtC;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAME,GAAG,GAAG,CACVhD,SAAS,EACT,mBAAmB,EACnBK,SAAS,GAAMN,SAAS,SAAIM,SAAS,GAAK,IAAI,EAC9CN,SAAS,EACTyC,KAAK,CAAC5B,OAAO,GAAMb,SAAS,cAASyC,KAAK,CAAC5B,OAAO,GAAK,IAAI,EAC3D4B,KAAK,CAAC1B,UAAU,GAAMf,SAAS,mBAAgB,IAAI,CACpD,CACEkC,MAAM,CAACC,OAAO,CAAC,CACfe,IAAI,CAAC,GAAG,CAAC,CACTC,IAAI,EAAE;EAETxE,OAAO,CACL;IAAA,OAAMuB,UAAU,KAAKuC,KAAK,CAACJ,QAAQ,IAAIK,QAAQ,CAAC;MAAEL,QAAQ,EAAEnC,UAAU,IAAI;IAAG,CAAC,CAAC;EAAA,GAC/E,CAACA,UAAU,EAAEuC,KAAK,CAACJ,QAAQ,CAAC,CAC7B;EACD;EACA1D,OAAO,CAAC;IAAA,OAAMmC,WAAW,KAAK2B,KAAK,CAAC5B,OAAO,IAAI6B,QAAQ,CAAC;MAAE7B,OAAO,EAAEC;IAAY,CAAC,CAAC;EAAA,GAAE,CAACA,WAAW,CAAC,CAAC;EACjG;EACAnC,OAAO,CAAC;IAAA,OAAM2C,OAAO,KAAKmB,KAAK,CAACnB,OAAO,IAAIoB,QAAQ,CAAC;MAAEpB;IAAQ,CAAC,CAAC;EAAA,GAAE,CAACA,OAAO,CAAC,CAAC;EAC5E3C,OAAO,CACL;IAAA,OAAMiC,eAAe,KAAK6B,KAAK,CAAC7B,eAAe,IAAI8B,QAAQ,CAAC;MAAE9B;IAAgB,CAAC,CAAC;EAAA;EAChF;EACA,CAACA,eAAe,CAAC,CAClB;EACD;EACAjC,OAAO,CAAC;IAAA,OAAM0C,SAAS,KAAKoB,KAAK,CAACpB,SAAS,IAAIqB,QAAQ,CAAC;MAAErB,SAAS,EAAEA;IAAU,CAAC,CAAC;EAAA,GAAE,CAACA,SAAS,CAAC,CAAC;EAC/F1C,OAAO,CACL;IAAA,OAAMoC,UAAU,KAAK0B,KAAK,CAAC1B,UAAU,IAAI2B,QAAQ,CAAC;MAAE3B,UAAU,EAAEA;IAAW,CAAC,CAAC;EAAA;EAC7E;EACA,CAACA,UAAU,CAAC,CACb;EACD;EACApC,OAAO,CAAC;IAAA,OAAM6B,MAAM,KAAKiC,KAAK,CAACjC,MAAM,IAAIkC,QAAQ,CAAC;MAAElC,MAAM,EAAEA;IAAO,CAAC,CAAC;EAAA,GAAE,CAACA,MAAM,CAAC,CAAC;EAChF7B,OAAO,CACL;IAAA,OAAM6B,MAAM,KAAKiC,KAAK,CAACjC,MAAM,IAAIiB,cAAc,IAAIA,cAAc,CAACgB,KAAK,CAACjC,MAAM,EAAEA,MAAM,EAAEiC,KAAK,CAAC;EAAA,GAC9F,CAACjC,MAAM,EAAEiB,cAAc,EAAEgB,KAAK,CAAC,CAChC;EAED,IAAMW,cAAc,GAAGxE,MAAM,EAAkB;EAC/C,IAAMyE,MAAM,GAAGzE,MAAM,CAAqB,SAAS,CAAC;EACpD,IAAM0E,UAAU,GAAG1E,MAAM,CAAC,KAAK,CAAC;EAEhCD,OAAO,CAAC,YAAM;IACZyE,cAAc,CAACN,OAAO,GAAGL,KAAK,CAACc,YAAY;IAC3C,IAAId,KAAK,CAACc,YAAY,EAAE;MACtBd,KAAK,CAACc,YAAY,CAACC,gBAAgB,CAAC,WAAW,EAAE,YAAM;QACrDH,MAAM,CAACP,OAAO,GAAG,MAAM;MACzB,CAAC,CAAC;MACFL,KAAK,CAACc,YAAY,CAACC,gBAAgB,CAAC,YAAY,EAAE,YAAM;QACtDH,MAAM,CAACP,OAAO,GAAG,SAAS;MAC5B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACL,KAAK,CAACc,YAAY,CAAC,CAAC;EAExB,IAAME,YAAY,GAAG,SAAfA,YAAY,CAAIC,CAAgC,EAAEC,IAAwB,EAAK;IACnF,IAAI,CAACd,eAAe,CAACC,OAAO,EAAE;IAC9B,IAAMc,WAAW,GAAGR,cAAc,CAACN,OAAO;IAC1C,IAAMe,UAAU,GAAGjB,UAAU,CAACE,OAAO,GAAGF,UAAU,CAACE,OAAO,GAAGE,SAAS;IACtE,IAAI,CAACM,UAAU,CAACR,OAAO,EAAE;MACvBO,MAAM,CAACP,OAAO,GAAGa,IAAI;MACrBL,UAAU,CAACR,OAAO,GAAG,IAAI;IAC3B;IACA,IAAIc,WAAW,IAAIC,UAAU,EAAE;MAC7B,IAAMC,KAAK,GACT,CAACF,WAAW,CAACG,YAAY,GAAGH,WAAW,CAACI,YAAY,KAAKH,UAAU,CAACE,YAAY,GAAGF,UAAU,CAACG,YAAY,CAAC;MAC7G,IAAIN,CAAC,CAACO,MAAM,KAAKL,WAAW,IAAIP,MAAM,CAACP,OAAO,KAAK,MAAM,EAAE;QACzDe,UAAU,CAACvB,SAAS,GAAGsB,WAAW,CAACtB,SAAS,GAAGwB,KAAK;MACtD;MACA,IAAIJ,CAAC,CAACO,MAAM,KAAKJ,UAAU,IAAIR,MAAM,CAACP,OAAO,KAAK,SAAS,EAAE;QAC3Dc,WAAW,CAACtB,SAAS,GAAGuB,UAAU,CAACvB,SAAS,GAAGwB,KAAK;MACtD;MACA,IAAIxB,SAAS,GAAG,CAAC;MACjB,IAAIe,MAAM,CAACP,OAAO,KAAK,MAAM,EAAE;QAC7BR,SAAS,GAAGsB,WAAW,CAACtB,SAAS,IAAI,CAAC;MACxC,CAAC,MAAM,IAAIe,MAAM,CAACP,OAAO,KAAK,SAAS,EAAE;QACvCR,SAAS,GAAGuB,UAAU,CAACvB,SAAS,IAAI,CAAC;MACvC;MACAI,QAAQ,CAAC;QAAEJ;MAAU,CAAC,CAAC;IACzB;EACF,CAAC;EAED,IAAM4B,gBAAgB,GAAMlE,SAAS,kBAAYiB,cAAc,CAAChB,SAAS,IAAI,EAAE,CAAE;EACjF,IAAMkE,mBAAmB,GAAIT,SAAvBS,mBAAmB,CAAIT,CAAyC;IAAA,OAAKD,YAAY,CAACC,CAAC,EAAE,SAAS,CAAC;EAAA;EACrG,IAAIU,SAAS,GAAGzF,OAAO,CACrB;IAAA,oBACE0F;MAAKvE,GAAG,EAAE8C,UAAW;MAAC3C,SAAS,EAAEiE,gBAAiB;MAAAI,uBAChDD,KAACvF,eAAe,eAAKmC,cAAc;QAAEsD,QAAQ,EAAEJ,mBAAoB;QAACK,MAAM,EAAE/B,KAAK,CAACJ,QAAQ,IAAI;MAAG;IAAG,EAEvG;EAAA,GACD,CAAC6B,gBAAgB,EAAEjD,cAAc,EAAEwB,KAAK,CAACJ,QAAQ,CAAC,CACnD;EACD,IAAMxB,OAAO,GAAG,WAAU,oBAAVe,UAAU,CAAEf,OAAO,MAAIe,UAAU,oBAAVA,UAAU,CAAEf,OAAO,CAAC4B,KAAK,CAACJ,QAAQ,IAAI,EAAE,EAAEI,KAAK,EAAEC,QAAQ,CAAC;EACjG,IAAI7B,OAAO,iBAAIrC,KAAK,CAACiG,cAAc,CAAC5D,OAAO,CAAC,EAAE;IAC5CuD,SAAS,gBACPC;MAAKpE,SAAS,EAAEiE,gBAAiB;MAACpE,GAAG,EAAE8C,UAAW;MAAC2B,QAAQ,EAAEJ,mBAAoB;MAAAG,UAC9EzD;IAAO,EAEX;EACH;EAEA,IAAM6D,cAAc,gBAAQ5C,KAAK,CAAC6C,KAAK;IAAEnE,MAAM,EAAEiC,KAAK,CAACjC,MAAM,IAAI;EAAM,EAAE;EACzE,IAAMoE,cAAc,GAAG,SAAjBA,cAAc;IAAA,OAASlC,QAAQ,CAAC;MAAEF,QAAQ,eAAOlD,gBAAgB,CAACmD,KAAK,CAACD,QAAQ,CAAC;IAAG,CAAC,CAAC;EAAA;EAC5F,IAAMqC,aAAa,GAAIC,SAAjBD,aAAa,CAAIC,SAAiB;IAAA,OAAKpC,QAAQ,CAAC;MAAElC,MAAM,EAAEsE;IAAU,CAAC,CAAC;EAAA;EAE5E,oBACET,KAAChF,aAAa,CAAC0F,QAAQ;IAAC5E,KAAK,eAAOsC,KAAK;MAAEC;IAAQ,EAAG;IAAA4B,uBACpDU;MAAKlF,GAAG,EAAE6C,SAAU;MAAC1C,SAAS,EAAEgD;IAAI,GAAKnB,KAAK;MAAEmD,OAAO,EAAEL,cAAe;MAACD,KAAK,EAAED,cAAe;MAAAJ,WAC5F,CAAC5C,WAAW,IAAI,CAACC,aAAa,iBAC7B0C,KAACrF,OAAO;QAACgB,SAAS,EAAEA,SAAU;QAACgB,QAAQ,EAAEA,QAAS;QAACW,aAAa,EAAEA;MAAc,EACjF,eACDqD;QAAK/E,SAAS,EAAKD,SAAS,aAAW;QAAAsE,WACpC,aAAa,CAACY,IAAI,CAACzC,KAAK,CAAC5B,OAAO,IAAI,EAAE,CAAC,iBACtCwD,KAACtF,QAAQ;UACPkB,SAAS,EAAKD,SAAS,WAAS;UAChCA,SAAS,EAAEA,SAAU;UACrBqB,SAAS,EAAEA;QAAU,GACjBH,aAAa;UACjBM,QAAQ,EAAG2D,qBAAG,EAAK;YACjB3D,SAAQ,IAAIA,SAAQ,CAAC2D,GAAG,CAAClB,MAAM,CAAC9D,KAAK,EAAEgF,GAAG,EAAE1C,KAAK,CAAC;YAClD,IAAIvB,aAAa,IAAIA,aAAa,CAACM,QAAQ,EAAE;cAC3CN,aAAa,CAACM,QAAQ,CAAC2D,GAAG,CAAC;YAC7B;UACF,CAAE;UACFtD,cAAc,EAAE,WAAU,oBAAVD,UAAU,CAAEwD,QAAQ,KAAIvD,cAAe;UACvD0C,QAAQ,EAAGb,mBAAC;YAAA,OAAKD,YAAY,CAACC,CAAC,EAAE,MAAM;UAAA;QAAE,GAE5C,EACA,gBAAgB,CAACwB,IAAI,CAACzC,KAAK,CAAC5B,OAAO,IAAI,EAAE,CAAC,IAAIuD,SAAS;MAAA,EACpD,EACL1D,cAAc,IAAI,CAAC+B,KAAK,CAAC1B,UAAU,iBAClCsD,KAACpF,OAAO;QACNe,SAAS,EAAEA,SAAU;QACrBQ,MAAM,EAAEiC,KAAK,CAACjC,MAAiB;QAC/BW,SAAS,EAAEA,SAAW;QACtBC,SAAS,EAAEA,SAAW;QACtBI,QAAQ,EAAEqD;MAAc,EAE3B,EACA,CAACnD,WAAW,IAAIC,aAAa,iBAC5B0C,KAACrF,OAAO;QAACgB,SAAS,EAAEA,SAAU;QAACgB,QAAQ,EAAEA,QAAS;QAACW,aAAa,EAAEA;MAAc,EACjF;IAAA;EACG,EACiB;AAE7B,CAAC;AAID,IAAM0D,QAAgB,gBAAG7G,KAAK,CAAC8G,UAAU,CAAC1F,gBAAgB,CAAsB;AAEhFyF,QAAQ,CAACE,QAAQ,GAAGzG,eAAe;AAEnC,eAAeuG,QAAQ","names":["React","useEffect","useReducer","useMemo","useRef","useImperativeHandle","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","getExtraCommands","reducer","EditorContext","setGroupPopFalse","data","Object","keys","forEach","keyname","InternalMDEditor","props","ref","_ref","prefixCls","className","propsValue","value","commands","commandsFilter","direction","extraCommands","height","enableScroll","visibleDragbar","visiableDragbar","highlightEnable","preview","previewType","fullscreen","overflow","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","defaultTabEnable","onChange","onHeightChange","hideToolbar","toolbarBottom","components","renderTextarea","other","cmds","map","item","filter","Boolean","extraCmds","markdown","scrollTop","scrollTopPreview","barPopup","state","dispatch","container","previewRef","enableScrollRef","current","stateInit","undefined","cls","join","trim","textareaDomRef","active","initScroll","textareaWarp","addEventListener","handleScroll","e","type","textareaDom","previewDom","scale","scrollHeight","offsetHeight","target","previewClassName","handlePreviewScroll","mdPreview","_jsx","children","onScroll","source","isValidElement","containerStyle","style","containerClick","dragBarChange","newHeight","Provider","_jsxs","onClick","test","evn","textarea","mdEditor","forwardRef","Markdown"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/@uiw/react-md-editor/src/Editor.tsx"],"sourcesContent":["import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle, CSSProperties, PropsWithRef } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps } from '@uiw/react-markdown-preview';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface IProps {\n  prefixCls?: string;\n  className?: string;\n}\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, state?: ContextStore) => void;\n  /**\n   * editor height change listener\n   */\n  onHeightChange?: (value?: CSSProperties['height'], oldValue?: CSSProperties['height'], state?: ContextStore) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   * ⚠️ `Dragbar` is invalid when **`height`** parameter percentage.\n   */\n  height?: CSSProperties['height'];\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   *\n   * @deprecated toolbar height adaptive: https://github.com/uiwjs/react-md-editor/issues/427\n   *\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visibleDragbar?: boolean;\n  /**\n   * @deprecated use `visibleDragbar`\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Disable `fullscreen` setting body styles\n   */\n  overflow?: boolean;\n  /**\n   * Maximum drag height. `visibleDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visibleDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * Use div to replace TextArea or re-render TextArea\n   * @deprecated Please use ~~`renderTextarea`~~ -> `components`\n   */\n  renderTextarea?: ITextAreaProps['renderTextarea'];\n  /**\n   * re-render element\n   */\n  components?: {\n    /** Use div to replace TextArea or re-render TextArea */\n    textarea?: ITextAreaProps['renderTextarea'];\n    /**\n     * Override the default command element\n     * _`toolbar`_ < _`command[].render`_\n     */\n    toolbar?: ICommand['render'];\n    /** Custom markdown preview */\n    preview?: (source: string, state: ContextStore, dispath: React.Dispatch<ContextStore>) => JSX.Element;\n  };\n  /** Theme configuration */\n  'data-color-mode'?: 'light' | 'dark';\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * If `false`, the `tab` key inserts a tab character into the textarea. If `true`, the `tab` key executes default behavior e.g. focus shifts to next element.\n   */\n  defaultTabEnable?: boolean;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Filter or modify your commands.\n   * https://github.com/uiwjs/react-md-editor/issues/296\n   */\n  commandsFilter?: (command: ICommand, isExtra: boolean) => false | ICommand;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n  /** Toolbar on bottom */\n  toolbarBottom?: boolean;\n  /**\n   * The **`direction`** property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * https://github.com/uiwjs/react-md-editor/issues/462\n   */\n  direction?: CSSProperties['direction'];\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    commandsFilter,\n    direction,\n    extraCommands = getExtraCommands(),\n    height = 200,\n    enableScroll = true,\n    visibleDragbar = typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    overflow = true,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    defaultTabEnable = false,\n    onChange,\n    onHeightChange,\n    hideToolbar,\n    toolbarBottom = false,\n    components,\n    renderTextarea,\n    ...other\n  } = props || {};\n  const cmds = commands\n    .map((item) => (commandsFilter ? commandsFilter(item, false) : item))\n    .filter(Boolean) as ICommand[];\n  const extraCmds = extraCommands\n    .map((item) => (commandsFilter ? commandsFilter(item, true) : item))\n    .filter(Boolean) as ICommand[];\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    components,\n    height,\n    highlightEnable,\n    tabSize,\n    defaultTabEnable,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: cmds,\n    extraCommands: extraCmds,\n    fullscreen,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    'wmde-markdown-var',\n    direction ? `${prefixCls}-${direction}` : null,\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(\n    () => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }),\n    [propsValue, state.markdown],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(\n    () => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [highlightEnable],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(\n    () => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fullscreen],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  useMemo(\n    () => height !== state.height && onHeightChange && onHeightChange(state.height, height, state),\n    [height, onHeightChange, state],\n  );\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>('preview');\n  const initScroll = useRef(false);\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>, type: 'text' | 'preview') => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  const previewClassName = `${prefixCls}-preview ${previewOptions.className || ''}`;\n  const handlePreviewScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => handleScroll(e, 'preview');\n  let mdPreview = useMemo(\n    () => (\n      <div ref={previewRef} className={previewClassName}>\n        <MarkdownPreview {...previewOptions} onScroll={handlePreviewScroll} source={state.markdown || ''} />\n      </div>\n    ),\n    [previewClassName, previewOptions, state.markdown],\n  );\n  const preview = components?.preview && components?.preview(state.markdown || '', state, dispatch);\n  if (preview && React.isValidElement(preview)) {\n    mdPreview = (\n      <div className={previewClassName} ref={previewRef} onScroll={handlePreviewScroll}>\n        {preview}\n      </div>\n    );\n  }\n\n  const containerStyle = { ...other.style, height: state.height || '100%' };\n  const containerClick = () => dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n  const dragBarChange = (newHeight: number) => dispatch({ height: newHeight });\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div ref={container} className={cls} {...other} onClick={containerClick} style={containerStyle}>\n        {!hideToolbar && !toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n        <div className={`${prefixCls}-content`}>\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onChange={(evn) => {\n                onChange && onChange(evn.target.value, evn, state);\n                if (textareaProps && textareaProps.onChange) {\n                  textareaProps.onChange(evn);\n                }\n              }}\n              renderTextarea={components?.textarea || renderTextarea}\n              onScroll={(e) => handleScroll(e, 'text')}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && mdPreview}\n        </div>\n        {visibleDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={dragBarChange}\n          />\n        )}\n        {!hideToolbar && toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\ntype Editor = React.FC<PropsWithRef<MDEditorProps>> & { Markdown: typeof MarkdownPreview };\n\nconst mdEditor: Editor = React.forwardRef(InternalMDEditor) as unknown as Editor;\n\nmdEditor.Markdown = MarkdownPreview;\n\nexport default mdEditor;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}