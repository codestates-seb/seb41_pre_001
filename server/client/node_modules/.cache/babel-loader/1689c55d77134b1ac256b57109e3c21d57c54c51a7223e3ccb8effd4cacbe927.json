{"ast":null,"code":"/*\r\n * container.js: Inversion of control container for winston logger instances\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\n\nvar common = require('./common'),\n  winston = require('../winston'),\n  extend = require('util')._extend;\n\n//\n// ### function Container (options)\n// #### @options {Object} Default pass-thru options for Loggers\n// Constructor function for the Container object responsible for managing\n// a set of `winston.Logger` instances based on string ids.\n//\nvar Container = exports.Container = function (options) {\n  this.loggers = {};\n  this.options = options || {};\n  this.default = {\n    transports: [new winston.transports.Console({\n      level: 'silly',\n      colorize: false\n    })]\n  };\n};\n\n//\n// ### function get / add (id, options)\n// #### @id {string} Id of the Logger to get\n// #### @options {Object} **Optional** Options for the Logger instance\n// Retreives a `winston.Logger` instance for the specified `id`. If\n// an instance does not exist, one is created.\n//\nContainer.prototype.get = Container.prototype.add = function (id, options) {\n  var self = this,\n    existing;\n  if (!this.loggers[id]) {\n    //\n    // Remark: Simple shallow clone for configuration options in case we pass in\n    // instantiated protoypal objects\n    //\n    options = extend({}, options || this.options || this.default);\n    existing = options.transports || this.options.transports;\n    //\n    // Remark: Make sure if we have an array of transports we slice it to make copies\n    // of those references.\n    //\n    options.transports = existing ? existing.slice() : [];\n    if (options.transports.length === 0 && (!options || !options['console'])) {\n      options.transports.push(this.default.transports[0]);\n    }\n    Object.keys(options).forEach(function (key) {\n      if (key === 'transports' || key === 'filters' || key === 'rewriters') {\n        return;\n      }\n      var name = common.capitalize(key);\n      if (!winston.transports[name]) {\n        throw new Error('Cannot add unknown transport: ' + name);\n      }\n      var namedOptions = options[key];\n      namedOptions.id = id;\n      options.transports.push(new winston.transports[name](namedOptions));\n    });\n    options.id = id;\n    this.loggers[id] = new winston.Logger(options);\n    this.loggers[id].on('close', function () {\n      self._delete(id);\n    });\n  }\n  return this.loggers[id];\n};\n\n//\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to find\n// Returns a boolean value indicating if this instance\n// has a logger with the specified `id`.\n//\nContainer.prototype.has = function (id) {\n  return !!this.loggers[id];\n};\n\n//\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to close\n// Closes a `Logger` instance with the specified `id` if it exists.\n// If no `id` is supplied then all Loggers are closed.\n//\nContainer.prototype.close = function (id) {\n  var self = this;\n  function _close(id) {\n    if (!self.loggers[id]) {\n      return;\n    }\n    self.loggers[id].close();\n    self._delete(id);\n  }\n  return id ? _close(id) : Object.keys(this.loggers).forEach(function (id) {\n    _close(id);\n  });\n};\n\n//\n// ### @private function _delete (id)\n// #### @id {string} Id of the Logger instance to delete from container\n// Deletes a `Logger` instance with the specified `id`.\n//\nContainer.prototype._delete = function (id) {\n  delete this.loggers[id];\n};","map":{"version":3,"names":["common","require","winston","extend","_extend","Container","exports","options","loggers","default","transports","Console","level","colorize","prototype","get","add","id","self","existing","slice","length","push","Object","keys","forEach","key","name","capitalize","Error","namedOptions","Logger","on","_delete","has","close","_close"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/winston/lib/winston/container.js"],"sourcesContent":["/*\r\n * container.js: Inversion of control container for winston logger instances\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n *\r\n */\r\n\r\nvar common = require('./common'),\r\n    winston = require('../winston'),\r\n    extend = require('util')._extend;\r\n\r\n//\r\n// ### function Container (options)\r\n// #### @options {Object} Default pass-thru options for Loggers\r\n// Constructor function for the Container object responsible for managing\r\n// a set of `winston.Logger` instances based on string ids.\r\n//\r\nvar Container = exports.Container = function (options) {\r\n  this.loggers = {};\r\n  this.options = options || {};\r\n  this.default = {\r\n    transports: [\r\n      new winston.transports.Console({\r\n        level: 'silly',\r\n        colorize: false\r\n      })\r\n    ]\r\n  }\r\n};\r\n\r\n//\r\n// ### function get / add (id, options)\r\n// #### @id {string} Id of the Logger to get\r\n// #### @options {Object} **Optional** Options for the Logger instance\r\n// Retreives a `winston.Logger` instance for the specified `id`. If\r\n// an instance does not exist, one is created.\r\n//\r\nContainer.prototype.get = Container.prototype.add = function (id, options) {\r\n  var self = this,\r\n      existing;\r\n\r\n  if (!this.loggers[id]) {\r\n    //\r\n    // Remark: Simple shallow clone for configuration options in case we pass in\r\n    // instantiated protoypal objects\r\n    //\r\n    options = extend({}, options || this.options || this.default);\r\n    existing = options.transports || this.options.transports;\r\n    //\r\n    // Remark: Make sure if we have an array of transports we slice it to make copies\r\n    // of those references.\r\n    //\r\n    options.transports = existing ? existing.slice() : [];\r\n\r\n    if (options.transports.length === 0 && (!options || !options['console'])) {\r\n      options.transports.push(this.default.transports[0]);\r\n    }\r\n\r\n    Object.keys(options).forEach(function (key) {\r\n      if (key === 'transports' || key === 'filters' || key === 'rewriters') {\r\n        return;\r\n      }\r\n\r\n      var name = common.capitalize(key);\r\n\r\n      if (!winston.transports[name]) {\r\n        throw new Error('Cannot add unknown transport: ' + name);\r\n      }\r\n\r\n      var namedOptions = options[key];\r\n      namedOptions.id = id;\r\n      options.transports.push(new (winston.transports[name])(namedOptions));\r\n    });\r\n\r\n    options.id = id;\r\n    this.loggers[id] = new winston.Logger(options);\r\n\r\n    this.loggers[id].on('close', function () {\r\n        self._delete(id);\r\n    });\r\n  }\r\n\r\n  return this.loggers[id];\r\n};\r\n\r\n//\r\n// ### function close (id)\r\n// #### @id {string} **Optional** Id of the Logger instance to find\r\n// Returns a boolean value indicating if this instance\r\n// has a logger with the specified `id`.\r\n//\r\nContainer.prototype.has = function (id) {\r\n  return !!this.loggers[id];\r\n};\r\n\r\n//\r\n// ### function close (id)\r\n// #### @id {string} **Optional** Id of the Logger instance to close\r\n// Closes a `Logger` instance with the specified `id` if it exists.\r\n// If no `id` is supplied then all Loggers are closed.\r\n//\r\nContainer.prototype.close = function (id) {\r\n  var self = this;\r\n\r\n  function _close (id) {\r\n    if (!self.loggers[id]) {\r\n      return;\r\n    }\r\n\r\n    self.loggers[id].close();\r\n    self._delete(id);\r\n  }\r\n\r\n  return id ? _close(id) : Object.keys(this.loggers).forEach(function (id) {\r\n    _close(id);\r\n  });\r\n};\r\n\r\n//\r\n// ### @private function _delete (id)\r\n// #### @id {string} Id of the Logger instance to delete from container\r\n// Deletes a `Logger` instance with the specified `id`.\r\n//\r\nContainer.prototype._delete = function (id) {\r\n    delete this.loggers[id];\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}