{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js';\nimport { fromParse5 } from 'hast-util-from-parse5';\nimport { errors } from './errors.js';\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';\nconst fatalities = {\n  2: true,\n  1: false,\n  0: null\n};\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */this.data('settings');\n  const settings = Object.assign({}, processorSettings, options);\n  Object.assign(this, {\n    Parser: parser\n  });\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse';\n    const onParseError = settings.emitParseErrors ? onerror : null;\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    });\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    });\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code;\n      const name = camelcase(code);\n      const setting = settings[name];\n      const config = setting === undefined || setting === null ? true : setting;\n      const level = typeof config === 'number' ? config : config ? 1 : 0;\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      };\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      };\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {\n          reason: '',\n          description: '',\n          url: ''\n        };\n        const message = file.message(format(info.reason), {\n          start,\n          end\n        });\n        message.source = 'parse-error';\n        message.ruleId = code;\n        message.fatal = fatalities[level];\n        message.note = format(info.description);\n        message.url = 'url' in info && info.url === false ? null : base + code;\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value.replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */$1) => {\n          const offset = $1 ? -Number.parseInt($1, 10) : 0;\n          const char = doc.charAt(error.startOffset + offset);\n          return char === '`' ? '` ` `' : char;\n        }).replace(/%x/g, () => '0x' + doc.charCodeAt(error.startOffset).toString(16).toUpperCase());\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, $0 => $0.charAt(1).toUpperCase());\n}","map":{"version":3,"names":["Parser5","fromParse5","errors","base","fatalities","rehypeParse","options","processorSettings","data","settings","Object","assign","Parser","parser","doc","file","fn","fragment","onParseError","emitParseErrors","onerror","parse5","sourceCodeLocationInfo","scriptingEnabled","space","verbose","error","code","name","camelcase","setting","config","undefined","level","start","line","startLine","column","startCol","offset","startOffset","end","endLine","endCol","endOffset","info","reason","description","url","message","format","source","ruleId","fatal","note","value","replace","_","$1","Number","parseInt","char","charAt","charCodeAt","toString","toUpperCase","$0"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/rehype-parse/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {errors} from './errors.js'\n\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-'\n\nconst fatalities = {2: true, 1: false, 0: null}\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, options)\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse'\n    const onParseError = settings.emitParseErrors ? onerror : null\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    })\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    })\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code\n      const name = camelcase(code)\n      const setting = settings[name]\n      const config = setting === undefined || setting === null ? true : setting\n      const level = typeof config === 'number' ? config : config ? 1 : 0\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      }\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      }\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {reason: '', description: '', url: ''}\n        const message = file.message(format(info.reason), {start, end})\n        message.source = 'parse-error'\n        message.ruleId = code\n        message.fatal = fatalities[level]\n        message.note = format(info.description)\n        message.url = 'url' in info && info.url === false ? null : base + code\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value\n          .replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */ $1) => {\n            const offset = $1 ? -Number.parseInt($1, 10) : 0\n            const char = doc.charAt(error.startOffset + offset)\n            return char === '`' ? '` ` `' : char\n          })\n          .replace(\n            /%x/g,\n            () =>\n              '0x' +\n              doc.charCodeAt(error.startOffset).toString(16).toUpperCase()\n          )\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}