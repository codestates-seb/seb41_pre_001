{"ast":null,"code":"// @ts-nocheck\nmata.displayName = 'mata';\nmata.aliases = [];\n\n/** @type {import('../core.js').Syntax} */\nexport default function mata(Prism) {\n  // https://www.stata.com/manuals/m.pdf\n  ;\n  (function (Prism) {\n    var orgType = /\\b(?:(?:col|row)?vector|matrix|scalar)\\b/.source;\n    var type = /\\bvoid\\b|<org>|\\b(?:complex|numeric|pointer(?:\\s*\\([^()]*\\))?|real|string|(?:class|struct)\\s+\\w+|transmorphic)(?:\\s*<org>)?/.source.replace(/<org>/g, orgType);\n    Prism.languages.mata = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"\\r\\n]*\"|[‘`']\".*?\"[’`']/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|extends|struct)\\s+)\\w+(?=\\s*(?:\\{|\\bextends\\b))/,\n        lookbehind: true\n      },\n      type: {\n        pattern: RegExp(type),\n        alias: 'class-name',\n        inside: {\n          punctuation: /[()]/,\n          keyword: /\\b(?:class|function|struct|void)\\b/\n        }\n      },\n      keyword: /\\b(?:break|class|continue|do|else|end|extends|external|final|for|function|goto|if|pragma|private|protected|public|return|static|struct|unset|unused|version|virtual|while)\\b/,\n      constant: /\\bNULL\\b/,\n      number: {\n        pattern: /(^|[^\\w.])(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|\\d[a-f0-9]*(?:\\.[a-f0-9]+)?x[+-]?\\d+)i?(?![\\w.])/i,\n        lookbehind: true\n      },\n      missing: {\n        pattern: /(^|[^\\w.])(?:\\.[a-z]?)(?![\\w.])/,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      operator: /\\.\\.|\\+\\+|--|&&|\\|\\||:?(?:[!=<>]=|[+\\-*/^<>&|:])|[!?=\\\\#’`']/,\n      punctuation: /[()[\\]{},;.]/\n    };\n  })(Prism);\n}","map":{"version":3,"names":["mata","displayName","aliases","Prism","orgType","source","type","replace","languages","comment","pattern","greedy","string","lookbehind","RegExp","alias","inside","punctuation","keyword","constant","number","missing","function","operator"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/refractor/lang/mata.js"],"sourcesContent":["// @ts-nocheck\nmata.displayName = 'mata'\nmata.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function mata(Prism) {\n  // https://www.stata.com/manuals/m.pdf\n  ;(function (Prism) {\n    var orgType = /\\b(?:(?:col|row)?vector|matrix|scalar)\\b/.source\n    var type =\n      /\\bvoid\\b|<org>|\\b(?:complex|numeric|pointer(?:\\s*\\([^()]*\\))?|real|string|(?:class|struct)\\s+\\w+|transmorphic)(?:\\s*<org>)?/.source.replace(\n        /<org>/g,\n        orgType\n      )\n    Prism.languages.mata = {\n      comment: {\n        pattern:\n          /\\/\\/.*|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"\\r\\n]*\"|[‘`']\".*?\"[’`']/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|extends|struct)\\s+)\\w+(?=\\s*(?:\\{|\\bextends\\b))/,\n        lookbehind: true\n      },\n      type: {\n        pattern: RegExp(type),\n        alias: 'class-name',\n        inside: {\n          punctuation: /[()]/,\n          keyword: /\\b(?:class|function|struct|void)\\b/\n        }\n      },\n      keyword:\n        /\\b(?:break|class|continue|do|else|end|extends|external|final|for|function|goto|if|pragma|private|protected|public|return|static|struct|unset|unused|version|virtual|while)\\b/,\n      constant: /\\bNULL\\b/,\n      number: {\n        pattern:\n          /(^|[^\\w.])(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|\\d[a-f0-9]*(?:\\.[a-f0-9]+)?x[+-]?\\d+)i?(?![\\w.])/i,\n        lookbehind: true\n      },\n      missing: {\n        pattern: /(^|[^\\w.])(?:\\.[a-z]?)(?![\\w.])/,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      operator: /\\.\\.|\\+\\+|--|&&|\\|\\||:?(?:[!=<>]=|[+\\-*/^<>&|:])|[!?=\\\\#’`']/,\n      punctuation: /[()[\\]{},;.]/\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;;AAEjB;AACA,eAAe,SAASF,IAAI,CAACG,KAAK,EAAE;EAClC;EACA;EAAC,CAAC,UAAUA,KAAK,EAAE;IACjB,IAAIC,OAAO,GAAG,0CAA0C,CAACC,MAAM;IAC/D,IAAIC,IAAI,GACN,6HAA6H,CAACD,MAAM,CAACE,OAAO,CAC1I,QAAQ,EACRH,OAAO,CACR;IACHD,KAAK,CAACK,SAAS,CAACR,IAAI,GAAG;MACrBS,OAAO,EAAE;QACPC,OAAO,EACL,wEAAwE;QAC1EC,MAAM,EAAE;MACV,CAAC;MACDC,MAAM,EAAE;QACNF,OAAO,EAAE,6BAA6B;QACtCC,MAAM,EAAE;MACV,CAAC;MACD,YAAY,EAAE;QACZD,OAAO,EAAE,6DAA6D;QACtEG,UAAU,EAAE;MACd,CAAC;MACDP,IAAI,EAAE;QACJI,OAAO,EAAEI,MAAM,CAACR,IAAI,CAAC;QACrBS,KAAK,EAAE,YAAY;QACnBC,MAAM,EAAE;UACNC,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE;QACX;MACF,CAAC;MACDA,OAAO,EACL,8KAA8K;MAChLC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE;QACNV,OAAO,EACL,4FAA4F;QAC9FG,UAAU,EAAE;MACd,CAAC;MACDQ,OAAO,EAAE;QACPX,OAAO,EAAE,iCAAiC;QAC1CG,UAAU,EAAE,IAAI;QAChBE,KAAK,EAAE;MACT,CAAC;MACDO,QAAQ,EAAE,uBAAuB;MACjCC,QAAQ,EAAE,8DAA8D;MACxEN,WAAW,EAAE;IACf,CAAC;EACH,CAAC,EAAEd,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}