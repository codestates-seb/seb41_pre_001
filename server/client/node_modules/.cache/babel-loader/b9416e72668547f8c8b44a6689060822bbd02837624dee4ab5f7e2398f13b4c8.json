{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/kty/workspace/seb41_pre_001/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar unicode = require('../common/unicode');\nvar ERR = require('../common/error-codes');\n\n//Aliases\nvar $ = unicode.CODE_POINTS;\n\n//Const\nvar DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nvar Preprocessor = /*#__PURE__*/function () {\n  function Preprocessor() {\n    _classCallCheck(this, Preprocessor);\n    this.html = null;\n    this.pos = -1;\n    this.lastGapPos = -1;\n    this.lastCharPos = -1;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n  }\n  _createClass(Preprocessor, [{\n    key: \"_err\",\n    value: function _err() {\n      // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n  }, {\n    key: \"_addGap\",\n    value: function _addGap() {\n      this.gapStack.push(this.lastGapPos);\n      this.lastGapPos = this.pos;\n    }\n  }, {\n    key: \"_processSurrogate\",\n    value: function _processSurrogate(cp) {\n      //NOTE: try to peek a surrogate pair\n      if (this.pos !== this.lastCharPos) {\n        var nextCp = this.html.charCodeAt(this.pos + 1);\n        if (unicode.isSurrogatePair(nextCp)) {\n          //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n          this.pos++;\n\n          //NOTE: add gap that should be avoided during retreat\n          this._addGap();\n          return unicode.getSurrogatePairCodePoint(cp, nextCp);\n        }\n      }\n\n      //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n      else if (!this.lastChunkWritten) {\n        this.endOfChunkHit = true;\n        return $.EOF;\n      }\n\n      //NOTE: isolated surrogate\n      this._err(ERR.surrogateInInputStream);\n      return cp;\n    }\n  }, {\n    key: \"dropParsedChunk\",\n    value: function dropParsedChunk() {\n      if (this.pos > this.bufferWaterline) {\n        this.lastCharPos -= this.pos;\n        this.html = this.html.substring(this.pos);\n        this.pos = 0;\n        this.lastGapPos = -1;\n        this.gapStack = [];\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk, isLastChunk) {\n      if (this.html) {\n        this.html += chunk;\n      } else {\n        this.html = chunk;\n      }\n      this.lastCharPos = this.html.length - 1;\n      this.endOfChunkHit = false;\n      this.lastChunkWritten = isLastChunk;\n    }\n  }, {\n    key: \"insertHtmlAtCurrentPos\",\n    value: function insertHtmlAtCurrentPos(chunk) {\n      this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n      this.lastCharPos = this.html.length - 1;\n      this.endOfChunkHit = false;\n    }\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      this.pos++;\n      if (this.pos > this.lastCharPos) {\n        this.endOfChunkHit = !this.lastChunkWritten;\n        return $.EOF;\n      }\n      var cp = this.html.charCodeAt(this.pos);\n\n      //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n      //must be ignored.\n      if (this.skipNextNewLine && cp === $.LINE_FEED) {\n        this.skipNextNewLine = false;\n        this._addGap();\n        return this.advance();\n      }\n\n      //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n      if (cp === $.CARRIAGE_RETURN) {\n        this.skipNextNewLine = true;\n        return $.LINE_FEED;\n      }\n      this.skipNextNewLine = false;\n      if (unicode.isSurrogate(cp)) {\n        cp = this._processSurrogate(cp);\n      }\n\n      //OPTIMIZATION: first check if code point is in the common allowed\n      //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n      //before going into detailed performance cost validation.\n      var isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;\n      if (!isCommonValidRange) {\n        this._checkForProblematicCharacters(cp);\n      }\n      return cp;\n    }\n  }, {\n    key: \"_checkForProblematicCharacters\",\n    value: function _checkForProblematicCharacters(cp) {\n      if (unicode.isControlCodePoint(cp)) {\n        this._err(ERR.controlCharacterInInputStream);\n      } else if (unicode.isUndefinedCodePoint(cp)) {\n        this._err(ERR.noncharacterInInputStream);\n      }\n    }\n  }, {\n    key: \"retreat\",\n    value: function retreat() {\n      if (this.pos === this.lastGapPos) {\n        this.lastGapPos = this.gapStack.pop();\n        this.pos--;\n      }\n      this.pos--;\n    }\n  }]);\n  return Preprocessor;\n}();\nmodule.exports = Preprocessor;","map":{"version":3,"names":["unicode","require","ERR","$","CODE_POINTS","DEFAULT_BUFFER_WATERLINE","Preprocessor","html","pos","lastGapPos","lastCharPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","push","cp","nextCp","charCodeAt","isSurrogatePair","_addGap","getSurrogatePairCodePoint","EOF","_err","surrogateInInputStream","substring","chunk","isLastChunk","length","LINE_FEED","advance","CARRIAGE_RETURN","isSurrogate","_processSurrogate","isCommonValidRange","_checkForProblematicCharacters","isControlCodePoint","controlCharacterInInputStream","isUndefinedCodePoint","noncharacterInInputStream","pop","module","exports"],"sources":["/home/kty/workspace/seb41_pre_001/client/node_modules/parse5/lib/tokenizer/preprocessor.js"],"sourcesContent":["'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}